'base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::Data::Data' [ 0 6 63 69]
'service_manager::CrosArmGpuProcessPolicy::CrosArmGpuProcessPolicy' [ 0 17 42]
'std::__1::remove_reference<service_manager::UtilityProcessPolicy *>' [ 0 5 10]
'std::__1::__unique_if<service_manager::CrosAmdGpuProcessPolicy>' [ 0 5 10]
'std::__1::unique_ptr<service_manager::PdfCompositorProcessPolicy, std::__1::default_delete<service_manager::PdfCompositorProcessPolicy> >::release' [ 0 5 10 139]
'std::__1::__vector_base<int, std::__1::allocator<int> >::capacity' [ 0 5 10 57]
'base::internal::BindStateBaseRefCountTraits' [ 0 6 16]
'std::__1::unique_ptr<sandbox::SetuidSandboxClient, std::__1::default_delete<sandbox::SetuidSandboxClient> >::~unique_ptr' [ 0 5 10 109]
'std::__1::forward<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >' [ 0 5 10]
'service_manager::BrokerProcessPolicy' [ 0 17]
'std::__1::__vector_base<unsigned long, std::__1::allocator<unsigned long> >' [ 0 5 10]
'std::__1::__add_lvalue_reference_impl<sandbox::SetuidSandboxClient, true>' [ 0 5 10]
'std::__1::make_unique<service_manager::RendererProcessPolicy>' [ 0 5 10]
'__rlim64_t' [ 0]
'std::__1::__pointer_type<service_manager::NetworkProcessPolicy, std::__1::default_delete<service_manager::NetworkProcessPolicy> >' [ 0 5 10]
'std::__1::allocator_traits<std::__1::allocator<int> >::construct<int, const int &>' [ 0 5 10 55]
'std::__1::__compressed_pair<service_manager::BPFBasePolicy *, std::__1::default_delete<service_manager::BPFBasePolicy> >::__compressed_pair<service_manager::RendererProcessPolicy *, std::__1::default_delete<service_manager::RendererProcessPolicy> >' [ 0 5 10 122]
'std::__1::remove_reference<std::__1::basic_string<char> &>' [ 0 5 10]
'base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::is_valid' [ 0 6 63]
'std::__1::__tuple_leaf<1, service_manager::SandboxType, false>' [ 0 5 10]
'std::__1::__pointer_type<char, std::__1::allocator<char> >' [ 0 5 10]
'std::__1::forward<service_manager::BrokerProcessPolicy *&>' [ 0 5 10]
'std::__1::unique_ptr<sandbox::SetuidSandboxClient, std::__1::default_delete<sandbox::SetuidSandboxClient> >::operator bool' [ 0 5 10 109]
'std::__1::__compressed_pair<sandbox::syscall_broker::BrokerFilePermission *, std::__1::allocator<sandbox::syscall_broker::BrokerFilePermission> >' [ 0 5 10]
'sandbox::cons' [ 0 9]
'std::__1::forward<std::__1::default_delete<service_manager::CrosAmdGpuProcessPolicy> >' [ 0 5 10]
'std::__1::unique_ptr<service_manager::CdmProcessPolicy, std::__1::default_delete<service_manager::CdmProcessPolicy> >::release' [ 0 5 10 119]
'base::internal::BindStateBase::~BindStateBase' [ 0 6 16 31]
'std::__1::iterator<std::__1::output_iterator_tag, void, void, void, void>' [ 0 5 10]
'std::__1::__pointer_type_imp::__pointer_type<std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long>, std::__1::allocator<std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long> >, true>' [ 0 5 10 30]
'std::__1::__compressed_pair_elem<std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::less<void>, true>, 1, true>' [ 0 5 10]
'std::__1::__split_buffer<int, std::__1::allocator<int> &>::clear' [ 0 5 10 59]
'std::__1::true_type' [ 0 5 10]
'base::strings::internal::Arg::Arg' [ 0 6 15 25 30]
'sandbox::cons::List<sandbox::bpf_dsl::Elser::Clause>' [ 0 9 15]
'std::__1::__bit_const_reference<std::__1::__bitset<1, 10> >' [ 0 5 10]
'std::__1::false_type' [ 0 5 10]
'base::subtle::GetOrCreateLazyPointer<service_manager::SandboxLinux>' [ 0 6 14]
'logging::LOG_ERROR' [ 0 9]
'service_manager::switches::kProfilingSandbox' [ 0 17 27]
'unsigned char' [ 0]
'__va_list_tag' [ 0]
'service_manager::BPFBasePolicy::GetFSDeniedErrno' [ 0 17 32]
'std::__1::__pointer_type_imp::__pointer_type<sock_filter, std::__1::allocator<sock_filter>, true>' [ 0 5 10 30]
'intptr_t' [ 0]
'std::__1::forward<void (service_manager::SandboxLinux::*)(service_manager::SandboxType)>' [ 0 5 10]
'std::__1::__split_buffer<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> &>::__end_cap' [ 0 5 10 117]
'std::__1::conditional<true, std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *> *, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *>' [ 0 5 10]
'std::__1::__shared_weak_count::__release_shared' [ 0 5 10 31]
'std::__1::unique_ptr<service_manager::CrosAmdGpuProcessPolicy, std::__1::default_delete<service_manager::CrosAmdGpuProcessPolicy> >::unique_ptr<true, void>' [ 0 5 10 133]
'std::__1::allocator<void>' [ 0 5 10]
'std::__1::__compressed_pair<base::Environment *, std::__1::default_delete<base::Environment> >' [ 0 5 10]
'std::__1::vector<int, std::__1::allocator<int> >::__annotate_new' [ 0 5 10 50]
'std::__1::__less<unsigned long, unsigned long>::operator()' [ 0 5 10 48]
'std::__1::__pointer_type_imp::__pointer_type<char, std::__1::allocator<char>, true>' [ 0 5 10 30]
'max_align_t' [ 0]
'std::__1::unique_ptr<service_manager::NetworkProcessPolicy, std::__1::default_delete<service_manager::NetworkProcessPolicy> >' [ 0 5 10]
'std::__1::__vector_base<sock_filter, std::__1::allocator<sock_filter> >' [ 0 5 10]
'std::__1::make_unique<service_manager::CdmProcessPolicy>' [ 0 5 10]
'std::__1::pointer_traits<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > *>' [ 0 5 10]
'std::__1::__tuple_leaf<1, service_manager::SandboxLinux::Options, false>' [ 0 5 10]
'std::__1::__vector_base<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> >::__destruct_at_end' [ 0 5 10 115]
'std::__1::__compressed_pair<service_manager::CrosArmGpuProcessPolicy *, std::__1::default_delete<service_manager::CrosArmGpuProcessPolicy> >' [ 0 5 10]
'std::__1::bitset<10>::test' [ 0 5 10 22]
'service_manager::SandboxLinux::HasOpenDirectories' [ 0 17 31]
'std::__1::__compressed_pair_elem<service_manager::RendererProcessPolicy *, 0, false>' [ 0 5 10]
'std::__1::remove_reference<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> &>' [ 0 5 10]
'std::__1::conditional<false, std::__1::pointer_traits<sandbox::Credentials::Capability *>::__nat, sandbox::Credentials::Capability>' [ 0 5 10]
'std::__1::default_delete<service_manager::BPFBasePolicy>' [ 0 5 10]
'std::__1::__pointer_type<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> >' [ 0 5 10]
'std::__1::unique_ptr<service_manager::GpuProcessPolicy, std::__1::default_delete<service_manager::GpuProcessPolicy> >::~unique_ptr' [ 0 5 10 119]
'std::__1::__compressed_pair_elem<sandbox::bpf_dsl::Policy *, 0, false>::__compressed_pair_elem<sandbox::bpf_dsl::Policy *, void>' [ 0 5 10 72]
'logging::LogSeverity' [ 0 9]
'service_manager::switches::kRendererProcess' [ 0 17 27]
'size_t' [ 0]
'std::__1::forward<std::__1::default_delete<service_manager::CrosArmGpuProcessPolicy> >' [ 0 5 10]
'std::__1::remove_reference<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >' [ 0 5 10]
'std::__1::__size_type<std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > >, long, true>' [ 0 5 10]
'service_manager::switches::kDisableSeccompFilterSandbox' [ 0 17 27]
'ptrdiff_t' [ 0]
'std::__1::conditional<true, std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *> *, std::__1::__tree_node<std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long>, void *> *>' [ 0 5 10]
'std::__1::char_traits<char>::eq_int_type' [ 0 5 10 29]
'std::__1::__compressed_pair_elem<std::__1::default_delete<sandbox::BaselinePolicy>, 1, true>' [ 0 5 10]
'std::__1::ostringstream' [ 0 5 10]
'std::__1::unique_ptr<sandbox::bpf_dsl::Policy, std::__1::default_delete<sandbox::bpf_dsl::Policy> >::unique_ptr<service_manager::BPFBasePolicy, std::__1::default_delete<service_manager::BPFBasePolicy>, void, void>' [ 0 5 10 101]
'logging::CheckLEImpl' [ 0 9]
'std::__1::unique_ptr<sandbox::BaselinePolicy, std::__1::default_delete<sandbox::BaselinePolicy> >::operator bool' [ 0 5 10 99]
'std::__1::forward<std::__1::bitset<10> &>' [ 0 5 10]
'std::__1::forward<service_manager::UtilityProcessPolicy *&>' [ 0 5 10]
'__ssize_t' [ 0]
'std::__1::__unique_if<service_manager::BrokerProcessPolicy>' [ 0 5 10]
'std::__1::__compressed_pair<service_manager::BPFBasePolicy *, std::__1::default_delete<service_manager::BPFBasePolicy> >' [ 0 5 10]
'std::__1::__pointer_type<service_manager::UtilityProcessPolicy, std::__1::default_delete<service_manager::UtilityProcessPolicy> >' [ 0 5 10]
'std::__1::remove_reference<std::__1::tuple<base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType> &>' [ 0 5 10]
'sandbox::bpf_dsl::operator==' [ 0 9 18]
'base::internal::Invoker<base::internal::BindState<void (service_manager::SandboxLinux::*)(service_manager::SandboxType), base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType>, void ()>::RunOnce' [ 0 6 16 228]
'__uintmax_t' [ 0]
'std::__1::unique_ptr<service_manager::CrosArmGpuProcessPolicy, std::__1::default_delete<service_manager::CrosArmGpuProcessPolicy> >::release' [ 0 5 10 133]
'std::__1::__compressed_pair<sandbox::bpf_dsl::Policy *, std::__1::default_delete<sandbox::bpf_dsl::Policy> >::__compressed_pair<service_manager::BPFBasePolicy *, std::__1::default_delete<service_manager::BPFBasePolicy> >' [ 0 5 10 110]
'service_manager::UtilitySandboxTypeFromString' [ 0 17]
'std::__1::default_delete<base::Environment>' [ 0 5 10]
'std::__1::__add_lvalue_reference_impl<service_manager::RendererProcessPolicy, true>' [ 0 5 10]
'std::__1::conditional<false, std::__1::tuple<base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> >, std::__1::__nat>' [ 0 5 10]
'std::__1::__compressed_pair<int *, std::__1::allocator<int> >::__compressed_pair<nullptr_t, true>' [ 0 5 10 63]
'service_manager::SandboxLinux::LimitAddressSpace' [ 0 17 31]
'std::__1::__compressed_pair_elem<service_manager::BPFBasePolicy *, 0, false>::__compressed_pair_elem<service_manager::RendererProcessPolicy *, void>' [ 0 5 10 78]
'std::__1::remove_reference<std::__1::allocator<int> &>' [ 0 5 10]
'std::__1::forward<service_manager::SandboxLinux::Options>' [ 0 5 10]
'std::__1::default_delete<service_manager::NetworkProcessPolicy>' [ 0 5 10]
'double_t' [ 0]
'std::__1::unique_ptr<service_manager::UtilityProcessPolicy, std::__1::default_delete<service_manager::UtilityProcessPolicy> >::~unique_ptr' [ 0 5 10 127]
'std::__1::__pointer_type<sandbox::BaselinePolicy, std::__1::default_delete<sandbox::BaselinePolicy> >' [ 0 5 10]
'service_manager::SandboxLinux::EngageNamespaceSandbox' [ 0 17 31]
'std::__1::allocator<char>' [ 0 5 10]
'std::__1::__compressed_pair_elem<std::__1::default_delete<service_manager::GpuProcessPolicy>, 1, true>' [ 0 5 10]
'base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::release' [ 0 6 63]
'std::__1::__compressed_pair_elem<service_manager::BPFBasePolicy *, 0, false>::__compressed_pair_elem<service_manager::CrosArmGpuProcessPolicy *, void>' [ 0 5 10 78]
'base::CommandLine' [ 0 6]
'std::__1::pointer_traits<unsigned long *>' [ 0 5 10]
'std::__1::unique_ptr<service_manager::UtilityProcessPolicy, std::__1::default_delete<service_manager::UtilityProcessPolicy> >::release' [ 0 5 10 127]
'std::__1::__vector_base<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> >' [ 0 5 10]
'gid_t' [ 0]
'tm' [ 0]
'std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >::~vector' [ 0 5 10 101]
'std::__1::__pointer_type<service_manager::PpapiProcessPolicy, std::__1::default_delete<service_manager::PpapiProcessPolicy> >' [ 0 5 10]
'std::nullptr_t' [ 0 5]
'std::__1::forward<std::__1::default_delete<sandbox::BaselinePolicy> >' [ 0 5 10]
'std::__1::__split_buffer<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> &>::__split_buffer' [ 0 5 10 117]
'base::internal' [ 0 6]
'std::__1::__bit_reference<std::__1::__bitset<1, 10>, true>' [ 0 5 10]
'std::__1::__size_type<std::__1::allocator<sandbox::Credentials::Capability>, long, true>' [ 0 5 10]
'std::__1::literals::chrono_literals' [ 0 5 10 20]
'std::__1::ios_base::rdbuf' [ 0 5 10 20]
'uint_fast8_t' [ 0]
'std::__1::make_unique<service_manager::PdfCompositorProcessPolicy>' [ 0 5 10]
'std::__1::__pointer_type<service_manager::GpuProcessPolicy, std::__1::default_delete<service_manager::GpuProcessPolicy> >' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (service_manager::SandboxLinux::*)(service_manager::SandboxType), base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType>, void ()>::RunImpl<void (service_manager::SandboxLinux::*)(service_manager::SandboxType), std::__1::tuple<base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType>, 0, 1>::is_weak_call' [ 0 6 16 228 427]
'service_manager::SandboxLinux::StopThreadAndEnsureNotCounted' [ 0 17 31]
'std::__1::unique_ptr<sandbox::bpf_dsl::Policy, std::__1::default_delete<sandbox::bpf_dsl::Policy> >::reset' [ 0 5 10 101]
'std::__1::unique_ptr<service_manager::RendererProcessPolicy, std::__1::default_delete<service_manager::RendererProcessPolicy> >::reset' [ 0 5 10 129]
'base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >::~PassedWrapper' [ 0 6 16 99]
'std::__1::forward<service_manager::PpapiProcessPolicy *&>' [ 0 5 10]
'std::__1::__tree_node_types<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> *, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> >' [ 0 5 10]
'std::__1::__unique_if<service_manager::UtilityProcessPolicy>' [ 0 5 10]
'service_manager::(anonymous namespace)::DoChrootSignalHandler' [ 0 17 40]
'std::__1::unique_ptr<service_manager::CrosAmdGpuProcessPolicy, std::__1::default_delete<service_manager::CrosAmdGpuProcessPolicy> >::reset' [ 0 5 10 133]
'uint_least64_t' [ 0]
'std::__1::forward<sandbox::SetuidSandboxClient *&>' [ 0 5 10]
'std::__1::get<1, base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType>' [ 0 5 10]
'sandbox' [ 0]
'std::__1::__compressed_pair<sandbox::Credentials::Capability *, std::__1::allocator<sandbox::Credentials::Capability> &>::second' [ 0 5 10 122]
'std::__1::unique_ptr<sandbox::BaselinePolicy, std::__1::default_delete<sandbox::BaselinePolicy> >::reset' [ 0 5 10 99]
'std::__1::__bit_const_reference<std::__1::__bitset<1, 10> >::__bit_const_reference' [ 0 5 10 61]
'std::__1::tuple_element<0, std::__1::__tuple_types<base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> > >' [ 0 5 10]
'std::__1::allocator_traits<std::__1::allocator<std::__1::basic_string<char> > >::deallocate' [ 0 5 10 81]
'std::__1::__map_value_compare<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long>, std::__1::less<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long> >, true>' [ 0 5 10]
'std::__1::bitset<10>::operator[]' [ 0 5 10 22]
'std::__1::unique_ptr<sandbox::SetuidSandboxClient, std::__1::default_delete<sandbox::SetuidSandboxClient> >::reset' [ 0 5 10 109]
'std::__1::conditional<false, std::__1::pointer_traits<sandbox::syscall_broker::BrokerFilePermission *>::__nat, sandbox::syscall_broker::BrokerFilePermission>' [ 0 5 10]
'std::__1::__vector_base<sandbox::syscall_broker::BrokerFilePermission, std::__1::allocator<sandbox::syscall_broker::BrokerFilePermission> >' [ 0 5 10]
'std::__1::unique_ptr<sandbox::BaselinePolicy, std::__1::default_delete<sandbox::BaselinePolicy> >::unique_ptr<true, void>' [ 0 5 10 99]
'std::__1::tuple_element<0, std::__1::tuple<base::internal::UnretainedWrapper<service_manager::SandboxLinux> > >' [ 0 5 10]
'std::__1::__compressed_pair_elem<service_manager::BPFBasePolicy *, 0, false>::__compressed_pair_elem<service_manager::BPFBasePolicy *, void>' [ 0 5 10 78]
'std::__1::forward<sandbox::BaselinePolicy *&>' [ 0 5 10]
'std::__1::__unique_if<service_manager::PpapiProcessPolicy>' [ 0 5 10]
'std::__1::__vector_base<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >::clear' [ 0 5 10 108]
'div_t' [ 0]
'std::__1::allocator_traits<std::__1::allocator<sandbox::Credentials::Capability> >::__construct<sandbox::Credentials::Capability, sandbox::Credentials::Capability>' [ 0 5 10 84]
'std::__1::tuple<base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType>::tuple<base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType &, false, false>' [ 0 5 10 113]
'std::__1::forward<service_manager::NetworkProcessPolicy *>' [ 0 5 10]
'std::__1::forward<const int &>' [ 0 5 10]
'std::__1::__compressed_pair<sandbox::BaselinePolicy *, std::__1::default_delete<sandbox::BaselinePolicy> >::__compressed_pair<sandbox::BaselinePolicy *&, true>' [ 0 5 10 108]
'std::__1::tuple_element<1, std::__1::tuple<base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType> >' [ 0 5 10]
'std::__1::add_lvalue_reference<service_manager::PpapiProcessPolicy>' [ 0 5 10]
'std::__1::unique_ptr<service_manager::GpuProcessPolicy, std::__1::default_delete<service_manager::GpuProcessPolicy> >::release' [ 0 5 10 119]
'std::__1::tuple<base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> >' [ 0 5 10]
'base::internal::UnretainedWrapper<service_manager::SandboxLinux>::get' [ 0 6 16 66]
'base' [ 0]
'sandbox::syscall_broker::BrokerProcess' [ 0 9 25]
'std::__1::__pointer_type_imp' [ 0 5 10]
'std::__1::__compressed_pair_elem<unsigned long, 0, false>' [ 0 5 10]
'std::__1::allocator<std::__1::pair<const std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long> >' [ 0 5 10]
'std::__1::unique_ptr<service_manager::PpapiProcessPolicy, std::__1::default_delete<service_manager::PpapiProcessPolicy> >::unique_ptr<true, void>' [ 0 5 10 123]
'std::__1::__tuple_leaf<0, base::internal::UnretainedWrapper<service_manager::SandboxLinux>, false>::__tuple_leaf<base::internal::UnretainedWrapper<service_manager::SandboxLinux>, void>' [ 0 5 10 100]
'std::__1::unique_ptr<service_manager::BPFBasePolicy, std::__1::default_delete<service_manager::BPFBasePolicy> >::unique_ptr<service_manager::PdfCompositorProcessPolicy, std::__1::default_delete<service_manager::PdfCompositorProcessPolicy>, void, void>' [ 0 5 10 113]
'std::__1::unique_ptr<base::Environment, std::__1::default_delete<base::Environment> >' [ 0 5 10]
'fpos_t' [ 0]
'std::__1::make_unique<service_manager::NetworkProcessPolicy>' [ 0 5 10]
'std::__1::remove_reference<const std::__1::bitset<10> &>' [ 0 5 10]
'std::__1::memory_order' [ 0 5 10]
'service_manager::CdmProcessPolicy::~CdmProcessPolicy' [ 0 17 35]
'std::__1::__allocator_traits_rebind<std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > >, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *>, true>' [ 0 5 10]
'std::__1::addressof<const char>' [ 0 5 10]
'std::__1::__libcpp_numeric_limits<int, true>' [ 0 5 10]
'base::BindUnwrapTraits<std::__1::bitset<10> >' [ 0 6]
'std::__1::default_delete<service_manager::NetworkProcessPolicy>::operator()' [ 0 5 10 65]
'std::__1::allocator_traits<std::__1::allocator<std::__1::basic_string<char> > >::__destroy<std::__1::basic_string<char> >' [ 0 5 10 81]
'base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::get_traits' [ 0 6 63]
'std::__1::remove_reference<int *&>' [ 0 5 10]
'std::__1::__compressed_pair_elem<std::__1::allocator<int> &, 1, false>::__get' [ 0 5 10 72]
'std::__1::__libcpp_numeric_limits<unsigned int, true>' [ 0 5 10]
'std::__1::allocator<std::__1::basic_string<char> >::destroy' [ 0 5 10 52]
'service_manager::switches::kUtilityProcess' [ 0 17 27]
'std::__1::__pointer_type<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > > >' [ 0 5 10]
'std::__1::add_lvalue_reference<service_manager::PdfCompositorProcessPolicy>' [ 0 5 10]
'uint_least32_t' [ 0]
'std::__1::__split_buffer<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> &>::__alloc' [ 0 5 10 117]
'std::__1::__compressed_pair_elem<std::__1::default_delete<sandbox::bpf_dsl::Policy>, 1, true>::__compressed_pair_elem<std::__1::default_delete<service_manager::BrokerProcessPolicy>, void>' [ 0 5 10 95]
'base::Singleton<service_manager::SandboxLinux, base::DefaultSingletonTraits<service_manager::SandboxLinux>, service_manager::SandboxLinux>::OnExit' [ 0 6 140]
'base::internal::FunctorTraits<bool (*)(base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, service_manager::SandboxLinux::Options, std::__1::bitset<10>), void>::Invoke<bool (*const &)(base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, service_manager::SandboxLinux::Options, std::__1::bitset<10>), base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, const service_manager::SandboxLinux::Options &, const std::__1::bitset<10> &>' [ 0 6 16 176]
'std::__1::remove_reference<base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits> &>' [ 0 5 10]
'base::internal::IsNull<void (service_manager::SandboxLinux::*)(service_manager::SandboxType)>' [ 0 6 16]
'std::__1::__compressed_pair_elem<std::__1::default_delete<service_manager::UtilityProcessPolicy>, 1, true>' [ 0 5 10]
'__storage_type' [ 0]
'std::__1::allocator_traits<std::__1::allocator<std::__1::basic_string<char> > >::destroy<std::__1::basic_string<char> >' [ 0 5 10 81]
'std::__1::vector<sock_filter, std::__1::allocator<sock_filter> >' [ 0 5 10]
'std::__1::forward<base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> > >' [ 0 5 10]
'service_manager::NetworkProcessPolicy::~NetworkProcessPolicy' [ 0 17 39]
'std::__1::__pointer_type<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >' [ 0 5 10]
'std::__1::__compressed_pair_elem<service_manager::BPFBasePolicy *, 0, false>::__compressed_pair_elem<service_manager::PpapiProcessPolicy *, void>' [ 0 5 10 78]
'long unsigned int' [ 0]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1, 2>, base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> >' [ 0 5 10]
'std::__1::__throw_out_of_range' [ 0 5 10]
'std::__1::__compressed_pair<sandbox::bpf_dsl::Policy *, std::__1::default_delete<sandbox::bpf_dsl::Policy> >' [ 0 5 10]
'std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long>, void *> >' [ 0 5 10]
'std::__1::__add_lvalue_reference_impl<sandbox::syscall_broker::BrokerClient, true>' [ 0 5 10]
'std::__1::get<0, base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> >' [ 0 5 10]
'std::__1::remove_reference<std::__1::default_delete<service_manager::PpapiProcessPolicy> >' [ 0 5 10]
'std::__1::bitset<10>' [ 0 5 10]
'std::__1::__const_void_pointer<std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long> *, std::__1::allocator<std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long> >, false>' [ 0 5 10]
'std::__1::__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> > >' [ 0 5 10]
'std::__1::__compressed_pair_elem<std::__1::default_delete<service_manager::CdmProcessPolicy>, 1, true>' [ 0 5 10]
'std::__1::__allocator_traits_rebind<std::__1::allocator<std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long> >, std::__1::__tree_node<std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long>, void *>, true>' [ 0 5 10]
'std::__1::max<unsigned long>' [ 0 5 10]
'std::__1::float_round_style' [ 0 5 10]
'base::internal::FunctorTraits<void (service_manager::SandboxLinux::*)(), void>::Invoke<void (service_manager::SandboxLinux::*)(), service_manager::SandboxLinux *>' [ 0 6 16 80]
'base::internal::Unwrap<const std::__1::bitset<10> &>' [ 0 6 16]
'std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::less<void>, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > > >' [ 0 5 10]
'std::__1::__compressed_pair_elem<service_manager::CdmProcessPolicy *, 0, false>::__compressed_pair_elem<service_manager::CdmProcessPolicy *&, void>' [ 0 5 10 81]
'std::__1::__compressed_pair<int *, std::__1::allocator<int> >' [ 0 5 10]
'std::__1::forward<service_manager::UtilityProcessPolicy *>' [ 0 5 10]
'std::__1::pointer_traits<sock_filter *>' [ 0 5 10]
'std::__1::__pointer_type<sandbox::SetuidSandboxClient, std::__1::default_delete<sandbox::SetuidSandboxClient> >' [ 0 5 10]
'logging::LOG_DCHECK' [ 0 9]
'std::__1::__tree<std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long>, std::__1::__map_value_compare<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long>, std::__1::less<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long> >, true>, std::__1::allocator<std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long> > >' [ 0 5 10]
'std::__1::__vector_base<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >::~__vector_base' [ 0 5 10 108]
'std::__1::remove_reference<service_manager::SandboxLinux::Options>' [ 0 5 10]
'sandbox::bpf_dsl::Policy::Policy' [ 0 9 18 26]
'size_type' [ 0]
'std::__1::forward<std::__1::default_delete<service_manager::RendererProcessPolicy> >' [ 0 5 10]
'std::__1::unique_ptr<service_manager::CrosArmGpuProcessPolicy, std::__1::default_delete<service_manager::CrosArmGpuProcessPolicy> >::reset' [ 0 5 10 133]
'logging::CheckGEImpl' [ 0 9]
'std::__1::__compressed_pair_elem<std::__1::default_delete<sandbox::bpf_dsl::Policy>, 1, true>::__compressed_pair_elem<std::__1::default_delete<sandbox::BaselinePolicy>, void>' [ 0 5 10 95]
'std::__1::__compressed_pair_elem<sandbox::bpf_dsl::Policy *, 0, false>::__compressed_pair_elem<service_manager::BPFBasePolicy *, void>' [ 0 5 10 72]
'std::__1::unique_ptr<service_manager::CdmProcessPolicy, std::__1::default_delete<service_manager::CdmProcessPolicy> >::~unique_ptr' [ 0 5 10 119]
'std::__1::unique_ptr<service_manager::PpapiProcessPolicy, std::__1::default_delete<service_manager::PpapiProcessPolicy> >' [ 0 5 10]
'std::__1::__compressed_pair<sandbox::bpf_dsl::Policy *, std::__1::default_delete<sandbox::bpf_dsl::Policy> >::__compressed_pair<sandbox::BaselinePolicy *, std::__1::default_delete<sandbox::BaselinePolicy> >' [ 0 5 10 110]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::size' [ 0 5 10 87]
'sigaction' [ 0]
'std::__1::__pointer_type_imp::__pointer_type<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > >, true>' [ 0 5 10 30]
'std::__1::__compressed_pair<sandbox::Credentials::Capability *, std::__1::allocator<sandbox::Credentials::Capability> >::__compressed_pair<nullptr_t, true>' [ 0 5 10 121]
'base::subtle::StartRefCountFromZeroTag' [ 0 6 14]
'base::internal::CallbackBase::operator bool' [ 0 6 16 30]
'base::internal::Invoker<base::internal::BindState<bool (*)(base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, service_manager::SandboxLinux::Options, std::__1::bitset<10>), base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> >, bool ()>' [ 0 6 16]
'base::RefCountedThreadSafe<base::internal::BindStateBase, base::internal::BindStateBaseRefCountTraits>::~RefCountedThreadSafe' [ 0 6 104]
'std::__1::remove_reference<sandbox::Credentials::Capability *&>' [ 0 5 10]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1>, base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType>' [ 0 5 10]
'base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >::Take' [ 0 6 16 99]
'std::__1::__to_raw_pointer<std::__1::basic_string<char> >' [ 0 5 10]
'std::__1::__pointer_type_imp::__pointer_type<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> >, true>' [ 0 5 10 30]
'service_manager::SandboxSeccompBPF::SupportsSandboxWithTsync' [ 0 17 36]
'std::__1::unique_ptr<service_manager::NetworkProcessPolicy, std::__1::default_delete<service_manager::NetworkProcessPolicy> >::unique_ptr<true, void>' [ 0 5 10 127]
'std::__1::__tree_node_base_types<void *>' [ 0 5 10]
'std::__1::basic_ios<char, std::__1::char_traits<char> >::rdbuf' [ 0 5 10 57]
'std::__1::unique_ptr<sandbox::SetuidSandboxClient, std::__1::default_delete<sandbox::SetuidSandboxClient> >' [ 0 5 10]
'rlim_t' [ 0]
'service_manager::CrosArmGpuProcessPolicy::EvaluateSyscall' [ 0 17 42]
'std::__1::__compressed_pair_elem<std::__1::allocator<sock_filter>, 1, true>' [ 0 5 10]
'service_manager::switches::kGpuProcess' [ 0 17 27]
'uint_least16_t' [ 0]
'std::__1::streamsize' [ 0 5 10]
'std::__1::remove_reference<void (service_manager::SandboxLinux::*&)()>' [ 0 5 10]
'std::__1::remove_reference<service_manager::SandboxType>' [ 0 5 10]
'sandbox::SetuidSandboxClient' [ 0 9]
'base::internal::Unwrap<const base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> > &>' [ 0 6 16]
'std::__1::remove_reference<service_manager::PpapiProcessPolicy *>' [ 0 5 10]
'std::__1::allocator_traits<std::__1::allocator<int> >::allocate' [ 0 5 10 55]
'base::string16' [ 0 6]
'std::__1::__pad_and_output<char, std::__1::char_traits<char> >' [ 0 5 10]
'service_manager::Sandbox' [ 0 17]
'std::__1::__compressed_pair_elem<service_manager::NetworkProcessPolicy *, 0, false>' [ 0 5 10]
'logging::CheckOpResult' [ 0 9]
'long double' [ 0]
'std::__1::vector<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> >::size' [ 0 5 10 108]
'long long int' [ 0]
'std::__1::__vector_base<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> >::__alloc' [ 0 5 10 115]
'std::__1::default_delete<service_manager::CrosArmGpuProcessPolicy>::operator()' [ 0 5 10 68]
'std::__1::add_lvalue_reference<base::Environment>' [ 0 5 10]
'service_manager::SandboxDebugHandling' [ 0 17]
'base::BindUnwrapTraits<base::internal::UnretainedWrapper<service_manager::SandboxLinux> >::Unwrap' [ 0 6 91]
'std::__1::__pointer_type<service_manager::CdmProcessPolicy, std::__1::default_delete<service_manager::CdmProcessPolicy> >' [ 0 5 10]
'std::__1::__vector_base<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> >::clear' [ 0 5 10 115]
'logging::LogMessageVoidify::operator&' [ 0 9 28]
'service_manager::switches::kCdmSandbox' [ 0 17 27]
'std::__1::__split_buffer<int, std::__1::allocator<int> &>::__alloc' [ 0 5 10 59]
'std::__1::__atomic_base<long, false>' [ 0 5 10]
'std::__1::__compressed_pair_elem<std::__1::default_delete<service_manager::BPFBasePolicy>, 1, true>::__compressed_pair_elem<std::__1::default_delete<service_manager::RendererProcessPolicy>, void>' [ 0 5 10 101]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::append' [ 0 5 10 87]
'std::__1::allocator_traits<std::__1::allocator<sandbox::Credentials::Capability> >::construct<sandbox::Credentials::Capability, sandbox::Credentials::Capability>' [ 0 5 10 84]
'std::__1::__tuple_indices<0>' [ 0 5 10]
'std::__1::__to_raw_pointer<int>' [ 0 5 10]
'std::__1::__unique_if<service_manager::RendererProcessPolicy>' [ 0 5 10]
'std::__1::remove_reference<std::__1::default_delete<service_manager::PdfCompositorProcessPolicy> >' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (service_manager::SandboxLinux::*)(), base::internal::UnretainedWrapper<service_manager::SandboxLinux> >, void ()>::RunOnce::num_bound_args' [ 0 6 16 171 180]
'std::__1::unique_ptr<service_manager::PdfCompositorProcessPolicy, std::__1::default_delete<service_manager::PdfCompositorProcessPolicy> >::reset' [ 0 5 10 139]
'std::__1::__pointer_type<service_manager::BrokerProcessPolicy, std::__1::default_delete<service_manager::BrokerProcessPolicy> >' [ 0 5 10]
'std::__1::__pointer_type_imp::__pointer_type<service_manager::CrosArmGpuProcessPolicy, std::__1::default_delete<service_manager::CrosArmGpuProcessPolicy>, false>' [ 0 5 10 30]
'logging::LogMessage' [ 0 9]
'service_manager::SandboxLinux::StartSeccompBPF' [ 0 17 31]
'std::__1::vector<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> >::__recommend' [ 0 5 10 108]
'std::__1::__compressed_pair<service_manager::UtilityProcessPolicy *, std::__1::default_delete<service_manager::UtilityProcessPolicy> >::__compressed_pair<service_manager::UtilityProcessPolicy *&, true>' [ 0 5 10 136]
'std::__1::__vector_base<int, std::__1::allocator<int> >::__end_cap' [ 0 5 10 57]
'ssize_t' [ 0]
'std::__1::forward<service_manager::RendererProcessPolicy *>' [ 0 5 10]
'int_least8_t' [ 0]
'std::__1::remove_reference<service_manager::SandboxLinux *>' [ 0 5 10]
'std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > >' [ 0 5 10]
'service_manager::NetworkProcessPolicy::NetworkProcessPolicy' [ 0 17 39]
'service_manager::BPFBasePolicy::~BPFBasePolicy' [ 0 17 32]
'std::__1::add_lvalue_reference<service_manager::BPFBasePolicy>' [ 0 5 10]
'base::subtle::StartRefCountFromOneTag' [ 0 6 14]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__get_short_size' [ 0 5 10 87]
'std::__1::add_lvalue_reference<service_manager::UtilityProcessPolicy>' [ 0 5 10]
'std::__1::__tree_key_value_types<std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long> >' [ 0 5 10]
'float' [ 0]
'std::__1::make_unique<service_manager::CrosAmdGpuProcessPolicy>' [ 0 5 10]
'std::__1::unique_ptr<sandbox::bpf_dsl::Policy, std::__1::default_delete<sandbox::bpf_dsl::Policy> >::unique_ptr<service_manager::BrokerProcessPolicy, std::__1::default_delete<service_manager::BrokerProcessPolicy>, void, void>' [ 0 5 10 101]
'base::OnceCallback<void ()>::~OnceCallback' [ 0 6 29]
'base::DefaultSingletonTraits<service_manager::SandboxLinux>' [ 0 6]
'std::__1::forward<std::__1::tuple<base::internal::UnretainedWrapper<service_manager::SandboxLinux> > >' [ 0 5 10]
'ldiv_t' [ 0]
'std::__1::integer_sequence<unsigned long, 0>' [ 0 5 10]
'wctype_t' [ 0]
'std::__1::__pointer_type_imp::__pointer_type<sandbox::bpf_dsl::Policy, std::__1::default_delete<sandbox::bpf_dsl::Policy>, false>' [ 0 5 10 30]
'std::__1::__compressed_pair_elem<sock_filter *, 0, false>' [ 0 5 10]
'std::__1::__compressed_pair_elem<service_manager::CrosAmdGpuProcessPolicy *, 0, false>' [ 0 5 10]
'service_manager::PpapiProcessPolicy' [ 0 17]
'std::__1::add_lvalue_reference<sandbox::bpf_dsl::Policy>' [ 0 5 10]
'std::__1::allocator_traits<std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > > >' [ 0 5 10]
'service_manager::switches::kGpuSandboxFailuresFatal' [ 0 17 27]
'base::internal::InvokeHelper<false, void>::MakeItSo<void (service_manager::SandboxLinux::*)(), service_manager::SandboxLinux *>' [ 0 6 16 43]
'std::__1::__compressed_pair_elem<sandbox::Credentials::Capability *, 0, false>' [ 0 5 10]
'std::__1::vector<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> >::~vector' [ 0 5 10 108]
'service_manager::StringFromUtilitySandboxType' [ 0 17]
'std::__1::unique_ptr<service_manager::GpuProcessPolicy, std::__1::default_delete<service_manager::GpuProcessPolicy> >::reset' [ 0 5 10 119]
'std::__1::__compressed_pair<unsigned long *, std::__1::allocator<unsigned long> >' [ 0 5 10]
'std::__1::tuple<base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> >::~tuple' [ 0 5 10 179]
'std::__1::__split_buffer<int, std::__1::allocator<int> &>::capacity' [ 0 5 10 59]
'std::__1::unique_ptr<sandbox::SetuidSandboxClient, std::__1::default_delete<sandbox::SetuidSandboxClient> >::unique_ptr<true, void>' [ 0 5 10 109]
'std::__1::forward<service_manager::BrokerProcessPolicy *>' [ 0 5 10]
'std::__1::__tuple_types<base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType>' [ 0 5 10]
'std::__1::unique_ptr<service_manager::BrokerProcessPolicy, std::__1::default_delete<service_manager::BrokerProcessPolicy> >::release' [ 0 5 10 125]
'base::BindUnwrapTraits<service_manager::SandboxType>' [ 0 6]
'service_manager::CdmProcessPolicy' [ 0 17]
'sandbox::SandboxBPF' [ 0 9]
'base::BindUnwrapTraits<base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> > >::Unwrap' [ 0 6 124]
'std::__1::unique_ptr<sandbox::BaselinePolicy, std::__1::default_delete<sandbox::BaselinePolicy> >::operator->' [ 0 5 10 99]
'service_manager::GpuProcessPolicy::EvaluateSyscall' [ 0 17 35]
'service_manager::UtilityProcessPolicy::~UtilityProcessPolicy' [ 0 17 39]
'std::__1::__size_type<std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > >, long, true>' [ 0 5 10]
'service_manager::SandboxLinux::CheckForBrokenPromises' [ 0 17 31]
'std::__1::conditional<false, std::__1::pointer_traits<unsigned long *>::__nat, unsigned long>' [ 0 5 10]
'std::__1::forward<bool (*const &)(base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, service_manager::SandboxLinux::Options, std::__1::bitset<10>)>' [ 0 5 10]
'std::__1::vector<int, std::__1::allocator<int> >::__push_back_slow_path<const int &>' [ 0 5 10 50]
'base::FilePath' [ 0 6]
'uint8_t' [ 0]
'base::internal::BindState<void (service_manager::SandboxLinux::*)(service_manager::SandboxType), base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType>::BindState<void (service_manager::SandboxLinux::*)(service_manager::SandboxType), base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType &>' [ 0 6 16 194]
'base::internal::BindStateBase' [ 0 6 16]
'__gnuc_va_list' [ 0]
'std::__1::forward<const base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> > &>' [ 0 5 10]
'base::internal::FunctorTraits<bool (*)(base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, service_manager::SandboxLinux::Options, std::__1::bitset<10>), void>' [ 0 6 16]
'std::__1::__split_buffer<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> &>::~__split_buffer' [ 0 5 10 117]
'service_manager::UtilityProcessPolicy::UtilityProcessPolicy' [ 0 17 39]
'std::__1::__compressed_pair_elem<std::__1::default_delete<service_manager::PpapiProcessPolicy>, 1, true>' [ 0 5 10]
'std::__1::forward<service_manager::PdfCompositorProcessPolicy *&>' [ 0 5 10]
'std::__1::__compressed_pair_elem<service_manager::UtilityProcessPolicy *, 0, false>::__compressed_pair_elem<service_manager::UtilityProcessPolicy *&, void>' [ 0 5 10 85]
'logging::CheckOpResult::CheckOpResult' [ 0 9 24]
'uint_fast64_t' [ 0]
'std::__1::vector<int, std::__1::allocator<int> >::max_size' [ 0 5 10 50]
'std::__1::forward<service_manager::GpuProcessPolicy *>' [ 0 5 10]
'base::StringPiece' [ 0 6]
'std::__1::__compressed_pair<service_manager::BPFBasePolicy *, std::__1::default_delete<service_manager::BPFBasePolicy> >::__compressed_pair<service_manager::PdfCompositorProcessPolicy *, std::__1::default_delete<service_manager::PdfCompositorProcessPolicy> >' [ 0 5 10 122]
'std::__1::__compressed_pair_elem<sandbox::bpf_dsl::Policy *, 0, false>::__compressed_pair_elem<service_manager::BrokerProcessPolicy *, void>' [ 0 5 10 72]
'__sigset_t' [ 0]
'std::__1::pointer_traits<sandbox::Credentials::Capability *>' [ 0 5 10]
'std::__1::forward<std::__1::default_delete<service_manager::CdmProcessPolicy> >' [ 0 5 10]
'std::__1::pointer_traits<sandbox::syscall_broker::BrokerFilePermission *>' [ 0 5 10]
'base::internal::BindState<bool (*)(base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, service_manager::SandboxLinux::Options, std::__1::bitset<10>), base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> >' [ 0 6 16]
'std::__1::__pointer_type_imp::__pointer_type<service_manager::UtilityProcessPolicy, std::__1::default_delete<service_manager::UtilityProcessPolicy>, false>' [ 0 5 10 30]
'std::__1::remove_reference<std::__1::default_delete<service_manager::CrosAmdGpuProcessPolicy> >' [ 0 5 10]
'std::__1::__const_void_pointer<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> >, false>' [ 0 5 10]
'service_manager::SandboxLinux::PreinitializeSandbox' [ 0 17 31]
'std::__1::__pointer_type_imp::__pointer_type<sandbox::SetuidSandboxClient, std::__1::default_delete<sandbox::SetuidSandboxClient>, false>' [ 0 5 10 30]
'logging::LogMessage::stream' [ 0 9 21]
'std::__1::remove_reference<service_manager::RendererProcessPolicy *&>' [ 0 5 10]
'std::__1::remove_reference<void (service_manager::SandboxLinux::*)()>' [ 0 5 10]
'service_manager::switches::kAllowNoSandboxJob' [ 0 17 27]
'std::__1::conditional<false, std::__1::pointer_traits<sock_filter *>::__nat, sock_filter>' [ 0 5 10]
'std::__1::remove_reference<std::__1::default_delete<service_manager::UtilityProcessPolicy> >' [ 0 5 10]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__is_long' [ 0 5 10 87]
'sandbox::syscall_broker::BrokerPermissionList' [ 0 9 25]
'std::__1::__const_void_pointer<unsigned long *, std::__1::allocator<unsigned long>, false>' [ 0 5 10]
'std::__1::__compressed_pair_elem<int *, 0, false>' [ 0 5 10]
'sandbox::bpf_dsl::Caser<unsigned long>::Default' [ 0 9 18 40]
'std::__1::add_lvalue_reference<service_manager::CrosAmdGpuProcessPolicy>' [ 0 5 10]
'std::__1::__compressed_pair_elem<std::__1::allocator<int> &, 1, false>::__compressed_pair_elem<std::__1::allocator<int> &, void>' [ 0 5 10 72]
'std::__1::__compressed_pair_elem<std::__1::default_delete<service_manager::BPFBasePolicy>, 1, true>::__compressed_pair_elem<std::__1::default_delete<service_manager::PdfCompositorProcessPolicy>, void>' [ 0 5 10 101]
'std::__1::allocator_traits<std::__1::allocator<sandbox::Credentials::Capability> >::__max_size' [ 0 5 10 84]
'std::__1::__compressed_pair_elem<std::__1::default_delete<service_manager::BPFBasePolicy>, 1, true>::__compressed_pair_elem<std::__1::default_delete<service_manager::GpuProcessPolicy>, void>' [ 0 5 10 101]
'service_manager::SandboxLinux::seccomp_bpf_supported' [ 0 17 31]
'std::__1::remove_reference<service_manager::CrosAmdGpuProcessPolicy *&>' [ 0 5 10]
'service_manager::CrosArmGpuProcessPolicy::~CrosArmGpuProcessPolicy' [ 0 17 42]
'std::__1::less<void>' [ 0 5 10]
'std::__1::swap<sandbox::Credentials::Capability *>' [ 0 5 10]
'std::__1::remove_reference<std::__1::default_delete<service_manager::BPFBasePolicy> >' [ 0 5 10]
'std::__1::remove_reference<std::__1::unique_ptr<sandbox::bpf_dsl::Policy, std::__1::default_delete<sandbox::bpf_dsl::Policy> > &>' [ 0 5 10]
'std::__1::enable_if<true, bool>' [ 0 5 10]
'std::__1::remove_reference<service_manager::PdfCompositorProcessPolicy *&>' [ 0 5 10]
'std::__1::remove_reference<std::__1::default_delete<sandbox::bpf_dsl::Policy> >' [ 0 5 10]
'std::__1::__split_buffer<int, std::__1::allocator<int> &>::__split_buffer' [ 0 5 10 59]
'base::internal::BindState<void (service_manager::SandboxLinux::*)(), base::internal::UnretainedWrapper<service_manager::SandboxLinux> >' [ 0 6 16]
'base::OnceClosure' [ 0 6]
'std::__1::__compressed_pair_elem<std::__1::default_delete<base::Environment>, 1, true>' [ 0 5 10]
'service_manager::switches::kNoneSandbox' [ 0 17 27]
'std::__1::__pointer_type<sandbox::syscall_broker::BrokerClient, std::__1::default_delete<sandbox::syscall_broker::BrokerClient> >' [ 0 5 10]
'std::__1::allocator_traits<std::__1::allocator<sandbox::Credentials::Capability> >::destroy<sandbox::Credentials::Capability>' [ 0 5 10 84]
'service_manager::BPFBasePolicy::InvalidSyscall' [ 0 17 32]
'service_manager::switches::kDisableAppContainer' [ 0 17 27]
'__sighandler_t' [ 0]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::empty' [ 0 5 10 87]
'std::__1::__compressed_pair_elem<base::Environment *, 0, false>' [ 0 5 10]
'std::__1::binary_function<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, bool>' [ 0 5 10]
'std::__1::__compressed_pair_elem<std::__1::default_delete<service_manager::RendererProcessPolicy>, 1, true>' [ 0 5 10]
'logging::SystemErrorCode' [ 0 9]
'base::BindUnwrapTraits<service_manager::SandboxLinux::Options>' [ 0 6]
'std::__1::unique_ptr<service_manager::PpapiProcessPolicy, std::__1::default_delete<service_manager::PpapiProcessPolicy> >::reset' [ 0 5 10 123]
'service_manager::BrokerProcessPolicy::~BrokerProcessPolicy' [ 0 17 38]
'__uid_t' [ 0]
'base::subtle::AdoptRefTag' [ 0 6 14]
'sandbox::bpf_dsl::ResultExpr' [ 0 9 18]
'std::__1::__add_lvalue_reference_impl<sandbox::BaselinePolicy, true>' [ 0 5 10]
'std::__1::remove_reference<std::__1::default_delete<service_manager::CrosArmGpuProcessPolicy> >' [ 0 5 10]
'std::__1::__compressed_pair_elem<std::__1::default_delete<service_manager::BPFBasePolicy>, 1, true>::__compressed_pair_elem<std::__1::default_delete<service_manager::CdmProcessPolicy>, void>' [ 0 5 10 101]
'uint_fast32_t' [ 0]
'std::__1::__compressed_pair_elem<std::__1::default_delete<sandbox::bpf_dsl::Policy>, 1, true>::__compressed_pair_elem<std::__1::default_delete<sandbox::bpf_dsl::Policy>, void>' [ 0 5 10 95]
'std::__1::remove_reference<std::__1::default_delete<service_manager::GpuProcessPolicy> >' [ 0 5 10]
'wctrans_t' [ 0]
'__socket_type' [ 0]
'std::__1::unique_ptr<sandbox::bpf_dsl::Policy, std::__1::default_delete<sandbox::bpf_dsl::Policy> >::unique_ptr' [ 0 5 10 101]
'std::__1::__compressed_pair<sandbox::syscall_broker::BrokerClient *, std::__1::default_delete<sandbox::syscall_broker::BrokerClient> >' [ 0 5 10]
'std::__1::__compressed_pair_elem<service_manager::GpuProcessPolicy *, 0, false>::__compressed_pair_elem<service_manager::GpuProcessPolicy *&, void>' [ 0 5 10 81]
'signed char' [ 0]
'base::internal::BindState<bool (*)(base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, service_manager::SandboxLinux::Options, std::__1::bitset<10>), base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> >::BindState<bool (*)(base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, service_manager::SandboxLinux::Options, std::__1::bitset<10>), base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, const service_manager::SandboxLinux::Options &, const std::__1::bitset<10> &>' [ 0 6 16 328]
'std::__1::unique_ptr<service_manager::RendererProcessPolicy, std::__1::default_delete<service_manager::RendererProcessPolicy> >' [ 0 5 10]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__zero' [ 0 5 10 87]
'scoped_refptr<base::internal::BindStateBase>' [ 0]
'std::__1::allocator_traits<std::__1::allocator<sandbox::Credentials::Capability> >::__destroy<sandbox::Credentials::Capability>' [ 0 5 10 84]
'std::__1::ios_base::flags' [ 0 5 10 20]
'service_manager::(anonymous namespace)::kFSDeniedErrno' [ 0 17 40]
'std::__1::unique_ptr<service_manager::BrokerProcessPolicy, std::__1::default_delete<service_manager::BrokerProcessPolicy> >::reset' [ 0 5 10 125]
'std::__1::__compressed_pair_elem<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, 0, false>' [ 0 5 10]
'mbstate_t' [ 0]
'std::__1::remove_reference<std::__1::default_delete<service_manager::RendererProcessPolicy> >' [ 0 5 10]
'service_manager::(anonymous namespace)::RestrictIoctl' [ 0 17 40]
'std::__1::forward<const service_manager::SandboxLinux::Options &>' [ 0 5 10]
'sandbox::bpf_dsl::Caser<unsigned long>' [ 0 9 18]
'sandbox::syscall_broker' [ 0 9]
'std::__1::__compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long>, void *> > >' [ 0 5 10]
'std::__1::operator!=<char, std::__1::char_traits<char>, std::__1::allocator<char> >' [ 0 5 10]
'__compar_fn_t' [ 0]
'std::__1::allocator_traits<std::__1::allocator<sandbox::Credentials::Capability> >::allocate' [ 0 5 10 84]
'std::__1::__compressed_pair_elem<service_manager::BPFBasePolicy *, 0, false>::__compressed_pair_elem<service_manager::GpuProcessPolicy *, void>' [ 0 5 10 78]
'std::__1::__pointer_type<base::Environment, std::__1::default_delete<base::Environment> >' [ 0 5 10]
'std::__1::remove_reference<service_manager::SandboxType &>' [ 0 5 10]
'char' [ 0]
'std::__1::unique_ptr<service_manager::BPFBasePolicy, std::__1::default_delete<service_manager::BPFBasePolicy> >::unique_ptr<service_manager::CrosAmdGpuProcessPolicy, std::__1::default_delete<service_manager::CrosAmdGpuProcessPolicy>, void, void>' [ 0 5 10 113]
'std::__1::__bit_const_reference<std::__1::__bitset<1, 10> >::operator bool' [ 0 5 10 61]
'service_manager::SandboxLinux::StartBrokerProcess' [ 0 17 31]
'unsigned int' [ 0]
'std::__1::forward<std::__1::default_delete<service_manager::NetworkProcessPolicy> >' [ 0 5 10]
'std::__1::__compressed_pair<int *, std::__1::allocator<int> &>' [ 0 5 10]
'base::internal::Unwrap<service_manager::SandboxType>' [ 0 6 16]
'std::__1::add_lvalue_reference<sandbox::SetuidSandboxClient>' [ 0 5 10]
'service_manager::PpapiProcessPolicy::PpapiProcessPolicy' [ 0 17 37]
'std::__1::remove_reference<std::__1::default_delete<service_manager::CdmProcessPolicy> >' [ 0 5 10]
'base::internal::BindState<void (service_manager::SandboxLinux::*)(service_manager::SandboxType), base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType>::Destroy' [ 0 6 16 194]
'std::__1::remove_reference<service_manager::GpuProcessPolicy *&>' [ 0 5 10]
'sandbox::SyscallSets' [ 0 9]
'service_manager' [ 0]
'std::__1::__compressed_pair_elem<unsigned long *, 0, false>' [ 0 5 10]
'std::__1::conditional<false, std::__1::pointer_traits<char *>::__nat, char>' [ 0 5 10]
'base::strings' [ 0 6]
'int' [ 0]
'base::internal::CallbackBaseCopyable' [ 0 6 16]
'std::__1::__compressed_pair_elem<std::__1::default_delete<service_manager::CrosAmdGpuProcessPolicy>, 1, true>' [ 0 5 10]
'std::__1::vector<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> >::capacity' [ 0 5 10 108]
'base::internal::UnretainedWrapper<service_manager::SandboxLinux>' [ 0 6 16]
'base::DefaultSingletonTraits<service_manager::SandboxLinux>::New' [ 0 6 61]
'std::__1::add_lvalue_reference<service_manager::CrosArmGpuProcessPolicy>' [ 0 5 10]
'std::__1::__add_lvalue_reference_impl<service_manager::BrokerProcessPolicy, true>' [ 0 5 10]
'__builtin_va_list' [ 0]
'std::__1::remove_reference<nullptr_t>' [ 0 5 10]
'std::__1::__split_buffer<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> &>::capacity' [ 0 5 10 117]
'std::__1::__compressed_pair_elem<service_manager::CrosArmGpuProcessPolicy *, 0, false>' [ 0 5 10]
'std::__1::unique_ptr<service_manager::BPFBasePolicy, std::__1::default_delete<service_manager::BPFBasePolicy> >::unique_ptr<service_manager::NetworkProcessPolicy, std::__1::default_delete<service_manager::NetworkProcessPolicy>, void, void>' [ 0 5 10 113]
'service_manager::GpuProcessPolicy' [ 0 17]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__get_long_pointer' [ 0 5 10 87]
'std::__1::default_delete<service_manager::BrokerProcessPolicy>::operator()' [ 0 5 10 64]
'service_manager::RendererProcessPolicy::~RendererProcessPolicy' [ 0 17 40]
'std::__1::__tuple_types<base::internal::UnretainedWrapper<service_manager::SandboxLinux> >' [ 0 5 10]
'std::__1::__compressed_pair_elem<int *, 0, false>::__compressed_pair_elem<nullptr_t, void>' [ 0 5 10 51]
'service_manager::GpuProcessPolicy::GpuProcessPolicy' [ 0 17 35]
'std::__1::vector<int, std::__1::allocator<int> >::size' [ 0 5 10 50]
'uint_fast16_t' [ 0]
'std::__1::forward<void (service_manager::SandboxLinux::*)()>' [ 0 5 10]
'std::__1::forward<std::__1::default_delete<service_manager::PdfCompositorProcessPolicy> >' [ 0 5 10]
'service_manager::SandboxLinux::seccomp_bpf_with_tsync_supported' [ 0 17 31]
'std::__1::__libcpp_allocate' [ 0 5 10]
'std::__1::allocator_traits<std::__1::allocator<int> >::destroy<int>' [ 0 5 10 55]
'std::__1::conditional<true, std::__1::tuple<base::internal::UnretainedWrapper<service_manager::SandboxLinux> >, std::__1::__nat>' [ 0 5 10]
'std::__1::remove_reference<std::__1::default_delete<service_manager::NetworkProcessPolicy> >' [ 0 5 10]
'std::__1::pointer_traits<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > *>' [ 0 5 10]
'std::__1::__const_pointer<sandbox::Credentials::Capability, sandbox::Credentials::Capability *, std::__1::allocator<sandbox::Credentials::Capability>, true>' [ 0 5 10]
'std::__1::default_delete<service_manager::BrokerProcessPolicy>' [ 0 5 10]
'base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >::PassedWrapper' [ 0 6 16 99]
'std::__1::__compressed_pair<service_manager::RendererProcessPolicy *, std::__1::default_delete<service_manager::RendererProcessPolicy> >::__compressed_pair<service_manager::RendererProcessPolicy *&, true>' [ 0 5 10 138]
'std::__1::__vector_base<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> >::__vector_base' [ 0 5 10 115]
'std::__1::allocator_traits<std::__1::allocator<std::__1::pair<const std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long> > >' [ 0 5 10]
'std::__1::vector<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> >::__annotate_new' [ 0 5 10 108]
'std::__1::vector<int, std::__1::allocator<int> >::__recommend' [ 0 5 10 50]
'sandbox::bpf_dsl::Policy::~Policy' [ 0 9 18 26]
'service_manager::PdfCompositorProcessPolicy::~PdfCompositorProcessPolicy' [ 0 17 45]
'std::__1::remove_reference<std::__1::tuple<base::internal::UnretainedWrapper<service_manager::SandboxLinux> > >' [ 0 5 10]
'std::__1::__tuple_types<>' [ 0 5 10]
'std::__1::get<0, base::internal::UnretainedWrapper<service_manager::SandboxLinux> >' [ 0 5 10]
'__int8_t' [ 0]
'base::internal::ScopedFDCloseTraits::InvalidValue' [ 0 6 16 37]
'std::__1::conditional<true, std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *> *, std::__1::__tree_node_base<void *> *>' [ 0 5 10]
'std::__1::__vector_base<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >' [ 0 5 10]
'std::__1::__compressed_pair<int *, std::__1::allocator<int> &>::__compressed_pair<nullptr_t, std::__1::allocator<int> &>' [ 0 5 10 64]
'long long unsigned int' [ 0]
'std::__1::pointer_traits<const char *>::pointer_to' [ 0 5 10 40]
'std::__1::ios_base::setstate' [ 0 5 10 20]
'std::__1::tuple_element<1, std::__1::__tuple_types<base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> > >' [ 0 5 10]
'std::__1::__atomic_base<int, true>' [ 0 5 10]
'std::__1::vector<int, std::__1::allocator<int> >::vector' [ 0 5 10 50]
'std::__1::default_delete<sandbox::SetuidSandboxClient>' [ 0 5 10]
'std::__1::tuple_element<0, std::__1::__tuple_types<base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType> >' [ 0 5 10]
'std::__1::forward<service_manager::BPFBasePolicy *>' [ 0 5 10]
'std::__1::__bitset<1, 10>' [ 0 5 10]
'std::__1::move<std::__1::basic_string<char> &>' [ 0 5 10]
'std::__1::conditional<false, std::__1::pointer_traits<std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long> *>::__nat, std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long> >' [ 0 5 10]
'decltype(nullptr)' [ 0]
'std::__1::__pointer_type_imp::__pointer_type<sandbox::syscall_broker::BrokerClient, std::__1::default_delete<sandbox::syscall_broker::BrokerClient>, false>' [ 0 5 10 30]
'std::__1::__compressed_pair_elem<std::__1::allocator<sandbox::Credentials::Capability>, 1, true>' [ 0 5 10]
'std::__1::make_unique<service_manager::BrokerProcessPolicy, std::__1::bitset<10> &>' [ 0 5 10]
'service_manager::UtilityProcessPolicy::EvaluateSyscall' [ 0 17 39]
'std::__1::enable_if_t<FunctorTraits<bool (*)(OnceCallback<bool (Options)>, Options, bitset<10>)>::is_nullable, bool>' [ 0 5 10]
'service_manager::switches::kPpapiSandbox' [ 0 17 27]
'std::__1::unique_ptr<service_manager::RendererProcessPolicy, std::__1::default_delete<service_manager::RendererProcessPolicy> >::unique_ptr<true, void>' [ 0 5 10 129]
'std::__1::remove_reference<sandbox::Credentials::Capability &>' [ 0 5 10]
'std::__1::unique_ptr<sandbox::syscall_broker::BrokerClient, std::__1::default_delete<sandbox::syscall_broker::BrokerClient> >' [ 0 5 10]
'std::__1::__pointer_type<unsigned long, std::__1::allocator<unsigned long> >' [ 0 5 10]
'base::subtle::NoBarrier_Load' [ 0 6 14]
'sandbox::bpf_dsl::Arg<int>::EqualTo' [ 0 9 18 28]
'std::__1::atomic_int' [ 0 5 10]
'std::__1::move<std::__1::shared_ptr<const sandbox::bpf_dsl::internal::ResultExprImpl> &>' [ 0 5 10]
'std::__1::__pointer_type_imp::__pointer_type<service_manager::BPFBasePolicy, std::__1::default_delete<service_manager::BPFBasePolicy>, false>' [ 0 5 10 30]
'std::__1::forward<service_manager::GpuProcessPolicy *&>' [ 0 5 10]
'base::internal::CallbackBaseCopyable::CallbackBaseCopyable' [ 0 6 16 38]
'service_manager::switches::kGpuSandboxAllowSysVShm' [ 0 17 27]
'__mbstate_t' [ 0]
'std::__1::unique_ptr<sandbox::bpf_dsl::Policy, std::__1::default_delete<sandbox::bpf_dsl::Policy> >::release' [ 0 5 10 101]
'service_manager::switches::kNetworkSandbox' [ 0 17 27]
'std::__1::index_sequence<0UL>' [ 0 5 10]
'std::__1::basic_ios<char, std::__1::char_traits<char> >::widen' [ 0 5 10 57]
'service_manager::SandboxSeccompBPF::StartSandboxWithExternalPolicy' [ 0 17 36]
'std::__1::__compressed_pair_elem<service_manager::PdfCompositorProcessPolicy *, 0, false>::__compressed_pair_elem<service_manager::PdfCompositorProcessPolicy *&, void>' [ 0 5 10 91]
'std::__1::remove_reference<bool (*const &)(base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, service_manager::SandboxLinux::Options, std::__1::bitset<10>)>' [ 0 5 10]
'std::__1::__compressed_pair<service_manager::CdmProcessPolicy *, std::__1::default_delete<service_manager::CdmProcessPolicy> >' [ 0 5 10]
'std::__1::conditional<true, std::__1::pointer_traits<void *>::__nat, void>' [ 0 5 10]
'std::__1::pointer_traits<std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long> *>' [ 0 5 10]
'std::__1::__unique_if<service_manager::PdfCompositorProcessPolicy>' [ 0 5 10]
'sandbox::bpf_dsl::Arg<unsigned long>::Arg' [ 0 9 18 38]
'std::__1::add_lvalue_reference<sandbox::BaselinePolicy>' [ 0 5 10]
'base::internal::UnretainedWrapper<service_manager::SandboxLinux>::UnretainedWrapper' [ 0 6 16 66]
'base::OnceCallback<bool (service_manager::SandboxLinux::Options)>' [ 0 6]
'base::internal::ScopedFDCloseTraits' [ 0 6 16]
'std::__1::forward<service_manager::SandboxLinux *>' [ 0 5 10]
'__intmax_t' [ 0]
'std::__1::__compressed_pair_elem<service_manager::BPFBasePolicy *, 0, false>::__compressed_pair_elem<service_manager::CrosAmdGpuProcessPolicy *, void>' [ 0 5 10 78]
'std::__1::allocator_traits<std::__1::allocator<int> >::__destroy<int>' [ 0 5 10 55]
'std::__1::forward<service_manager::CrosArmGpuProcessPolicy *&>' [ 0 5 10]
'std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long>, void *> >, 1, true>' [ 0 5 10]
'std::__1::move<base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits> &>' [ 0 5 10]
'std::__1::__compressed_pair<int *, std::__1::allocator<int> &>::second' [ 0 5 10 64]
'std::__1::default_delete<sandbox::BaselinePolicy>' [ 0 5 10]
'std::__1::remove_reference<service_manager::CdmProcessPolicy *>' [ 0 5 10]
'std::__1::move<sandbox::Credentials::Capability &>' [ 0 5 10]
'std::__1::vector<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >' [ 0 5 10]
'std::__1::forward<base::internal::UnretainedWrapper<service_manager::SandboxLinux> >' [ 0 5 10]
'std::__1::default_delete<service_manager::CrosAmdGpuProcessPolicy>::operator()' [ 0 5 10 68]
'__uint8_t' [ 0]
'std::__1::vector<int, std::__1::allocator<int> >::__annotate_delete' [ 0 5 10 50]
'base::strings::SafeSPrintf<100, int, int>' [ 0 6 15]
'std::__1::remove_reference<sandbox::Credentials::Capability>' [ 0 5 10]
'std::__1::__const_pointer<char, char *, std::__1::allocator<char>, true>' [ 0 5 10]
'service_manager::CrosAmdGpuProcessPolicy::EvaluateSyscall' [ 0 17 42]
'std::__1::conditional<false, std::__1::pointer_traits<std::__1::basic_string<char> *>::__nat, std::__1::basic_string<char> >' [ 0 5 10]
'base::internal::FunctorTraits<void (service_manager::SandboxLinux::*)(), void>' [ 0 6 16]
'std::__1::allocator_traits<std::__1::allocator<sock_filter> >' [ 0 5 10]
'std::__1::allocator<int>' [ 0 5 10]
'service_manager::CrosAmdGpuProcessPolicy::CrosAmdGpuProcessPolicy' [ 0 17 42]
'__FILE' [ 0]
'base::subtle::Acquire_Load' [ 0 6 14]
'base::internal::Unwrap<const service_manager::SandboxLinux::Options &>' [ 0 6 16]
'std::__1::remove_reference<service_manager::BPFBasePolicy *>' [ 0 5 10]
'base::BindOnce<void (service_manager::SandboxLinux::*)(service_manager::SandboxType), base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType &>' [ 0 6]
'std::__1::atomic<long>' [ 0 5 10]
'std::__1::float_denorm_style' [ 0 5 10]
'std::__1::forward<service_manager::CdmProcessPolicy *>' [ 0 5 10]
'service_manager::(anonymous namespace)::OpenProc' [ 0 17 40]
'service_manager::RendererProcessPolicy' [ 0 17]
'std::__1::__compressed_pair<service_manager::BrokerProcessPolicy *, std::__1::default_delete<service_manager::BrokerProcessPolicy> >::__compressed_pair<service_manager::BrokerProcessPolicy *&, true>' [ 0 5 10 134]
'std::__1::pointer_traits<std::__1::basic_string<char> *>' [ 0 5 10]
'std::__1::__unique_if<sandbox::BaselinePolicy>' [ 0 5 10]
'std::__1::allocator_traits<std::__1::allocator<int> >::deallocate' [ 0 5 10 55]
'int_fast32_t' [ 0]
'float_t' [ 0]
'base::RepeatingCallback<bool ()>::~RepeatingCallback' [ 0 6 34]
'std::__1::remove_reference<sandbox::BaselinePolicy *>' [ 0 5 10]
'service_manager::SandboxLinux::broker_process' [ 0 17 31]
'std::__1::__split_buffer<int, std::__1::allocator<int> &>::__end_cap' [ 0 5 10 59]
'service_manager::SandboxLinux::StopThread' [ 0 17 31]
'std::__1::__compressed_pair_elem<sandbox::syscall_broker::BrokerFilePermission *, 0, false>' [ 0 5 10]
'std::__1::allocator_traits<std::__1::allocator<sandbox::Credentials::Capability> >' [ 0 5 10]
'InvokeFuncStorage' [ 0]
'double' [ 0]
'std::__1::move<void (service_manager::SandboxLinux::*&)(service_manager::SandboxType)>' [ 0 5 10]
'std::__1::shared_ptr<const sandbox::cons::Cell<std::__1::pair<std::__1::shared_ptr<const sandbox::bpf_dsl::internal::BoolExprImpl>, std::__1::shared_ptr<const sandbox::bpf_dsl::internal::ResultExprImpl> > > >::~shared_ptr' [ 0 5 10 210]
'service_manager::SandboxSeccompBPF::GetBaselinePolicy' [ 0 17 36]
'base::internal::Invoker<base::internal::BindState<void (service_manager::SandboxLinux::*)(), base::internal::UnretainedWrapper<service_manager::SandboxLinux> >, void ()>::RunOnce' [ 0 6 16 171]
'std::__1::conditional<false, std::__1::pointer_traits<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > *>::__nat, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > >' [ 0 5 10]
'base::RepeatingCallback<bool ()>::RepeatingCallback' [ 0 6 34]
'service_manager::PpapiProcessPolicy::EvaluateSyscall' [ 0 17 37]
'service_manager::SandboxLinux::GetInstance' [ 0 17 31]
'base::subtle::AtomicWord' [ 0 6 14]
'base::internal::BindState<void (service_manager::SandboxLinux::*)(), base::internal::UnretainedWrapper<service_manager::SandboxLinux> >::BindState<void (service_manager::SandboxLinux::*)(), base::internal::UnretainedWrapper<service_manager::SandboxLinux> >' [ 0 6 16 137]
'std::__1::__tuple_indices<>' [ 0 5 10]
'std::__1::__compressed_pair<service_manager::BPFBasePolicy *, std::__1::default_delete<service_manager::BPFBasePolicy> >::__compressed_pair<service_manager::CrosAmdGpuProcessPolicy *, std::__1::default_delete<service_manager::CrosAmdGpuProcessPolicy> >' [ 0 5 10 122]
'service_manager::PdfCompositorProcessPolicy::PdfCompositorProcessPolicy' [ 0 17 45]
'std::__1::__compressed_pair_elem<std::__1::allocator<sandbox::Credentials::Capability> &, 1, false>' [ 0 5 10]
'std::__1::ostream' [ 0 5 10]
'std::__1::unique_ptr<service_manager::PpapiProcessPolicy, std::__1::default_delete<service_manager::PpapiProcessPolicy> >::release' [ 0 5 10 123]
'service_manager::BrokerProcessPolicy::BrokerProcessPolicy' [ 0 17 38]
'base::internal::CallbackBase::is_null' [ 0 6 16 30]
'std::__1::allocator<sandbox::Credentials::Capability>' [ 0 5 10]
'service_manager::CrosAmdGpuProcessPolicy' [ 0 17]
'std::__1::remove_reference<service_manager::BrokerProcessPolicy *>' [ 0 5 10]
'std::__1::__add_lvalue_reference_impl<service_manager::PpapiProcessPolicy, true>' [ 0 5 10]
'std::__1::unique_ptr<service_manager::BPFBasePolicy, std::__1::default_delete<service_manager::BPFBasePolicy> >' [ 0 5 10]
'sandbox::bpf_dsl::Caser<unsigned long>::~Caser' [ 0 9 18 40]
'std::__1::__pointer_type_imp::__pointer_type<std::__1::pair<const std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long>, std::__1::allocator<std::__1::pair<const std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long> >, true>' [ 0 5 10 30]
'std::__1::tuple_element<0, std::__1::__tuple_types<base::internal::UnretainedWrapper<service_manager::SandboxLinux> > >' [ 0 5 10]
'std::__1::__add_lvalue_reference_impl<service_manager::CrosAmdGpuProcessPolicy, true>' [ 0 5 10]
'std::__1::remove_reference<service_manager::NetworkProcessPolicy *>' [ 0 5 10]
'std::__1::__pointer_type_imp::__pointer_type<service_manager::BrokerProcessPolicy, std::__1::default_delete<service_manager::BrokerProcessPolicy>, false>' [ 0 5 10 30]
'std::__1::__add_lvalue_reference_impl<service_manager::UtilityProcessPolicy, true>' [ 0 5 10]
'std::__1::allocator<sandbox::Credentials::Capability>::allocate' [ 0 5 10 55]
'std::__1::unique_ptr<sandbox::BaselinePolicy, std::__1::default_delete<sandbox::BaselinePolicy> >::~unique_ptr' [ 0 5 10 99]
'std::__1::unique_ptr<service_manager::BrokerProcessPolicy, std::__1::default_delete<service_manager::BrokerProcessPolicy> >::unique_ptr<true, void>' [ 0 5 10 125]
'std::__1::allocator<sandbox::Credentials::Capability>::construct<sandbox::Credentials::Capability, sandbox::Credentials::Capability>' [ 0 5 10 55]
'service_manager::switches::kAllowSandboxDebugging' [ 0 17 27]
'service_manager::switches::kPpapiPluginProcess' [ 0 17 27]
'logging::CheckOpResult::operator bool' [ 0 9 24]
'std::__1::unique_ptr<service_manager::BPFBasePolicy, std::__1::default_delete<service_manager::BPFBasePolicy> >::unique_ptr<service_manager::UtilityProcessPolicy, std::__1::default_delete<service_manager::UtilityProcessPolicy>, void, void>' [ 0 5 10 113]
'std::__1::basic_ios<char, std::__1::char_traits<char> >::setstate' [ 0 5 10 57]
'logging' [ 0]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0>, base::internal::UnretainedWrapper<service_manager::SandboxLinux> >' [ 0 5 10]
'std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> >, 1, true>' [ 0 5 10]
'__uint64_t' [ 0]
'std::__1::forward<std::__1::default_delete<service_manager::BPFBasePolicy> >' [ 0 5 10]
'std::__1::shared_ptr<const sandbox::bpf_dsl::internal::ResultExprImpl>::shared_ptr' [ 0 5 10 72]
'std::__1::remove_reference<void (service_manager::SandboxLinux::*&)(service_manager::SandboxType)>' [ 0 5 10]
'std::__1::__const_void_pointer<char *, std::__1::allocator<char>, false>' [ 0 5 10]
'std::__1::__pointer_type_imp::__pointer_type<service_manager::CrosAmdGpuProcessPolicy, std::__1::default_delete<service_manager::CrosAmdGpuProcessPolicy>, false>' [ 0 5 10 30]
'std::__1::forward<bool (*)(base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, service_manager::SandboxLinux::Options, std::__1::bitset<10>)>' [ 0 5 10]
'std::__1::__const_void_pointer<sandbox::Credentials::Capability *, std::__1::allocator<sandbox::Credentials::Capability>, false>' [ 0 5 10]
'std::__1::char_traits<char>::length' [ 0 5 10 29]
'service_manager::switches' [ 0 17]
'std::__1::__atomic_base<long, false>::load' [ 0 5 10 38]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1, 2>, base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> >::~__tuple_impl' [ 0 5 10 222]
'service_manager::SandboxTypeFromCommandLine' [ 0 17]
'service_manager::SetCommandLineFlagsForSandboxType' [ 0 17]
'base::StringPiece16' [ 0 6]
'std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>' [ 0 5 10]
'std::__1::__unique_if<service_manager::CdmProcessPolicy>' [ 0 5 10]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::operator+=' [ 0 5 10 87]
'std::__1::shared_ptr<const sandbox::cons::Cell<std::__1::pair<std::__1::shared_ptr<const sandbox::bpf_dsl::internal::BoolExprImpl>, std::__1::shared_ptr<const sandbox::bpf_dsl::internal::ResultExprImpl> > > >' [ 0 5 10]
'std::__1::unique_ptr<sandbox::bpf_dsl::Policy, std::__1::default_delete<sandbox::bpf_dsl::Policy> >::unique_ptr<sandbox::BaselinePolicy, std::__1::default_delete<sandbox::BaselinePolicy>, void, void>' [ 0 5 10 101]
'sandbox::bpf_dsl::Arg<int>' [ 0 9 18]
'std::__1::__compressed_pair_elem<service_manager::BPFBasePolicy *, 0, false>::__compressed_pair_elem<service_manager::UtilityProcessPolicy *, void>' [ 0 5 10 78]
'std::__1::__compressed_pair<service_manager::NetworkProcessPolicy *, std::__1::default_delete<service_manager::NetworkProcessPolicy> >' [ 0 5 10]
'service_manager::SandboxLinux::IsSingleThreaded' [ 0 17 31]
'std::__1::remove_reference<service_manager::NetworkProcessPolicy *&>' [ 0 5 10]
'std::__1::__size_type<std::__1::allocator<sandbox::syscall_broker::BrokerFilePermission>, long, true>' [ 0 5 10]
'std::__1::__compressed_pair_elem<std::__1::default_delete<service_manager::CrosArmGpuProcessPolicy>, 1, true>' [ 0 5 10]
'std::__1::unique_ptr<sandbox::SetuidSandboxClient, std::__1::default_delete<sandbox::SetuidSandboxClient> >::operator->' [ 0 5 10 109]
'std::__1::__pointer_type_imp::__pointer_type<service_manager::NetworkProcessPolicy, std::__1::default_delete<service_manager::NetworkProcessPolicy>, false>' [ 0 5 10 30]
'sandbox::bpf_dsl' [ 0 9]
'std::__1::allocator<int>::construct<int, const int &>' [ 0 5 10 26]
'base::BindUnwrapTraits<service_manager::SandboxLinux::Options>::Unwrap<const service_manager::SandboxLinux::Options &>' [ 0 6 64]
'std::__1::__compressed_pair_elem<sandbox::syscall_broker::BrokerClient *, 0, false>' [ 0 5 10]
'std::__1::__pointer_type_imp::__pointer_type<service_manager::GpuProcessPolicy, std::__1::default_delete<service_manager::GpuProcessPolicy>, false>' [ 0 5 10 30]
'std::__1::__size_type<std::__1::allocator<std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long> >, long, true>' [ 0 5 10]
'std::__1::ctype<char>::widen' [ 0 5 10 23]
'service_manager::SandboxSeccompBPF::RunSandboxSanityChecks' [ 0 17 36]
'std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>' [ 0 5 10]
'std::__1::remove_reference<std::__1::default_delete<service_manager::BrokerProcessPolicy> >' [ 0 5 10]
'std::__1::__add_lvalue_reference_impl<service_manager::NetworkProcessPolicy, true>' [ 0 5 10]
'std::__1::forward<std::__1::default_delete<service_manager::PpapiProcessPolicy> >' [ 0 5 10]
'logging::CheckOpResult::message' [ 0 9 24]
'std::__1::remove_reference<std::__1::__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > &>' [ 0 5 10]
'std::__1::__pointer_type<sandbox::syscall_broker::BrokerFilePermission, std::__1::allocator<sandbox::syscall_broker::BrokerFilePermission> >' [ 0 5 10]
'sandbox::syscall_broker::BrokerFilePermission' [ 0 9 25]
'std::__1::unique_ptr<service_manager::PdfCompositorProcessPolicy, std::__1::default_delete<service_manager::PdfCompositorProcessPolicy> >' [ 0 5 10]
'std::__1::unique_ptr<service_manager::BPFBasePolicy, std::__1::default_delete<service_manager::BPFBasePolicy> >::reset' [ 0 5 10 113]
'std::__1::__tuple_leaf<0, base::internal::UnretainedWrapper<service_manager::SandboxLinux>, false>' [ 0 5 10]
'service_manager::CdmProcessPolicy::EvaluateSyscall' [ 0 17 35]
'std::__1::move<std::__1::unique_ptr<sandbox::bpf_dsl::Policy, std::__1::default_delete<sandbox::bpf_dsl::Policy> > &>' [ 0 5 10]
'base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >' [ 0 6 16]
'service_manager::(anonymous namespace)::GetGpuProcessSandbox' [ 0 17 40]
'std::__1::__split_buffer<int, std::__1::allocator<int> &>::~__split_buffer' [ 0 5 10 59]
'unsigned short' [ 0]
'std::__1::__compressed_pair_elem<service_manager::CrosArmGpuProcessPolicy *, 0, false>::__compressed_pair_elem<service_manager::CrosArmGpuProcessPolicy *&, void>' [ 0 5 10 88]
'std::__1::allocator_traits<std::__1::allocator<int> >::__construct_backward<int>' [ 0 5 10 55]
'base::AtomicRefCount' [ 0 6]
'std::__1::default_delete<service_manager::UtilityProcessPolicy>' [ 0 5 10]
'std::__1::tuple_element<2, std::__1::__tuple_types<base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> > >' [ 0 5 10]
'std::__1::__add_lvalue_reference_impl<base::Environment, true>' [ 0 5 10]
'std::__1::__compressed_pair<service_manager::BPFBasePolicy *, std::__1::default_delete<service_manager::BPFBasePolicy> >::__compressed_pair<service_manager::CdmProcessPolicy *, std::__1::default_delete<service_manager::CdmProcessPolicy> >' [ 0 5 10 122]
'std::__1::__compressed_pair_elem<service_manager::BPFBasePolicy *, 0, false>::__compressed_pair_elem<service_manager::PdfCompositorProcessPolicy *, void>' [ 0 5 10 78]
'std::__1::__vector_base<int, std::__1::allocator<int> >::__alloc' [ 0 5 10 57]
'std::__1::unique_ptr<service_manager::BPFBasePolicy, std::__1::default_delete<service_manager::BPFBasePolicy> >::~unique_ptr' [ 0 5 10 113]
'std::__1::__compressed_pair_elem<service_manager::PpapiProcessPolicy *, 0, false>::__compressed_pair_elem<service_manager::PpapiProcessPolicy *&, void>' [ 0 5 10 83]
'std::__1::__put_character_sequence<char, std::__1::char_traits<char> >' [ 0 5 10]
'std::__1::add_lvalue_reference<const sandbox::cons::Cell<std::__1::pair<std::__1::shared_ptr<const sandbox::bpf_dsl::internal::BoolExprImpl>, std::__1::shared_ptr<const sandbox::bpf_dsl::internal::ResultExprImpl> > > >' [ 0 5 10]
'std' [ 0]
'std::__1::unique_ptr<service_manager::CrosArmGpuProcessPolicy, std::__1::default_delete<service_manager::CrosArmGpuProcessPolicy> >' [ 0 5 10]
'__rlimit_resource' [ 0]
'std::__1::__tree_map_pointer_types<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *, std::__1::__tree_key_value_types<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > >, true>' [ 0 5 10]
'std::__1::__libcpp_atomic_refcount_decrement<long>' [ 0 5 10]
'std::__1::forward<service_manager::SandboxType>' [ 0 5 10]
'std::__1::move<std::__1::unique_ptr<service_manager::BPFBasePolicy, std::__1::default_delete<service_manager::BPFBasePolicy> > &>' [ 0 5 10]
'std::__1::remove_reference<std::__1::allocator<sandbox::Credentials::Capability> &>' [ 0 5 10]
'service_manager::RendererProcessPolicy::RendererProcessPolicy' [ 0 17 40]
'std::__1::unique_ptr<service_manager::GpuProcessPolicy, std::__1::default_delete<service_manager::GpuProcessPolicy> >' [ 0 5 10]
'std::__1::unique_ptr<service_manager::PpapiProcessPolicy, std::__1::default_delete<service_manager::PpapiProcessPolicy> >::~unique_ptr' [ 0 5 10 123]
'std::__1::vector<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> >' [ 0 5 10]
'std::__1::__pointer_type_imp::__pointer_type<sandbox::syscall_broker::BrokerFilePermission, std::__1::allocator<sandbox::syscall_broker::BrokerFilePermission>, true>' [ 0 5 10 30]
'std::__1::__compressed_pair<service_manager::BPFBasePolicy *, std::__1::default_delete<service_manager::BPFBasePolicy> >::__compressed_pair<service_manager::PpapiProcessPolicy *, std::__1::default_delete<service_manager::PpapiProcessPolicy> >' [ 0 5 10 122]
'base::internal::Invoker<base::internal::BindState<bool (*)(base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, service_manager::SandboxLinux::Options, std::__1::bitset<10>), base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> >, bool ()>::Run::num_bound_args' [ 0 6 16 362 367]
'service_manager::SandboxLinux::setuid_sandbox_client' [ 0 17 31]
'base::BindUnwrapTraits<base::internal::UnretainedWrapper<service_manager::SandboxLinux> >' [ 0 6]
'std::__1::unique_ptr<service_manager::BPFBasePolicy, std::__1::default_delete<service_manager::BPFBasePolicy> >::unique_ptr<service_manager::GpuProcessPolicy, std::__1::default_delete<service_manager::GpuProcessPolicy>, void, void>' [ 0 5 10 113]
'std::__1::allocator_traits<std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > > >' [ 0 5 10]
'std::__1::__compressed_pair<service_manager::CrosAmdGpuProcessPolicy *, std::__1::default_delete<service_manager::CrosAmdGpuProcessPolicy> >::__compressed_pair<service_manager::CrosAmdGpuProcessPolicy *&, true>' [ 0 5 10 142]
'int_least64_t' [ 0]
'std::__1::forward<service_manager::PdfCompositorProcessPolicy *>' [ 0 5 10]
'std::__1::default_delete<sandbox::BaselinePolicy>::operator()' [ 0 5 10 51]
'std::__1::remove_reference<service_manager::PdfCompositorProcessPolicy *>' [ 0 5 10]
'sandbox::bpf_dsl::Caser<unsigned long>::Caser' [ 0 9 18 40]
'std::__1::__compressed_pair_elem<std::__1::allocator<unsigned long>, 1, true>' [ 0 5 10]
'std::__1::__compressed_pair_elem<std::__1::default_delete<service_manager::NetworkProcessPolicy>, 1, true>' [ 0 5 10]
'std::__1::__compressed_pair_elem<std::__1::default_delete<service_manager::BPFBasePolicy>, 1, true>::__compressed_pair_elem<std::__1::default_delete<service_manager::CrosAmdGpuProcessPolicy>, void>' [ 0 5 10 101]
'std::__1::__compressed_pair<service_manager::UtilityProcessPolicy *, std::__1::default_delete<service_manager::UtilityProcessPolicy> >' [ 0 5 10]
'std::__1::__compressed_pair_elem<std::__1::allocator<sandbox::Credentials::Capability> &, 1, false>::__get' [ 0 5 10 101]
'std::__1::default_delete<service_manager::CdmProcessPolicy>::operator()' [ 0 5 10 61]
'std::__1::__compressed_pair_elem<service_manager::BrokerProcessPolicy *, 0, false>::__compressed_pair_elem<service_manager::BrokerProcessPolicy *&, void>' [ 0 5 10 84]
'uint64_t' [ 0]
'base::internal::BindState<void (service_manager::SandboxLinux::*)(), base::internal::UnretainedWrapper<service_manager::SandboxLinux> >::~BindState' [ 0 6 16 137]
'scoped_refptr<base::internal::BindStateBase>::operator bool' [ 0 46]
'base::internal::PassingTraitsType<service_manager::SandboxLinux::Options>' [ 0 6 16]
'service_manager::SandboxLinux::SealSandbox' [ 0 17 31]
'std::__1::__const_void_pointer<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > *, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > >, false>' [ 0 5 10]
'service_manager::switches::kUtilitySandbox' [ 0 17 27]
'service_manager::SandboxLinux::seccomp_bpf_started' [ 0 17 31]
'std::__1::__shared_count::__release_shared' [ 0 5 10 26]
'std::__1::allocator_traits<std::__1::allocator<int> >::__construct<int, const int &>' [ 0 5 10 55]
'std::__1::pointer_traits<char *>' [ 0 5 10]
'std::__1::default_delete<sandbox::bpf_dsl::Policy>::operator()' [ 0 5 10 52]
'std::__1::tuple_element<0, std::__1::tuple<base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType> >' [ 0 5 10]
'std::__1::__pointer_type_imp::__pointer_type<service_manager::PpapiProcessPolicy, std::__1::default_delete<service_manager::PpapiProcessPolicy>, false>' [ 0 5 10 30]
'std::__1::__add_lvalue_reference_impl<service_manager::CdmProcessPolicy, true>' [ 0 5 10]
'std::__1::remove_reference<service_manager::BrokerProcessPolicy *&>' [ 0 5 10]
'std::__1::__compressed_pair_elem<service_manager::PdfCompositorProcessPolicy *, 0, false>' [ 0 5 10]
'std::__1::operator<<<std::__1::char_traits<char> >' [ 0 5 10]
'std::__1::make_unique<service_manager::PpapiProcessPolicy>' [ 0 5 10]
'base::internal::FunctorTraits<void (service_manager::SandboxLinux::*)(service_manager::SandboxType), void>' [ 0 6 16]
'std::__1::__libcpp_numeric_limits<long, true>' [ 0 5 10]
'uintmax_t' [ 0]
'service_manager::BPFBasePolicy::BPFBasePolicy' [ 0 17 32]
'std::__1::enable_if<true, void>' [ 0 5 10]
'std::__1::allocator_traits<std::__1::allocator<int> >::__max_size' [ 0 5 10 55]
'base::internal::CallbackBase::polymorphic_invoke' [ 0 6 16 30]
'std::__1::enable_if_t<FunctorTraits<void (SandboxLinux::*)()>::is_nullable, bool>' [ 0 5 10]
'std::__1::remove_reference<std::__1::bitset<10> &>' [ 0 5 10]
'std::__1::__compressed_pair<std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> > >' [ 0 5 10]
'std::__1::once_flag' [ 0 5 10]
'base::DefaultSingletonTraits<service_manager::SandboxLinux>::Delete' [ 0 6 61]
'int8_t' [ 0]
'std::__1::max<unsigned long, std::__1::__less<unsigned long, unsigned long> >' [ 0 5 10]
'service_manager::(anonymous namespace)::IsArchitectureArm' [ 0 17 40]
'std::__1::__compressed_pair<service_manager::BPFBasePolicy *, std::__1::default_delete<service_manager::BPFBasePolicy> >::__compressed_pair<service_manager::NetworkProcessPolicy *, std::__1::default_delete<service_manager::NetworkProcessPolicy> >' [ 0 5 10 122]
'std::__1::default_delete<service_manager::CrosAmdGpuProcessPolicy>' [ 0 5 10]
'std::__1::__compressed_pair_elem<service_manager::BrokerProcessPolicy *, 0, false>' [ 0 5 10]
'service_manager::RendererProcessPolicy::EvaluateSyscall' [ 0 17 40]
'std::__1::unique_ptr<service_manager::NetworkProcessPolicy, std::__1::default_delete<service_manager::NetworkProcessPolicy> >::release' [ 0 5 10 127]
'base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::~ScopedGeneric' [ 0 6 63]
'siginfo_t' [ 0]
'service_manager::SandboxLinux::GetFileDescriptorsToClose' [ 0 17 31]
'std::__1::allocator<int>::deallocate' [ 0 5 10 26]
'std::__1::__compressed_pair_elem<service_manager::CrosAmdGpuProcessPolicy *, 0, false>::__compressed_pair_elem<service_manager::CrosAmdGpuProcessPolicy *&, void>' [ 0 5 10 88]
'std::__1::default_delete<sandbox::SetuidSandboxClient>::operator()' [ 0 5 10 56]
'base::OnceCallback<bool (service_manager::SandboxLinux::Options)>::OnceCallback' [ 0 6 67]
'std::__1::__add_lvalue_reference_impl<service_manager::PdfCompositorProcessPolicy, true>' [ 0 5 10]
'std::__1::remove_reference<sandbox::BaselinePolicy *&>' [ 0 5 10]
'std::__1::__atomic_base<int, false>' [ 0 5 10]
'service_manager::SandboxLinux::~SandboxLinux' [ 0 17 31]
'logging::CheckEQImpl' [ 0 9]
'std::__1::__compressed_pair_elem<service_manager::UtilityProcessPolicy *, 0, false>' [ 0 5 10]
'std::__1::__vector_base<int, std::__1::allocator<int> >::__vector_base' [ 0 5 10 57]
'sandbox::Yama' [ 0 9]
'int_least32_t' [ 0]
'std::__1::forward<std::__1::allocator<int> &>' [ 0 5 10]
'std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >::ostreambuf_iterator' [ 0 5 10 67]
'logging::GetVlogLevel<62>' [ 0 9]
'std::__1::default_delete<service_manager::BPFBasePolicy>::operator()' [ 0 5 10 58]
'std::__1::integral_constant<bool, false>' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (service_manager::SandboxLinux::*)(), base::internal::UnretainedWrapper<service_manager::SandboxLinux> >, void ()>::RunImpl<void (service_manager::SandboxLinux::*)(), std::__1::tuple<base::internal::UnretainedWrapper<service_manager::SandboxLinux> >, 0>' [ 0 6 16 171]
'base::OnceCallback<void ()>' [ 0 6]
'std::__1::__const_void_pointer<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > *, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > >, false>' [ 0 5 10]
'std::__1::__tuple_leaf<2, std::__1::bitset<10>, false>' [ 0 5 10]
'base::internal::BindState<void (service_manager::SandboxLinux::*)(), base::internal::UnretainedWrapper<service_manager::SandboxLinux> >::Destroy' [ 0 6 16 137]
'std::__1::__vector_base<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> >::capacity' [ 0 5 10 115]
'base::internal::Invoker<base::internal::BindState<void (service_manager::SandboxLinux::*)(), base::internal::UnretainedWrapper<service_manager::SandboxLinux> >, void ()>::RunImpl<void (service_manager::SandboxLinux::*)(), std::__1::tuple<base::internal::UnretainedWrapper<service_manager::SandboxLinux> >, 0>::is_method' [ 0 6 16 171 310]
'std::__1::__const_pointer<int, int *, std::__1::allocator<int>, true>' [ 0 5 10]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1, 2>, base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> >::__tuple_impl<0, 1, 2, base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> , base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, const service_manager::SandboxLinux::Options &, const std::__1::bitset<10> &>' [ 0 5 10 222]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0>, base::internal::UnretainedWrapper<service_manager::SandboxLinux> >::__tuple_impl<0, base::internal::UnretainedWrapper<service_manager::SandboxLinux> , base::internal::UnretainedWrapper<service_manager::SandboxLinux> >' [ 0 5 10 121]
'std::__1::vector<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> >::data' [ 0 5 10 108]
'std::__1::__pointer_type<service_manager::PdfCompositorProcessPolicy, std::__1::default_delete<service_manager::PdfCompositorProcessPolicy> >' [ 0 5 10]
'std::__1::tuple_element<0, std::__1::tuple<base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> > >' [ 0 5 10]
'base::Unretained<service_manager::SandboxLinux>' [ 0 6]
'service_manager::switches::kEnableAppContainer' [ 0 17 27]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::data' [ 0 5 10 87]
'std::__1::__vector_base<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> >::~__vector_base' [ 0 5 10 115]
'clock_t' [ 0]
'std::__1::literals' [ 0 5 10]
'std::__1::unique_ptr<service_manager::RendererProcessPolicy, std::__1::default_delete<service_manager::RendererProcessPolicy> >::~unique_ptr' [ 0 5 10 129]
'base::internal::BindState<bool (*)(base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, service_manager::SandboxLinux::Options, std::__1::bitset<10>), base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> >::Destroy' [ 0 6 16 328]
'base::internal::Unwrap<base::internal::UnretainedWrapper<service_manager::SandboxLinux> >' [ 0 6 16]
'base::internal::InvokeHelper<false, bool>' [ 0 6 16]
'std::__1::swap<int *>' [ 0 5 10]
'service_manager::(anonymous namespace)::LogSandboxStarted' [ 0 17 40]
'std::__1::__tree_key_value_types<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > >' [ 0 5 10]
'std::__1::unique_ptr<service_manager::CrosAmdGpuProcessPolicy, std::__1::default_delete<service_manager::CrosAmdGpuProcessPolicy> >::release' [ 0 5 10 133]
'pid_t' [ 0]
'std::__1::__compressed_pair_elem<std::__1::allocator<int>, 1, true>' [ 0 5 10]
'base::strings::internal::Arg' [ 0 6 15 25]
'base::Singleton<service_manager::SandboxLinux, base::DefaultSingletonTraits<service_manager::SandboxLinux>, service_manager::SandboxLinux>::CreatorFunc' [ 0 6 140]
'std::__1::unique_ptr<service_manager::BrokerProcessPolicy, std::__1::default_delete<service_manager::BrokerProcessPolicy> >::~unique_ptr' [ 0 5 10 125]
'logging::ErrnoLogMessage' [ 0 9]
'std::__1::__compressed_pair<service_manager::GpuProcessPolicy *, std::__1::default_delete<service_manager::GpuProcessPolicy> >::__compressed_pair<service_manager::GpuProcessPolicy *&, true>' [ 0 5 10 128]
'std::__1::__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >::__compressed_pair<true, void>' [ 0 5 10 151]
'std::__1::__const_void_pointer<int *, std::__1::allocator<int>, false>' [ 0 5 10]
'std::__1::__add_lvalue_reference_impl<service_manager::GpuProcessPolicy, true>' [ 0 5 10]
'std::__1::forward<sandbox::BaselinePolicy *>' [ 0 5 10]
'std::__1::remove_reference<service_manager::GpuProcessPolicy *>' [ 0 5 10]
'std::__1::unique_ptr<sandbox::SetuidSandboxClient, std::__1::default_delete<sandbox::SetuidSandboxClient> >::get' [ 0 5 10 109]
'std::__1::__compressed_pair_elem<std::__1::basic_string<char> *, 0, false>' [ 0 5 10]
'std::__1::add_lvalue_reference<service_manager::NetworkProcessPolicy>' [ 0 5 10]
'_G_fpos64_t' [ 0]
'std::__1::__tuple_leaf<2, std::__1::bitset<10>, false>::__tuple_leaf<const std::__1::bitset<10> &, void>' [ 0 5 10 56]
'std::__1::__compressed_pair<service_manager::BPFBasePolicy *, std::__1::default_delete<service_manager::BPFBasePolicy> >::__compressed_pair<service_manager::CrosArmGpuProcessPolicy *, std::__1::default_delete<service_manager::CrosArmGpuProcessPolicy> >' [ 0 5 10 122]
'std::__1::integral_constant<bool, true>' [ 0 5 10]
'std::__1::index_sequence<0UL, 1UL>' [ 0 5 10]
'std::__1::allocator_traits<std::__1::allocator<int> >::max_size' [ 0 5 10 55]
'std::__1::default_delete<service_manager::RendererProcessPolicy>::operator()' [ 0 5 10 66]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1>, base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType>::__tuple_impl<0, 1, base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType, base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType &>' [ 0 5 10 153]
'std::__1::conditional<false, std::__1::pointer_traits<std::__1::pair<const std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long> *>::__nat, std::__1::pair<const std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long> >' [ 0 5 10]
'std::__1::unique_ptr<service_manager::BPFBasePolicy, std::__1::default_delete<service_manager::BPFBasePolicy> >::unique_ptr<service_manager::CdmProcessPolicy, std::__1::default_delete<service_manager::CdmProcessPolicy>, void, void>' [ 0 5 10 113]
'std::__1::__libcpp_deallocate' [ 0 5 10]
'std::__1::__throw_length_error' [ 0 5 10]
'std::__1::__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long>, std::__1::less<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long> >, true> >' [ 0 5 10]
'service_manager::CrosArmGpuProcessPolicy' [ 0 17]
'std::__1::unique_ptr<service_manager::CdmProcessPolicy, std::__1::default_delete<service_manager::CdmProcessPolicy> >::reset' [ 0 5 10 119]
'std::__1::__add_lvalue_reference_impl<sandbox::bpf_dsl::Policy, true>' [ 0 5 10]
'base::internal::FunctorTraits<void (service_manager::SandboxLinux::*)(service_manager::SandboxType), void>::Invoke<void (service_manager::SandboxLinux::*)(service_manager::SandboxType), service_manager::SandboxLinux *, service_manager::SandboxType>' [ 0 6 16 108]
'std::__1::make_unique<service_manager::UtilityProcessPolicy>' [ 0 5 10]
'service_manager::switches::kDisableNamespaceSandbox' [ 0 17 27]
'std::__1::__pointer_type_imp::__pointer_type<base::Environment, std::__1::default_delete<base::Environment>, false>' [ 0 5 10 30]
'std::__1::forward<sandbox::Credentials::Capability>' [ 0 5 10]
'sandbox::syscall_broker::BrokerCommand' [ 0 9 25]
'std::__1::__unique_if<service_manager::GpuProcessPolicy>' [ 0 5 10]
'std::__1::remove_reference<bool (*)(base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, service_manager::SandboxLinux::Options, std::__1::bitset<10>)>' [ 0 5 10]
'int_least16_t' [ 0]
'std::__1::__vector_base<int, std::__1::allocator<int> >::clear' [ 0 5 10 57]
'std::__1::unique_ptr<service_manager::UtilityProcessPolicy, std::__1::default_delete<service_manager::UtilityProcessPolicy> >::reset' [ 0 5 10 127]
'std::__1::__compressed_pair<service_manager::PdfCompositorProcessPolicy *, std::__1::default_delete<service_manager::PdfCompositorProcessPolicy> >::__compressed_pair<service_manager::PdfCompositorProcessPolicy *&, true>' [ 0 5 10 148]
'std::__1::__compressed_pair<service_manager::CdmProcessPolicy *, std::__1::default_delete<service_manager::CdmProcessPolicy> >::__compressed_pair<service_manager::CdmProcessPolicy *&, true>' [ 0 5 10 128]
'std::__1::remove_reference<service_manager::PpapiProcessPolicy *&>' [ 0 5 10]
'std::__1::unique_ptr<service_manager::NetworkProcessPolicy, std::__1::default_delete<service_manager::NetworkProcessPolicy> >::reset' [ 0 5 10 127]
'std::__1::__compressed_pair_elem<sandbox::Credentials::Capability *, 0, false>::__compressed_pair_elem<nullptr_t, void>' [ 0 5 10 80]
'base::subtle::RefCountedThreadSafeBase' [ 0 6 14]
'std::__1::__compressed_pair<service_manager::BPFBasePolicy *, std::__1::default_delete<service_manager::BPFBasePolicy> >::__compressed_pair<service_manager::BPFBasePolicy *, true>' [ 0 5 10 122]
'base::internal::Invoker<base::internal::BindState<void (service_manager::SandboxLinux::*)(service_manager::SandboxType), base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType>, void ()>::RunImpl<void (service_manager::SandboxLinux::*)(service_manager::SandboxType), std::__1::tuple<base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType>, 0, 1>::is_method' [ 0 6 16 228 427]
'std::__1::unique_ptr<service_manager::CrosAmdGpuProcessPolicy, std::__1::default_delete<service_manager::CrosAmdGpuProcessPolicy> >' [ 0 5 10]
'std::__1::unique_ptr<service_manager::BPFBasePolicy, std::__1::default_delete<service_manager::BPFBasePolicy> >::unique_ptr<service_manager::CrosArmGpuProcessPolicy, std::__1::default_delete<service_manager::CrosArmGpuProcessPolicy>, void, void>' [ 0 5 10 113]
'service_manager::switches::kPpapiBrokerProcess' [ 0 17 27]
'std::__1::__compressed_pair<sandbox::SetuidSandboxClient *, std::__1::default_delete<sandbox::SetuidSandboxClient> >::__compressed_pair<sandbox::SetuidSandboxClient *&, true>' [ 0 5 10 118]
'std::__1::get<2, base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> >' [ 0 5 10]
'std::__1::map<std::__1::basic_string<char>, std::__1::basic_string<char>, std::__1::less<void>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > > >' [ 0 5 10]
'std::__1::__to_raw_pointer<sandbox::Credentials::Capability>' [ 0 5 10]
'std::__1::tuple_element<1, std::__1::tuple<base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> > >' [ 0 5 10]
'std::__1::__vector_base<int, std::__1::allocator<int> >::~__vector_base' [ 0 5 10 57]
'service_manager::SandboxLinux::SandboxLinux' [ 0 17 31]
'__uint32_t' [ 0]
'std::__1::vector<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> >::__swap_out_circular_buffer' [ 0 5 10 108]
'std::__1::__vector_base<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >::__alloc' [ 0 5 10 108]
'service_manager::GpuProcessPolicy::~GpuProcessPolicy' [ 0 17 35]
'std::__1::tuple<base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType>' [ 0 5 10]
'std::__1::__pointer_type<sandbox::bpf_dsl::Policy, std::__1::default_delete<sandbox::bpf_dsl::Policy> >' [ 0 5 10]
'std::__1::remove_reference<const base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> > &>' [ 0 5 10]
'std::__1::__compressed_pair_elem<std::__1::default_delete<service_manager::BPFBasePolicy>, 1, true>::__compressed_pair_elem<std::__1::default_delete<service_manager::NetworkProcessPolicy>, void>' [ 0 5 10 101]
'ignore_result<long>' [ 0]
'scoped_refptr<base::internal::BindStateBase>::operator->' [ 0 46]
'bool' [ 0]
'std::__1::__const_pointer<sandbox::syscall_broker::BrokerFilePermission, sandbox::syscall_broker::BrokerFilePermission *, std::__1::allocator<sandbox::syscall_broker::BrokerFilePermission>, true>' [ 0 5 10]
'std::__1::__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >' [ 0 5 10]
'service_manager::PdfCompositorProcessPolicy::EvaluateSyscall' [ 0 17 45]
'std::__1::__const_void_pointer<sandbox::syscall_broker::BrokerFilePermission *, std::__1::allocator<sandbox::syscall_broker::BrokerFilePermission>, false>' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<bool (*)(base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, service_manager::SandboxLinux::Options, std::__1::bitset<10>), base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> >, bool ()>::RunImpl<bool (*const &)(base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, service_manager::SandboxLinux::Options, std::__1::bitset<10>), const std::__1::tuple<base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> > &, 0, 1, 2>::is_method' [ 0 6 16 362 713]
'std::__1::allocator_traits<std::__1::allocator<int> >' [ 0 5 10]
'std::__1::pointer_traits<const char *>' [ 0 5 10]
'std::__1::vector<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> >::vector' [ 0 5 10 108]
'base::internal::Invoker<base::internal::BindState<void (service_manager::SandboxLinux::*)(), base::internal::UnretainedWrapper<service_manager::SandboxLinux> >, void ()>::RunImpl<void (service_manager::SandboxLinux::*)(), std::__1::tuple<base::internal::UnretainedWrapper<service_manager::SandboxLinux> >, 0>::is_weak_call' [ 0 6 16 171 310]
'std::__1::__compressed_pair_elem<std::__1::__map_value_compare<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long>, std::__1::less<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long> >, true>, 1, true>' [ 0 5 10]
'base::OnceCallback<bool (service_manager::SandboxLinux::Options)>::~OnceCallback' [ 0 6 67]
'std::__1::forward<service_manager::CrosArmGpuProcessPolicy *>' [ 0 5 10]
'std::__1::forward<std::__1::default_delete<service_manager::UtilityProcessPolicy> >' [ 0 5 10]
'std::__1::unique_ptr<service_manager::GpuProcessPolicy, std::__1::default_delete<service_manager::GpuProcessPolicy> >::unique_ptr<true, void>' [ 0 5 10 119]
'std::__1::__unique_if<service_manager::CrosArmGpuProcessPolicy>' [ 0 5 10]
'std::__1::__pointer_type<service_manager::CrosArmGpuProcessPolicy, std::__1::default_delete<service_manager::CrosArmGpuProcessPolicy> >' [ 0 5 10]
'service_manager::SandboxDebugHandling::SetDumpableStatusAndHandlers' [ 0 17 39]
'std::__1::__atomic_base<long, true>' [ 0 5 10]
'base::internal::BindState<void (service_manager::SandboxLinux::*)(service_manager::SandboxType), base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType>::~BindState' [ 0 6 16 194]
'std::__1::remove_reference<service_manager::CrosArmGpuProcessPolicy *&>' [ 0 5 10]
'base::Callback<MakeUnboundRunType<bool (*)(base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, service_manager::SandboxLinux::Options, std::__1::bitset<10>), base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, const service_manager::SandboxLinux::Options &, const std::__1::bitset<10> &> >' [ 0 6]
'std::__1::remove_reference<std::__1::shared_ptr<const sandbox::bpf_dsl::internal::ResultExprImpl> &>' [ 0 5 10]
'std::__1::__compressed_pair<service_manager::CrosAmdGpuProcessPolicy *, std::__1::default_delete<service_manager::CrosAmdGpuProcessPolicy> >' [ 0 5 10]
'base::Singleton<service_manager::SandboxLinux, base::DefaultSingletonTraits<service_manager::SandboxLinux>, service_manager::SandboxLinux>::instance_' [ 0 6 140]
'std::__1::__compressed_pair<sandbox::Credentials::Capability *, std::__1::allocator<sandbox::Credentials::Capability> >' [ 0 5 10]
'service_manager::CdmProcessPolicy::CdmProcessPolicy' [ 0 17 35]
'std::__1::conditional<false, std::__1::pointer_traits<std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > *>::__nat, std::__1::pair<const std::__1::basic_string<char>, std::__1::basic_string<char> > >' [ 0 5 10]
'std::__1::move<std::__1::__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> > &>' [ 0 5 10]
'uint_least8_t' [ 0]
'base::Singleton<service_manager::SandboxLinux, base::DefaultSingletonTraits<service_manager::SandboxLinux>, service_manager::SandboxLinux>' [ 0 6]
'std::__1::__split_buffer<int, std::__1::allocator<int> &>' [ 0 5 10]
'service_manager::SandboxSeccompBPF::PolicyForSandboxType' [ 0 17 36]
'std::__1::vector<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> >::__push_back_slow_path<sandbox::Credentials::Capability>' [ 0 5 10 108]
'std::__1::get<1, base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> >' [ 0 5 10]
'service_manager::UtilityProcessPolicy' [ 0 17]
'std::__1::__rebind_alloc_helper<std::__1::allocator_traits<std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > > >, std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> >' [ 0 5 10]
'std::__1::move<std::__1::tuple<base::internal::UnretainedWrapper<service_manager::SandboxLinux> > &>' [ 0 5 10]
'base::internal::PassingTraits<service_manager::SandboxLinux::Options, false>' [ 0 6 16]
'int64_t' [ 0]
'uid_t' [ 0]
'base::internal::Invoker<base::internal::BindState<void (service_manager::SandboxLinux::*)(service_manager::SandboxType), base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType>, void ()>::RunImpl<void (service_manager::SandboxLinux::*)(service_manager::SandboxType), std::__1::tuple<base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType>, 0, 1>' [ 0 6 16 228]
'std::__1::unique_ptr<sandbox::BaselinePolicy, std::__1::default_delete<sandbox::BaselinePolicy> >' [ 0 5 10]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::basic_string' [ 0 5 10 87]
'std::__1::__compressed_pair_elem<service_manager::PpapiProcessPolicy *, 0, false>' [ 0 5 10]
'std::__1::vector<int, std::__1::allocator<int> >::capacity' [ 0 5 10 50]
'service_manager::SandboxLinux::InitializeSandbox' [ 0 17 31]
'service_manager::switches::kDisableGpuSandbox' [ 0 17 27]
'std::__1::__rebind_pointer<void *, std::__1::__tree_node_base<void *> >' [ 0 5 10]
'std::__1::__compressed_pair_elem<sandbox::bpf_dsl::Policy *, 0, false>::__compressed_pair_elem<sandbox::BaselinePolicy *, void>' [ 0 5 10 72]
'std::__1::__tuple_leaf<0, base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, false>::~__tuple_leaf' [ 0 5 10 133]
'std::__1::default_delete<service_manager::PpapiProcessPolicy>' [ 0 5 10]
'service_manager::BPFBasePolicy::EvaluateSyscall' [ 0 17 32]
'std::__1::__compressed_pair_elem<std::__1::default_delete<sandbox::bpf_dsl::Policy>, 1, true>::__compressed_pair_elem<std::__1::default_delete<service_manager::BPFBasePolicy>, void>' [ 0 5 10 95]
'std::__1::forward<std::__1::default_delete<sandbox::bpf_dsl::Policy> >' [ 0 5 10]
'std::__1::vector<sandbox::syscall_broker::BrokerFilePermission, std::__1::allocator<sandbox::syscall_broker::BrokerFilePermission> >' [ 0 5 10]
'base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>' [ 0 6]
'std::__1::move<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> &>' [ 0 5 10]
'std::__1::__compressed_pair<service_manager::BrokerProcessPolicy *, std::__1::default_delete<service_manager::BrokerProcessPolicy> >' [ 0 5 10]
'std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::less<void>, true>' [ 0 5 10]
'std::__1::__compressed_pair_elem<service_manager::BPFBasePolicy *, 0, false>::__compressed_pair_elem<service_manager::CdmProcessPolicy *, void>' [ 0 5 10 78]
'std::__1::__split_buffer_common<true>' [ 0 5 10]
'std::__1::move<void (service_manager::SandboxLinux::*&)()>' [ 0 5 10]
'int_fast8_t' [ 0]
'std::__1::map<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long, std::__1::less<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long> >, std::__1::allocator<std::__1::pair<const std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long> > >' [ 0 5 10]
'std::__1::__compressed_pair_elem<service_manager::BPFBasePolicy *, 0, false>::__compressed_pair_elem<service_manager::NetworkProcessPolicy *, void>' [ 0 5 10 78]
'std::__1::add_lvalue_reference<service_manager::GpuProcessPolicy>' [ 0 5 10]
'sandbox::CodeGen' [ 0 9]
'__uint16_t' [ 0]
'service_manager::BrokerProcessPolicy::EvaluateSyscall' [ 0 17 38]
'std::__1::__compressed_pair_elem<sandbox::SetuidSandboxClient *, 0, false>::__compressed_pair_elem<sandbox::SetuidSandboxClient *&, void>' [ 0 5 10 76]
'std::__1::pointer_traits<int *>' [ 0 5 10]
'std::__1::__add_lvalue_reference_impl<const sandbox::cons::Cell<std::__1::pair<std::__1::shared_ptr<const sandbox::bpf_dsl::internal::BoolExprImpl>, std::__1::shared_ptr<const sandbox::bpf_dsl::internal::ResultExprImpl> > >, true>' [ 0 5 10]
'std::__1::allocator_traits<std::__1::allocator<sandbox::Credentials::Capability> >::deallocate' [ 0 5 10 84]
'std::__1::forward<nullptr_t>' [ 0 5 10]
'base::internal::CallbackBase' [ 0 6 16]
'std::__1' [ 0 5]
'service_manager::switches::kNoSandbox' [ 0 17 27]
'sandbox::bpf_dsl::Caser<unsigned long>::CasesImpl<unsigned long, int>' [ 0 9 18 40]
'wint_t' [ 0]
'base::internal::BindState<void (service_manager::SandboxLinux::*)(service_manager::SandboxType), base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType>' [ 0 6 16]
'std::__1::tuple<base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> >::tuple<base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, const service_manager::SandboxLinux::Options &, const std::__1::bitset<10> &, false, false>' [ 0 5 10 179]
'service_manager::SandboxLinux::GetStatus' [ 0 17 31]
'std::__1::remove_reference<base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> > >' [ 0 5 10]
'std::__1::__size_type<std::__1::allocator<sock_filter>, long, true>' [ 0 5 10]
'intmax_t' [ 0]
'std::__1::__pointer_type_imp::__pointer_type<sandbox::BaselinePolicy, std::__1::default_delete<sandbox::BaselinePolicy>, false>' [ 0 5 10 30]
'std::__1::__compressed_pair<sandbox::Credentials::Capability *, std::__1::allocator<sandbox::Credentials::Capability> &>' [ 0 5 10]
'service_manager::BPFBasePolicy' [ 0 17]
'base::internal::IsNull<bool (*)(base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, service_manager::SandboxLinux::Options, std::__1::bitset<10>)>' [ 0 6 16]
'std::__1::integer_sequence<unsigned long, 0, 1>' [ 0 5 10]
'std::__1::__to_raw_pointer<const char>' [ 0 5 10]
'std::__1::remove_reference<const std::__1::tuple<base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> > &>' [ 0 5 10]
'std::__1::__compressed_pair_elem<service_manager::BPFBasePolicy *, 0, false>' [ 0 5 10]
'base::ScopedClosureRunner' [ 0 6]
'std::__1::__compressed_pair_elem<service_manager::RendererProcessPolicy *, 0, false>::__compressed_pair_elem<service_manager::RendererProcessPolicy *&, void>' [ 0 5 10 86]
'std::__1::remove_reference<std::__1::unique_ptr<service_manager::BPFBasePolicy, std::__1::default_delete<service_manager::BPFBasePolicy> > &>' [ 0 5 10]
'std::__1::tuple<base::internal::UnretainedWrapper<service_manager::SandboxLinux> >::tuple<base::internal::UnretainedWrapper<service_manager::SandboxLinux> , false, false>' [ 0 5 10 84]
'std::__1::atomic<int>' [ 0 5 10]
'int32_t' [ 0]
'scoped_refptr<base::internal::BindStateBase>::get' [ 0 46]
'base::BindRepeating<bool (*)(base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, service_manager::SandboxLinux::Options, std::__1::bitset<10>), base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, const service_manager::SandboxLinux::Options &, const std::__1::bitset<10> &>' [ 0 6]
'std::__1::allocator<unsigned long>' [ 0 5 10]
'short' [ 0]
'sandbox::BaselinePolicy::policy_pid' [ 0 9 25]
'base::RefCountedThreadSafe<base::internal::BindStateBase, base::internal::BindStateBaseRefCountTraits>' [ 0 6]
'std::__1::forward<service_manager::CdmProcessPolicy *&>' [ 0 5 10]
'std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > >' [ 0 5 10]
'std::__1::__compressed_pair_elem<std::__1::allocator<sandbox::syscall_broker::BrokerFilePermission>, 1, true>' [ 0 5 10]
'service_manager::(anonymous namespace)' [ 0 17]
'base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::ScopedGeneric' [ 0 6 63]
'std::__1::forward<sandbox::bpf_dsl::Policy *>' [ 0 5 10]
'std::__1::__size_type<std::__1::allocator<char>, long, true>' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (service_manager::SandboxLinux::*)(), base::internal::UnretainedWrapper<service_manager::SandboxLinux> >, void ()>' [ 0 6 16]
'std::__1::remove_reference<service_manager::CrosAmdGpuProcessPolicy *>' [ 0 5 10]
'std::__1::conditional<true, std::__1::tuple<base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType>, std::__1::__nat>' [ 0 5 10]
'std::__1::unique_ptr<sandbox::bpf_dsl::Policy, std::__1::default_delete<sandbox::bpf_dsl::Policy> >' [ 0 5 10]
'std::__1::__tree_map_pointer_types<std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long>, void *, std::__1::__tree_key_value_types<std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long> >, true>' [ 0 5 10]
'std::__1::__const_pointer<unsigned long, unsigned long *, std::__1::allocator<unsigned long>, true>' [ 0 5 10]
'std::__1::tuple<base::internal::UnretainedWrapper<service_manager::SandboxLinux> >' [ 0 5 10]
'std::__1::unique_ptr<service_manager::CdmProcessPolicy, std::__1::default_delete<service_manager::CdmProcessPolicy> >::unique_ptr<true, void>' [ 0 5 10 119]
'std::__1::tuple_element<1, std::__1::__tuple_types<base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType> >' [ 0 5 10]
'std::__1::__pointer_type_imp::__pointer_type<service_manager::PdfCompositorProcessPolicy, std::__1::default_delete<service_manager::PdfCompositorProcessPolicy>, false>' [ 0 5 10 30]
'base::internal::CallbackBaseCopyable::~CallbackBaseCopyable' [ 0 6 16 38]
'std::__1::__compressed_pair_elem<std::__1::allocator<sandbox::Credentials::Capability> &, 1, false>::__compressed_pair_elem<std::__1::allocator<sandbox::Credentials::Capability> &, void>' [ 0 5 10 101]
'std::__1::pointer_traits<void *>' [ 0 5 10]
'std::__1::__compressed_pair<sandbox::bpf_dsl::Policy *, std::__1::default_delete<sandbox::bpf_dsl::Policy> >::__compressed_pair<sandbox::bpf_dsl::Policy *, std::__1::default_delete<sandbox::bpf_dsl::Policy> >' [ 0 5 10 110]
'std::__1::__compressed_pair<sandbox::BaselinePolicy *, std::__1::default_delete<sandbox::BaselinePolicy> >' [ 0 5 10]
'service_manager::SandboxType' [ 0 17]
'service_manager::SandboxLinux' [ 0 17]
'std::__1::add_lvalue_reference<sandbox::syscall_broker::BrokerClient>' [ 0 5 10]
'std::__1::integer_sequence<unsigned long, 0, 1, 2>' [ 0 5 10]
'sandbox::bpf_dsl::BoolExpr' [ 0 9 18]
'std::__1::remove_reference<service_manager::UtilityProcessPolicy *&>' [ 0 5 10]
'std::__1::__compressed_pair_elem<std::__1::default_delete<service_manager::BPFBasePolicy>, 1, true>::__compressed_pair_elem<std::__1::default_delete<service_manager::UtilityProcessPolicy>, void>' [ 0 5 10 101]
'std::__1::default_delete<service_manager::PpapiProcessPolicy>::operator()' [ 0 5 10 63]
'std::__1::__unique_if<service_manager::NetworkProcessPolicy>' [ 0 5 10]
'std::__1::allocator_traits<std::__1::allocator<std::__1::basic_string<char> > >' [ 0 5 10]
'std::__1::__compressed_pair_elem<sandbox::bpf_dsl::Policy *, 0, false>' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<bool (*)(base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, service_manager::SandboxLinux::Options, std::__1::bitset<10>), base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> >, bool ()>::Run' [ 0 6 16 362]
'service_manager::switches::kNoneSandboxAndElevatedPrivileges' [ 0 17 27]
'base::internal::Invoker<base::internal::BindState<void (service_manager::SandboxLinux::*)(service_manager::SandboxType), base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType>, void ()>::RunOnce::num_bound_args' [ 0 6 16 228 237]
'service_manager::(anonymous namespace)::UpdateProcessTypeAndEnableSandbox' [ 0 17 40]
'std::__1::allocator_traits<std::__1::allocator<sandbox::Credentials::Capability> >::max_size' [ 0 5 10 84]
'std::__1::unique_ptr<service_manager::CrosAmdGpuProcessPolicy, std::__1::default_delete<service_manager::CrosAmdGpuProcessPolicy> >::~unique_ptr' [ 0 5 10 133]
'service_manager::PdfCompositorProcessPolicy' [ 0 17]
'std::__1::unique_ptr<sandbox::BaselinePolicy, std::__1::default_delete<sandbox::BaselinePolicy> >::release' [ 0 5 10 99]
'base::OnceCallback<void ()>::OnceCallback' [ 0 6 29]
'std::__1::__pointer_type_imp::__pointer_type<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > >, true>' [ 0 5 10 30]
'std::__1::__compressed_pair<service_manager::BPFBasePolicy *, std::__1::default_delete<service_manager::BPFBasePolicy> >::__compressed_pair<service_manager::UtilityProcessPolicy *, std::__1::default_delete<service_manager::UtilityProcessPolicy> >' [ 0 5 10 122]
'logging::LOG_FATAL' [ 0 9]
'std::__1::__compressed_pair_elem<std::__1::default_delete<service_manager::BrokerProcessPolicy>, 1, true>' [ 0 5 10]
'__clock_t' [ 0]
'std::__1::unique_ptr<service_manager::UtilityProcessPolicy, std::__1::default_delete<service_manager::UtilityProcessPolicy> >::unique_ptr<true, void>' [ 0 5 10 127]
'std::__1::remove_reference<base::internal::UnretainedWrapper<service_manager::SandboxLinux> >' [ 0 5 10]
'service_manager::(anonymous namespace)::IsRunningTSAN' [ 0 17 40]
'std::__1::__pointer_type<sock_filter, std::__1::allocator<sock_filter> >' [ 0 5 10]
'base::OnceCallback<bool (service_manager::SandboxLinux::Options)>::Run' [ 0 6 67]
'service_manager::switches::kServiceSandboxType' [ 0 17 27]
'std::__1::default_delete<service_manager::GpuProcessPolicy>::operator()' [ 0 5 10 61]
'std::__1::__compressed_pair<sandbox::bpf_dsl::Policy *, std::__1::default_delete<sandbox::bpf_dsl::Policy> >::__compressed_pair<service_manager::BrokerProcessPolicy *, std::__1::default_delete<service_manager::BrokerProcessPolicy> >' [ 0 5 10 110]
'service_manager::(anonymous namespace)::InstallCrashTestHandler' [ 0 17 40]
'service_manager::switches::kDisableSetuidSandbox' [ 0 17 27]
'base::Passed<base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, nullptr>' [ 0 6]
'std::__1::conditional<false, std::__1::pointer_traits<const char *>::__nat, const char>' [ 0 5 10]
'std::__1::remove_reference<service_manager::CrosArmGpuProcessPolicy *>' [ 0 5 10]
'std::__1::ios_base::width' [ 0 5 10 20]
'std::__1::forward<const std::__1::tuple<base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> > &>' [ 0 5 10]
'int_fast64_t' [ 0]
'__intptr_t' [ 0]
'std::__1::default_delete<sandbox::syscall_broker::BrokerClient>' [ 0 5 10]
'std::__1::__compressed_pair_elem<std::__1::allocator<std::__1::basic_string<char> >, 1, true>' [ 0 5 10]
'service_manager::(anonymous namespace)::DoChrootSignalHandler::kFirstMessage' [ 0 17 40 63]
'std::__1::default_delete<service_manager::RendererProcessPolicy>' [ 0 5 10]
'int16_t' [ 0]
'sandbox::bpf_dsl::Arg<unsigned long>::EqualTo' [ 0 9 18 38]
'base::subtle::Atomic64' [ 0 6 14]
'std::__1::__const_void_pointer<std::__1::pair<const std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long> *, std::__1::allocator<std::__1::pair<const std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long> >, false>' [ 0 5 10]
'std::__1::char_traits<char>::eof' [ 0 5 10 29]
'std::__1::__tuple_leaf<0, base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, false>::__tuple_leaf<base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, void>' [ 0 5 10 133]
'std::__1::__const_pointer<std::__1::basic_string<char>, std::__1::basic_string<char> *, std::__1::allocator<std::__1::basic_string<char> >, true>' [ 0 5 10]
'std::__1::remove_reference<std::__1::tuple<base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType> >' [ 0 5 10]
'std::__1::__compressed_pair_elem<sandbox::BaselinePolicy *, 0, false>' [ 0 5 10]
'service_manager::CrosAmdGpuProcessPolicy::~CrosAmdGpuProcessPolicy' [ 0 17 42]
'std::__1::default_delete<service_manager::GpuProcessPolicy>' [ 0 5 10]
'wchar_t' [ 0]
'std::__1::string' [ 0 5 10]
'service_manager::IsUnsandboxedSandboxType' [ 0 17]
'base::Bind<bool (*)(base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, service_manager::SandboxLinux::Options, std::__1::bitset<10>), base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, const service_manager::SandboxLinux::Options &, const std::__1::bitset<10> &>' [ 0 6]
'base::internal::InvokeHelper<false, bool>::MakeItSo<bool (*const &)(base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, service_manager::SandboxLinux::Options, std::__1::bitset<10>), base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, const service_manager::SandboxLinux::Options &, const std::__1::bitset<10> &>' [ 0 6 16 43]
'std::__1::__compressed_pair_elem<service_manager::GpuProcessPolicy *, 0, false>' [ 0 5 10]
'std::__1::default_delete<service_manager::CdmProcessPolicy>' [ 0 5 10]
'service_manager::PpapiProcessPolicy::~PpapiProcessPolicy' [ 0 17 37]
'service_manager::NetworkProcessPolicy::EvaluateSyscall' [ 0 17 39]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__get_short_pointer' [ 0 5 10 87]
'std::__1::make_unique<service_manager::CrosArmGpuProcessPolicy, bool>' [ 0 5 10]
'std::__1::get<0, base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType>' [ 0 5 10]
'base::BindUnwrapTraits<std::__1::bitset<10> >::Unwrap<const std::__1::bitset<10> &>' [ 0 6 47]
'base::strings::internal' [ 0 6 15]
'std::__1::remove_reference<service_manager::RendererProcessPolicy *>' [ 0 5 10]
'std::__1::vector<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> >::push_back' [ 0 5 10 108]
'std::__1::remove_reference<const int &>' [ 0 5 10]
'std::__1::forward<service_manager::CrosAmdGpuProcessPolicy *&>' [ 0 5 10]
'std::__1::__pointer_type<std::__1::pair<const std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long>, std::__1::allocator<std::__1::pair<const std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long> > >' [ 0 5 10]
'base::Callback<bool ()>' [ 0 6]
'std::__1::__compressed_pair<service_manager::GpuProcessPolicy *, std::__1::default_delete<service_manager::GpuProcessPolicy> >' [ 0 5 10]
'std::__1::use_facet<std::__1::ctype<char> >' [ 0 5 10]
'std::__1::default_delete<service_manager::UtilityProcessPolicy>::operator()' [ 0 5 10 65]
'std::__1::unique_ptr<service_manager::NetworkProcessPolicy, std::__1::default_delete<service_manager::NetworkProcessPolicy> >::~unique_ptr' [ 0 5 10 127]
'std::__1::__size_type<std::__1::allocator<int>, long, true>' [ 0 5 10]
'sandbox::syscall_broker::BrokerCommandSet' [ 0 9 25]
'std::__1::unique_ptr<service_manager::CrosArmGpuProcessPolicy, std::__1::default_delete<service_manager::CrosArmGpuProcessPolicy> >::unique_ptr<true, void>' [ 0 5 10 133]
'std::__1::__add_lvalue_reference_impl<service_manager::BPFBasePolicy, true>' [ 0 5 10]
'std::__1::__split_buffer<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> &>::clear' [ 0 5 10 117]
'std::__1::unique_ptr<service_manager::BPFBasePolicy, std::__1::default_delete<service_manager::BPFBasePolicy> >::release' [ 0 5 10 113]
'std::__1::vector<int, std::__1::allocator<int> >::__swap_out_circular_buffer' [ 0 5 10 50]
'std::__1::unique_ptr<sandbox::bpf_dsl::Policy, std::__1::default_delete<sandbox::bpf_dsl::Policy> >::operator bool' [ 0 5 10 101]
'uintptr_t' [ 0]
'std::__1::__compressed_pair_elem<std::__1::default_delete<service_manager::BPFBasePolicy>, 1, true>::__compressed_pair_elem<std::__1::default_delete<service_manager::CrosArmGpuProcessPolicy>, void>' [ 0 5 10 101]
'std::__1::__compressed_pair_elem<service_manager::NetworkProcessPolicy *, 0, false>::__compressed_pair_elem<service_manager::NetworkProcessPolicy *&, void>' [ 0 5 10 85]
'std::__1::__compressed_pair<service_manager::PdfCompositorProcessPolicy *, std::__1::default_delete<service_manager::PdfCompositorProcessPolicy> >' [ 0 5 10]
'__gid_t' [ 0]
'service_manager::SandboxSeccompBPF::SupportsSandbox' [ 0 17 36]
'std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >' [ 0 5 10]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__get_pointer' [ 0 5 10 87]
'__pid_t' [ 0]
'std::__1::remove_reference<void (service_manager::SandboxLinux::*)(service_manager::SandboxType)>' [ 0 5 10]
'std::__1::operator==<char, std::__1::char_traits<char>, std::__1::allocator<char> >' [ 0 5 10]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__get_long_size' [ 0 5 10 87]
'std::__1::__const_pointer<sock_filter, sock_filter *, std::__1::allocator<sock_filter>, true>' [ 0 5 10]
'std::__1::__add_lvalue_reference_impl<service_manager::CrosArmGpuProcessPolicy, true>' [ 0 5 10]
'std::__1::basic_streambuf<char, std::__1::char_traits<char> >::sputn' [ 0 5 10 63]
'std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >::failed' [ 0 5 10 67]
'std::__1::make_unique<sandbox::BaselinePolicy>' [ 0 5 10]
'service_manager::SandboxSeccompBPF::IsSeccompBPFDesired' [ 0 17 36]
'FILE' [ 0]
'std::__1::shared_ptr<const sandbox::cons::Cell<std::__1::pair<std::__1::shared_ptr<const sandbox::bpf_dsl::internal::BoolExprImpl>, std::__1::shared_ptr<const sandbox::bpf_dsl::internal::ResultExprImpl> > > >::shared_ptr' [ 0 5 10 210]
'std::__1::__size_type<std::__1::allocator<unsigned long>, long, true>' [ 0 5 10]
'std::__1::remove_reference<service_manager::CdmProcessPolicy *&>' [ 0 5 10]
'sandbox::bpf_dsl::internal' [ 0 9 18]
'std::__1::locale' [ 0 5 10]
'std::__1::vector<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> >::__annotate_delete' [ 0 5 10 108]
'std::__1::__compressed_pair_elem<std::__1::default_delete<service_manager::BPFBasePolicy>, 1, true>' [ 0 5 10]
'service_manager::NetworkProcessPolicy' [ 0 17]
'std::__1::__compressed_pair_elem<service_manager::CdmProcessPolicy *, 0, false>' [ 0 5 10]
'std::__1::default_delete<service_manager::PdfCompositorProcessPolicy>' [ 0 5 10]
'std::__1::move<int *&>' [ 0 5 10]
'std::__1::__tuple_leaf<1, service_manager::SandboxLinux::Options, false>::__tuple_leaf<const service_manager::SandboxLinux::Options &, void>' [ 0 5 10 74]
'base::BindOnce<void (service_manager::SandboxLinux::*)(), base::internal::UnretainedWrapper<service_manager::SandboxLinux> >' [ 0 6]
'std::__1::less<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long> >' [ 0 5 10]
'service_manager::(anonymous namespace)::IsSandboxDebuggingEnabled' [ 0 17 40]
'base::internal::Invoker<base::internal::BindState<bool (*)(base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, service_manager::SandboxLinux::Options, std::__1::bitset<10>), base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> >, bool ()>::RunImpl<bool (*const &)(base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, service_manager::SandboxLinux::Options, std::__1::bitset<10>), const std::__1::tuple<base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> > &, 0, 1, 2>' [ 0 6 16 362]
'base::subtle' [ 0 6]
'std::__1::basic_ios<char, std::__1::char_traits<char> >::fill' [ 0 5 10 57]
'base::internal::InvokeHelper<false, void>' [ 0 6 16]
'sandbox::bpf_dsl::Elser' [ 0 9 18]
'service_manager::BPFBasePolicy::GetPolicyPid' [ 0 17 32]
'base::subtle::AtomicLocation64' [ 0 6 14]
'std::__1::unique_ptr<service_manager::UtilityProcessPolicy, std::__1::default_delete<service_manager::UtilityProcessPolicy> >' [ 0 5 10]
'std::__1::__pointer_type<std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long>, std::__1::allocator<std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long> > >' [ 0 5 10]
'std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, void *> >' [ 0 5 10]
'std::__1::operator+<char, std::__1::char_traits<char>, std::__1::allocator<char> >' [ 0 5 10]
'base::ScopedFD' [ 0 6]
'std::__1::__pointer_type_imp::__pointer_type<unsigned long, std::__1::allocator<unsigned long>, true>' [ 0 5 10 30]
'std::__1::__const_void_pointer<sock_filter *, std::__1::allocator<sock_filter>, false>' [ 0 5 10]
'std::__1::__bitset<1, 10>::__make_ref' [ 0 5 10 27]
'lldiv_t' [ 0]
'std::__1::__pointer_type<service_manager::RendererProcessPolicy, std::__1::default_delete<service_manager::RendererProcessPolicy> >' [ 0 5 10]
'service_manager::switches::kDisableWin32kLockDown' [ 0 17 27]
'std::__1::__split_buffer<int, std::__1::allocator<int> &>::__destruct_at_end' [ 0 5 10 59]
'std::__1::__pointer_type_imp::__pointer_type<service_manager::CdmProcessPolicy, std::__1::default_delete<service_manager::CdmProcessPolicy>, false>' [ 0 5 10 30]
'__int64_t' [ 0]
'std::__1::__compressed_pair<service_manager::PpapiProcessPolicy *, std::__1::default_delete<service_manager::PpapiProcessPolicy> >' [ 0 5 10]
'std::__1::unique_ptr<service_manager::BPFBasePolicy, std::__1::default_delete<service_manager::BPFBasePolicy> >::unique_ptr<true, void>' [ 0 5 10 113]
'std::__1::unique_ptr<service_manager::BPFBasePolicy, std::__1::default_delete<service_manager::BPFBasePolicy> >::unique_ptr<service_manager::RendererProcessPolicy, std::__1::default_delete<service_manager::RendererProcessPolicy>, void, void>' [ 0 5 10 113]
'std::__1::make_unique<service_manager::GpuProcessPolicy>' [ 0 5 10]
'std::__1::tuple_element<2, std::__1::tuple<base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> > >' [ 0 5 10]
'std::__1::__pointer_type<int, std::__1::allocator<int> >' [ 0 5 10]
'std::__1::__compressed_pair<service_manager::BPFBasePolicy *, std::__1::default_delete<service_manager::BPFBasePolicy> >::__compressed_pair<service_manager::GpuProcessPolicy *, std::__1::default_delete<service_manager::GpuProcessPolicy> >' [ 0 5 10 122]
'std::__1::allocator<sock_filter>' [ 0 5 10]
'std::__1::vector<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> >::max_size' [ 0 5 10 108]
'base::internal::BindState<bool (*)(base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, service_manager::SandboxLinux::Options, std::__1::bitset<10>), base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> >::~BindState' [ 0 6 16 328]
'std::__1::vector<unsigned long, std::__1::allocator<unsigned long> >' [ 0 5 10]
'service_manager::(anonymous namespace)::IsChromeOS' [ 0 17 40]
'time_t' [ 0]
'std::__1::__compressed_pair<service_manager::RendererProcessPolicy *, std::__1::default_delete<service_manager::RendererProcessPolicy> >' [ 0 5 10]
'std::__1::forward<const std::__1::bitset<10> &>' [ 0 5 10]
'std::__1::__size_type<std::__1::allocator<std::__1::basic_string<char> >, long, true>' [ 0 5 10]
'base::internal::IsNull<void (service_manager::SandboxLinux::*)()>' [ 0 6 16]
'std::__1::allocator<int>::allocate' [ 0 5 10 26]
'base::internal::Invoker<base::internal::BindState<bool (*)(base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, service_manager::SandboxLinux::Options, std::__1::bitset<10>), base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> >, bool ()>::RunImpl<bool (*const &)(base::OnceCallback<bool (service_manager::SandboxLinux::Options)>, service_manager::SandboxLinux::Options, std::__1::bitset<10>), const std::__1::tuple<base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> > &, 0, 1, 2>::is_weak_call' [ 0 6 16 362 713]
'std::__1::forward<service_manager::RendererProcessPolicy *&>' [ 0 5 10]
'std::__1::__compressed_pair<sandbox::SetuidSandboxClient *, std::__1::default_delete<sandbox::SetuidSandboxClient> >' [ 0 5 10]
'std::__1::__compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::less<void>, true> >' [ 0 5 10]
'uint32_t' [ 0]
'int_fast16_t' [ 0]
'sandbox::bpf_dsl::Switch<unsigned long>' [ 0 9 18]
'std::__1::forward<std::__1::tuple<base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType> >' [ 0 5 10]
'std::__1::__compressed_pair<service_manager::CrosArmGpuProcessPolicy *, std::__1::default_delete<service_manager::CrosArmGpuProcessPolicy> >::__compressed_pair<service_manager::CrosArmGpuProcessPolicy *&, true>' [ 0 5 10 142]
'std::__1::remove_reference<sandbox::SetuidSandboxClient *&>' [ 0 5 10]
'std::__1::allocator_traits<std::__1::allocator<std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long> > >' [ 0 5 10]
'std::__1::__pointer_type_imp::__pointer_type<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability>, true>' [ 0 5 10 30]
'std::__1::remove_reference<std::__1::tuple<base::internal::UnretainedWrapper<service_manager::SandboxLinux> > &>' [ 0 5 10]
'std::__1::unique_ptr<service_manager::PdfCompositorProcessPolicy, std::__1::default_delete<service_manager::PdfCompositorProcessPolicy> >::~unique_ptr' [ 0 5 10 139]
'std::__1::__less<unsigned long, unsigned long>' [ 0 5 10]
'std::__1::forward<bool>' [ 0 5 10]
'std::__1::forward<service_manager::CrosAmdGpuProcessPolicy *>' [ 0 5 10]
'std::__1::forward<service_manager::SandboxType &>' [ 0 5 10]
'std::__1::vector<int, std::__1::allocator<int> >' [ 0 5 10]
'std::__1::__compressed_pair_elem<sandbox::BaselinePolicy *, 0, false>::__compressed_pair_elem<sandbox::BaselinePolicy *&, void>' [ 0 5 10 71]
'std::__1::remove_reference<sandbox::bpf_dsl::Policy *>' [ 0 5 10]
'std::__1::vector<int, std::__1::allocator<int> >::push_back' [ 0 5 10 50]
'std::__1::__split_buffer<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> &>' [ 0 5 10]
'base::BindUnwrapTraits<service_manager::SandboxType>::Unwrap<service_manager::SandboxType>' [ 0 6 54]
'std::__1::__pointer_type_imp::__pointer_type<int, std::__1::allocator<int>, true>' [ 0 5 10 30]
'std::__1::__rebind_alloc_helper<std::__1::allocator_traits<std::__1::allocator<std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long> > >, std::__1::__tree_node<std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long>, void *> >' [ 0 5 10]
'sandbox::Credentials' [ 0 9]
'std::__1::forward<std::__1::allocator<sandbox::Credentials::Capability> &>' [ 0 5 10]
'base::BindUnwrapTraits<base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> > >' [ 0 6]
'std::__1::forward<service_manager::NetworkProcessPolicy *&>' [ 0 5 10]
'std::__1::unique_ptr<service_manager::RendererProcessPolicy, std::__1::default_delete<service_manager::RendererProcessPolicy> >::release' [ 0 5 10 129]
'std::__1::__tree_node_types<std::__1::__tree_node<std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long>, void *> *, std::__1::__tree_node<std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long>, void *> >' [ 0 5 10]
'std::__1::__size_type<std::__1::allocator<std::__1::pair<const std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long> >, long, true>' [ 0 5 10]
'std::__1::__tuple_indices<0, 1>' [ 0 5 10]
'std::__1::__compressed_pair<service_manager::PpapiProcessPolicy *, std::__1::default_delete<service_manager::PpapiProcessPolicy> >::__compressed_pair<service_manager::PpapiProcessPolicy *&, true>' [ 0 5 10 132]
'std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>::__compressed_pair_elem' [ 0 5 10 138]
'std::__1::allocator_traits<std::__1::allocator<sandbox::syscall_broker::BrokerFilePermission> >' [ 0 5 10]
'std::__1::default_delete<service_manager::PdfCompositorProcessPolicy>::operator()' [ 0 5 10 71]
'std::__1::__vector_base<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >::capacity' [ 0 5 10 108]
'std::__1::move<std::__1::tuple<base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType> &>' [ 0 5 10]
'std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>' [ 0 5 10]
'std::__1::add_lvalue_reference<service_manager::BrokerProcessPolicy>' [ 0 5 10]
'__int32_t' [ 0]
'std::__1::__compressed_pair<sandbox::Credentials::Capability *, std::__1::allocator<sandbox::Credentials::Capability> &>::__compressed_pair<nullptr_t, std::__1::allocator<sandbox::Credentials::Capability> &>' [ 0 5 10 122]
'std::__1::allocator_traits<std::__1::allocator<sandbox::Credentials::Capability> >::__construct_backward<sandbox::Credentials::Capability>' [ 0 5 10 84]
'std::__1::chrono' [ 0 5 10]
'std::__1::__vector_base<int, std::__1::allocator<int> >::__destruct_at_end' [ 0 5 10 57]
'std::__1::__split_buffer<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> &>::__destruct_at_end' [ 0 5 10 117]
'std::__1::__tuple_types<base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, service_manager::SandboxLinux::Options, std::__1::bitset<10> >' [ 0 5 10]
'service_manager::Sandbox::Initialize' [ 0 17 26]
'std::__1::__compressed_pair_elem<std::__1::default_delete<service_manager::BPFBasePolicy>, 1, true>::__compressed_pair_elem<std::__1::default_delete<service_manager::PpapiProcessPolicy>, void>' [ 0 5 10 101]
'service_manager::switches::kPdfCompositorSandbox' [ 0 17 27]
'sandbox::bpf_dsl::Arg<unsigned long>' [ 0 9 18]
'std::__1::allocator<sandbox::syscall_broker::BrokerFilePermission>' [ 0 5 10]
'std::__1::default_delete<service_manager::CrosArmGpuProcessPolicy>' [ 0 5 10]
'std::__1::__compressed_pair_elem<std::__1::allocator<int> &, 1, false>' [ 0 5 10]
'std::__1::unique_ptr<service_manager::CrosArmGpuProcessPolicy, std::__1::default_delete<service_manager::CrosArmGpuProcessPolicy> >::~unique_ptr' [ 0 5 10 133]
'std::__1::forward<std::__1::default_delete<service_manager::GpuProcessPolicy> >' [ 0 5 10]
'logging::LogMessageVoidify' [ 0 9]
'std::__1::__vector_base<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >::__destruct_at_end' [ 0 5 10 108]
'service_manager::SandboxSeccompBPF' [ 0 17]
'base::RepeatingCallback<bool ()>' [ 0 6]
'logging::ErrnoLogMessage::stream' [ 0 9 26]
'std::__1::__pointer_type<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> >, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char>, std::__1::basic_string<char> > > >' [ 0 5 10]
'std::__1::__vector_base<std::__1::basic_string<char>, std::__1::allocator<std::__1::basic_string<char> > >::__end_cap' [ 0 5 10 108]
'std::__1::vector<int, std::__1::allocator<int> >::~vector' [ 0 5 10 50]
'base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::get' [ 0 6 63]
'std::__1::__compressed_pair<service_manager::NetworkProcessPolicy *, std::__1::default_delete<service_manager::NetworkProcessPolicy> >::__compressed_pair<service_manager::NetworkProcessPolicy *&, true>' [ 0 5 10 136]
'base::internal::InvokeHelper<false, void>::MakeItSo<void (service_manager::SandboxLinux::*)(service_manager::SandboxType), service_manager::SandboxLinux *, service_manager::SandboxType>' [ 0 6 16 43]
'std::__1::index_sequence<0UL, 1UL, 2UL>' [ 0 5 10]
'std::__1::unique_ptr<service_manager::CdmProcessPolicy, std::__1::default_delete<service_manager::CdmProcessPolicy> >' [ 0 5 10]
'std::__1::min<unsigned long>' [ 0 5 10]
'std::__1::allocator<std::__1::basic_string<char> >::deallocate' [ 0 5 10 52]
'uint16_t' [ 0]
'long int' [ 0]
'std::__1::remove_reference<const service_manager::SandboxLinux::Options &>' [ 0 5 10]
'std::__1::pointer_traits<std::__1::pair<const std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long> *>' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (service_manager::SandboxLinux::*)(service_manager::SandboxType), base::internal::UnretainedWrapper<service_manager::SandboxLinux>, service_manager::SandboxType>, void ()>' [ 0 6 16]
'std::__1::__pointer_type<service_manager::CrosAmdGpuProcessPolicy, std::__1::default_delete<service_manager::CrosAmdGpuProcessPolicy> >' [ 0 5 10]
'std::__1::unique_ptr<sandbox::bpf_dsl::Policy, std::__1::default_delete<sandbox::bpf_dsl::Policy> >::~unique_ptr' [ 0 5 10 101]
'std::__1::__compressed_pair_elem<std::__1::default_delete<sandbox::SetuidSandboxClient>, 1, true>' [ 0 5 10]
'std::__1::__pointer_type<service_manager::BPFBasePolicy, std::__1::default_delete<service_manager::BPFBasePolicy> >' [ 0 5 10]
'std::__1::__compressed_pair<sock_filter *, std::__1::allocator<sock_filter> >' [ 0 5 10]
'std::__1::conditional<false, std::__1::pointer_traits<int *>::__nat, int>' [ 0 5 10]
'std::__1::output_iterator_tag' [ 0 5 10]
'std::__1::__compressed_pair_elem<std::__1::default_delete<service_manager::PdfCompositorProcessPolicy>, 1, true>' [ 0 5 10]
'std::__1::__vector_base<int, std::__1::allocator<int> >' [ 0 5 10]
'std::__1::allocator_traits<std::__1::allocator<unsigned long> >' [ 0 5 10]
'std::__1::__tuple_leaf<1, service_manager::SandboxType, false>::__tuple_leaf<service_manager::SandboxType &, void>' [ 0 5 10 64]
'std::__1::min<unsigned long, std::__1::__less<unsigned long, unsigned long> >' [ 0 5 10]
'std::__1::default_delete<sandbox::bpf_dsl::Policy>' [ 0 5 10]
'va_list' [ 0]
'base::Singleton<service_manager::SandboxLinux, base::DefaultSingletonTraits<service_manager::SandboxLinux>, service_manager::SandboxLinux>::get' [ 0 6 140]
'std::__1::vector<int, std::__1::allocator<int> >::data' [ 0 5 10 50]
'std::__1::unique_ptr<service_manager::BrokerProcessPolicy, std::__1::default_delete<service_manager::BrokerProcessPolicy> >' [ 0 5 10]
'sandbox::bpf_dsl::Arg<int>::Arg' [ 0 9 18 28]
'std::__1::forward<std::__1::default_delete<service_manager::BrokerProcessPolicy> >' [ 0 5 10]
'std::__1::unique_ptr<service_manager::PdfCompositorProcessPolicy, std::__1::default_delete<service_manager::PdfCompositorProcessPolicy> >::unique_ptr<true, void>' [ 0 5 10 139]
'__time_t' [ 0]
'std::__1::forward<service_manager::PpapiProcessPolicy *>' [ 0 5 10]
'std::__1::__vector_base<sandbox::Credentials::Capability, std::__1::allocator<sandbox::Credentials::Capability> >::__end_cap' [ 0 5 10 115]
'std::__1::remove_reference<std::__1::default_delete<sandbox::BaselinePolicy> >' [ 0 5 10]
'std::__1::__compressed_pair_elem<sandbox::SetuidSandboxClient *, 0, false>' [ 0 5 10]
'std::__1::enable_if_t<FunctorTraits<void (SandboxLinux::*)(SandboxType)>::is_nullable, bool>' [ 0 5 10]
'std::__1::remove_reference<bool>' [ 0 5 10]
'std::__1::unique_ptr<service_manager::BPFBasePolicy, std::__1::default_delete<service_manager::BPFBasePolicy> >::unique_ptr<service_manager::PpapiProcessPolicy, std::__1::default_delete<service_manager::PpapiProcessPolicy>, void, void>' [ 0 5 10 113]
'std::__1::__compressed_pair_elem<std::__1::default_delete<sandbox::bpf_dsl::Policy>, 1, true>' [ 0 5 10]
'base::ScopedGeneric<int, base::internal::ScopedFDCloseTraits>::FreeIfNecessary' [ 0 6 63]
'std::__1::move<sandbox::Credentials::Capability *&>' [ 0 5 10]
'std::__1::__compressed_pair_elem<std::__1::default_delete<sandbox::syscall_broker::BrokerClient>, 1, true>' [ 0 5 10]
'std::__1::allocator_traits<std::__1::allocator<char> >' [ 0 5 10]
'std::__1::allocator<std::__1::basic_string<char> >' [ 0 5 10]
'std::__1::allocator<std::__1::__value_type<std::__1::tuple<unsigned short, unsigned int, unsigned long, unsigned long>, unsigned long> >' [ 0 5 10]
'std::__1::allocator<sandbox::Credentials::Capability>::deallocate' [ 0 5 10 55]
'__int16_t' [ 0]
'std::__1::__pointer_type_imp::__pointer_type<service_manager::RendererProcessPolicy, std::__1::default_delete<service_manager::RendererProcessPolicy>, false>' [ 0 5 10 30]
'std::__1::__tuple_indices<0, 1, 2>' [ 0 5 10]
'std::__1::add_lvalue_reference<service_manager::RendererProcessPolicy>' [ 0 5 10]
'std::__1::add_lvalue_reference<service_manager::CdmProcessPolicy>' [ 0 5 10]
'std::__1::operator<<<char, std::__1::char_traits<char>, std::__1::allocator<char> >' [ 0 5 10]
'std::__1::char_traits<char>' [ 0 5 10]
'std::__1::__tuple_leaf<0, base::internal::PassedWrapper<base::OnceCallback<bool (service_manager::SandboxLinux::Options)> >, false>' [ 0 5 10]
