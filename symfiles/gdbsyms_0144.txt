'std::__1::unique_ptr<ui::ScreenshotGrabber::ScopedCursorHider, std::__1::default_delete<ui::ScreenshotGrabber::ScopedCursorHider> >::~unique_ptr' [ 0 5 10 133]
'std::__1::forward<std::__1::tuple<base::RepeatingCallback<void (gfx::Image)>, gfx::Size> >' [ 0 5 10]
'ui::GrabWindowSnapshotAsyncCallback' [ 0 4]
'aura::WindowObserver::OnWindowAddedToRootWindow' [ 0 6 22]
'std::__1::__tuple_types<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>' [ 0 5 10]
'std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >::failed' [ 0 5 10 67]
'base::internal::Invoker<base::internal::BindState<void (*)(base::OnceCallback<SkBitmap ()>, SkBitmap *), base::OnceCallback<SkBitmap ()>, SkBitmap *>, void ()>::RunImpl<void (*)(base::OnceCallback<SkBitmap ()>, SkBitmap *), std::__1::tuple<base::OnceCallback<SkBitmap ()>, SkBitmap *>, 0, 1>::is_method' [ 0 6 16 161 293]
'std::__1::__tuple_leaf<0, base::OnceCallback<void (const SkBitmap &)>, false>::~__tuple_leaf' [ 0 5 10 79]
'ui::PropertyChangeReason' [ 0 4]
'std::__1::atomic<unsigned int>' [ 0 5 10]
'base::internal::BindStateBaseRefCountTraits' [ 0 6 16]
'std::__1::__pointer_type<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >' [ 0 5 10]
'std::__1::conditional<true, std::__1::tuple<base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *>, std::__1::__nat>' [ 0 5 10]
'base::CallbackCancellationTraits<void (ui::ScreenshotGrabber::*)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>), std::__1::tuple<base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >, void>' [ 0 6]
'pthread_mutex_t' [ 0]
'base::BindRepeating<void (ui::ScreenshotGrabber::*)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>), base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char> &, bool &, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >' [ 0 6]
'std::__1::vector<aura::Window *, std::__1::allocator<aura::Window *> >::__make_iter' [ 0 5 10 72]
'base::PostTaskWithTraitsAndReplyWithResult<scoped_refptr<base::RefCountedMemory>, scoped_refptr<base::RefCountedMemory> >' [ 0 6]
'std::__1::__compressed_pair<ui::ScreenshotGrabber::ScopedCursorHider *, std::__1::default_delete<ui::ScreenshotGrabber::ScopedCursorHider> >' [ 0 5 10]
'std::__1::__compressed_pair_elem<std::__1::allocator<aura::Window *> &, 1, false>::__compressed_pair_elem<std::__1::allocator<aura::Window *> &, void>' [ 0 5 10 83]
'std::__1::remove_reference<const std::__1::tuple<base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > > &>' [ 0 5 10]
'std::__1::remove_reference<std::__1::basic_string<char> &>' [ 0 5 10]
'base::internal::WeakReference' [ 0 6 16]
'std::__1::allocator<aura::Window *>::allocate' [ 0 5 10 37]
'std::__1::__pointer_type<char, std::__1::allocator<char> >' [ 0 5 10]
'std::__1::add_lvalue_reference<viz::CopyOutputResult>' [ 0 5 10]
'std::__1::__tuple_leaf<1, SkBitmap *, false>' [ 0 5 10]
'base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> >::~PassedWrapper' [ 0 6 16 120]
'std::__1::__atomic_base<unsigned int, true>' [ 0 5 10]
'std::__1::forward<const std::__1::tuple<SkBitmap, gfx::Size> &>' [ 0 5 10]
'base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>::Run' [ 0 6 66]
'std::__1::tuple<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> >::tuple<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, false, false>' [ 0 5 10 152]
'base::internal::BindStateBase::~BindStateBase' [ 0 6 16 31]
'base::BindUnwrapTraits<base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)> >' [ 0 6]
'std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::vector' [ 0 5 10 70]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::operator=' [ 0 5 10 87]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1>, SkBitmap, gfx::Size>::~__tuple_impl' [ 0 5 10 78]
'base::BindUnwrapTraits<base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >' [ 0 6]
'std::__1::__const_pointer<unsigned char, unsigned char *, std::__1::allocator<unsigned char>, true>' [ 0 5 10]
'std::__1::move<std::__1::tuple<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int> &>' [ 0 5 10]
'std::__1::forward<scoped_refptr<base::RefCountedMemory> *>' [ 0 5 10]
'std::__1::__alloc_traits_difference_type<std::__1::allocator<aura::Window *>, aura::Window **, true>' [ 0 5 10]
'std::__1::true_type' [ 0 5 10]
'ui::ScreenshotGrabber::ScopedCursorHider::ScopedCursorHider' [ 0 4 23 42]
'aura::WindowObserver::OnWindowOpacitySet' [ 0 6 22]
'std::__1::false_type' [ 0 5 10]
'logging::LOG_ERROR' [ 0 9]
'base::Callback<SkBitmap ()>' [ 0 6]
'unsigned char' [ 0]
'ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>::~WindowTrackerTemplate' [ 0 4 63]
'std::__1::__tuple_leaf<1, std::__1::basic_string<char>, false>::~__tuple_leaf' [ 0 5 10 64]
'__va_list_tag' [ 0]
'base::BindOnce<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), const base::RepeatingCallback<void (gfx::Image)> &>' [ 0 6]
'intptr_t' [ 0]
'gfx::Size' [ 0 5]
'std::__1::remove_reference<void (*)(base::OnceCallback<void (const SkBitmap &)>, SkBitmap *)>' [ 0 5 10]
'std::__1::__tuple_leaf<0, scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), false>::__tuple_leaf<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), void>' [ 0 5 10 97]
'std::__1::allocator<void>' [ 0 5 10]
'std::__1::tuple<base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >' [ 0 5 10]
'std::__1::tuple<base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *>' [ 0 5 10]
'std::__1::__tuple_leaf<0, base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, false>::~__tuple_leaf' [ 0 5 10 100]
'std::__1::__pointer_type_imp::__pointer_type<char, std::__1::allocator<char>, true>' [ 0 5 10 30]
'max_align_t' [ 0]
'std::__1::conditional<true, std::__1::tuple<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>, std::__1::__nat>' [ 0 5 10]
'std::__1::__tuple_leaf<2, bool, false>' [ 0 5 10]
'base::OnceCallback<void (const SkBitmap &)>::OnceCallback' [ 0 6 45]
'aura::client' [ 0 6]
'timeval' [ 0]
'base::Time' [ 0 6]
'std::__1::get<0, base::OnceCallback<SkBitmap ()>, SkBitmap *>' [ 0 5 10]
'base::WeakPtr<ui::ScreenshotGrabber>::operator bool' [ 0 6 38]
'std::__1::remove_reference<void (*&)(base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *)>' [ 0 5 10]
'ui::MakeAsyncCopyRequest' [ 0 4]
'logging::LogSeverity' [ 0 9]
'std::__1::__atomic_base<int, true>::fetch_add' [ 0 5 10 36]
'size_t' [ 0]
'base::TimeDelta' [ 0 6]
'base::WeakPtr<ui::ScreenshotGrabber>::operator*' [ 0 6 38]
'skia::ImageOperations' [ 0 6]
'std::__1::__vector_base<aura::Window *, std::__1::allocator<aura::Window *> >' [ 0 5 10]
'ui::ScreenshotGrabber::TakeScreenshot' [ 0 4 23]
'std::__1::get<2, base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >' [ 0 5 10]
'ptrdiff_t' [ 0]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1>, base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *>::~__tuple_impl' [ 0 5 10 160]
'std::__1::char_traits<char>::eq_int_type' [ 0 5 10 29]
'std::__1::tuple<base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >' [ 0 5 10]
'std::__1::__to_raw_pointer<aura::Window *>' [ 0 5 10]
'gfx::Image' [ 0 5]
'base::internal::InvokeHelper<false, void>::MakeItSo<void (*)(base::OnceCallback<void (const SkBitmap &)>, SkBitmap *), base::OnceCallback<void (const SkBitmap &)>, SkBitmap *>' [ 0 6 16 43]
'std::__1::__atomic_base<int, true>::fetch_sub' [ 0 5 10 36]
'base::internal::Invoker<base::internal::BindState<void (*)(base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *), base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *>, void ()>::RunImpl<void (*)(base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *), std::__1::tuple<base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *>, 0, 1>' [ 0 6 16 277]
'std::__1::__compressed_pair_elem<std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> >, 1, true>' [ 0 5 10]
'std::__1::unique_ptr<viz::CopyOutputRequest, std::__1::default_delete<viz::CopyOutputRequest> >::operator->' [ 0 5 10 97]
'std::__1::__tuple_indices<0>' [ 0 5 10]
'base::internal::WeakPtrBase::WeakPtrBase' [ 0 6 16 29]
'base::internal::FunctorTraits<void (*)(scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, gfx::Image), void>' [ 0 6 16]
'std::__1::__tuple_leaf<0, base::WeakPtr<ui::ScreenshotGrabber>, false>::__tuple_leaf<base::WeakPtr<ui::ScreenshotGrabber>, void>' [ 0 5 10 72]
'std::__1::conditional<false, std::__1::pointer_traits<unsigned char *>::__nat, unsigned char>' [ 0 5 10]
'std::__1::forward<void (&)(scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, gfx::Image)>' [ 0 5 10]
'__uintmax_t' [ 0]
'std::__1::__tuple_leaf<0, scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), false>' [ 0 5 10]
'std::__1::__tuple_leaf<0, base::OnceCallback<SkBitmap ()>, false>' [ 0 5 10]
'scoped_refptr<base::RefCountedMemory>' [ 0]
'std::__1::remove_reference<std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >' [ 0 5 10]
'base::OnceCallback<SkBitmap ()>::~OnceCallback' [ 0 6 33]
'std::__1::iterator_traits<aura::Window **>' [ 0 5 10]
'base::internal::BindState<void (ui::ScreenshotGrabber::*)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>), base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >::BindState<void (ui::ScreenshotGrabber::*)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>), base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char> &, bool &, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >' [ 0 6 16 426]
'std::__1::remove_reference<void (ui::ScreenshotGrabber::*const &)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>)>' [ 0 5 10]
'std::__1::forward<void (ui::ScreenshotGrabber::*)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>)>' [ 0 5 10]
'std::__1::vector<aura::Window *, std::__1::allocator<aura::Window *> >::__annotate_delete' [ 0 5 10 72]
'aura' [ 0]
'scoped_refptr<base::RefCountedMemory>::operator=' [ 0 39]
'base::internal::FunctorTraits<void (*)(base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *), void>::Invoke<void (*)(base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *), base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *>' [ 0 6 16 150]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__move_assign_alloc' [ 0 5 10 87]
'std::__1::__tuple_leaf<3, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> >, false>::__tuple_leaf<base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> >, void>' [ 0 5 10 154]
'double_t' [ 0]
'std::__1::__vector_base<unsigned char, std::__1::allocator<unsigned char> >::__destruct_at_end' [ 0 5 10 77]
'std::__1::__less<unsigned long, unsigned long>::operator()' [ 0 5 10 48]
'std::__1::forward<scoped_refptr<base::RefCountedMemory> *&>' [ 0 5 10]
'base::internal::WeakPtrBase' [ 0 6 16]
'base::internal::Invoker<base::internal::BindState<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), gfx::Image>, scoped_refptr<base::RefCountedMemory> ()>::Run::num_bound_args' [ 0 6 16 169 174]
'base::internal::CallbackBaseCopyable::~CallbackBaseCopyable' [ 0 6 16 38]
'std::__1::allocator_traits<std::__1::allocator<aura::Window *> >::__destroy<aura::Window *>' [ 0 5 10 66]
'std::__1::unique_ptr<ui::ScreenshotGrabber::ScopedCursorHider, std::__1::default_delete<ui::ScreenshotGrabber::ScopedCursorHider> >::operator=' [ 0 5 10 133]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1>, base::OnceCallback<SkBitmap ()>, SkBitmap *>::__tuple_impl<0, 1, base::OnceCallback<SkBitmap ()>, SkBitmap *, base::OnceCallback<SkBitmap ()>, SkBitmap *&>' [ 0 5 10 102]
'base::AtomicRefCount::Increment' [ 0 6 22]
'std::__1::__wrap_iter<aura::Window *const *>::base' [ 0 5 10 46]
'std::__1::__tuple_leaf<1, base::internal::OwnedWrapper<SkBitmap>, false>::__tuple_leaf<base::internal::OwnedWrapper<SkBitmap>, void>' [ 0 5 10 74]
'scoped_refptr<base::RefCountedMemory>::get' [ 0 39]
'base::internal::Unwrap<base::OnceCallback<SkBitmap ()> >' [ 0 6 16]
'std::__1::conditional<false, std::__1::pointer_traits<aura::Window **>::__nat, aura::Window *>' [ 0 5 10]
'base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const SkBitmap &), base::RepeatingCallback<void (gfx::Image)> >::~BindState' [ 0 6 16 152]
'gfx::operator==' [ 0 5]
'tm' [ 0]
'std::__1::remove_reference<std::__1::tuple<base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> > >' [ 0 5 10]
'std::__1::__compressed_pair<ui::ScreenshotGrabber::ScopedCursorHider *, std::__1::default_delete<ui::ScreenshotGrabber::ScopedCursorHider> >::__compressed_pair<ui::ScreenshotGrabber::ScopedCursorHider *, true>' [ 0 5 10 142]
'std::__1::tuple_element<0, std::__1::tuple<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> > >' [ 0 5 10]
'std::__1::__split_buffer<aura::Window *, std::__1::allocator<aura::Window *> &>' [ 0 5 10]
'base::internal::PassingTraits<gfx::Image, false>' [ 0 6 16]
'gfx::NativeView' [ 0 5]
'std::__1::literals::chrono_literals' [ 0 5 10 20]
'base::Owned<SkBitmap>' [ 0 6]
'std::__1::ios_base::rdbuf' [ 0 5 10 20]
'std::__1::default_delete<ui::ScreenshotGrabber::ScopedCursorHider>' [ 0 5 10]
'std::__1::tuple<gfx::Image>::~tuple' [ 0 5 10 29]
'base::Bind<scoped_refptr<base::RefCountedMemory> (*&)(const gfx::Image &), gfx::Image>' [ 0 6]
'std::__1::max<unsigned long, std::__1::__less<unsigned long, unsigned long> >' [ 0 5 10]
'std::__1::remove_reference<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> >' [ 0 5 10]
'std::__1::remove_reference<std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> > &>' [ 0 5 10]
'std::__1::forward<std::__1::tuple<base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > > >' [ 0 5 10]
'std::__1::get<1, base::OnceCallback<SkBitmap ()>, SkBitmap *>' [ 0 5 10]
'base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>::OnceCallback' [ 0 6 88]
'std::__1::allocator_traits<std::__1::allocator<char> >::deallocate' [ 0 5 10 56]
'std::__1::__tuple_leaf<1, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> >, false>' [ 0 5 10]
'uint_least64_t' [ 0]
'std::__1::operator==<aura::Window **, aura::Window **>' [ 0 5 10]
'std::__1::__compressed_pair_elem<viz::CopyOutputResult *, 0, false>::__compressed_pair_elem<viz::CopyOutputResult *, void>' [ 0 5 10 69]
'base::internal::InvokeHelper<false, void>::MakeItSo<void (*const &)(scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, gfx::Image), scoped_refptr<base::RefCountedMemory> (*const &)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, gfx::Image>' [ 0 6 16 43]
'base::RepeatingCallback<SkBitmap ()>::~RepeatingCallback' [ 0 6 38]
'SkScalar' [ 0]
'std::__1::remove_reference<void (*&)(base::OnceCallback<SkBitmap ()>, SkBitmap *)>' [ 0 5 10]
'std::__1::__tuple_leaf<1, scoped_refptr<base::RefCountedMemory> *, false>' [ 0 5 10]
'std::__1::vector<aura::Window *, std::__1::allocator<aura::Window *> >::clear' [ 0 5 10 72]
'std::__1::make_unique<viz::CopyOutputRequest, viz::CopyOutputResult::Format, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)> >' [ 0 5 10]
'std::__1::__wrap_iter<aura::Window **>' [ 0 5 10]
'std::__1::conditional<false, std::__1::tuple<base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >, std::__1::__nat>' [ 0 5 10]
'std::__1::__tuple_leaf<0, base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, false>' [ 0 5 10]
'std::__1::forward<std::__1::basic_string<char> &>' [ 0 5 10]
'base::internal::BindState<void (*)(base::OnceCallback<void (const SkBitmap &)>, SkBitmap *), base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> >::Destroy' [ 0 6 16 180]
'std::__1::tuple<base::RepeatingCallback<void (gfx::Image)>, gfx::Size>::tuple<true, false>' [ 0 5 10 72]
'std::__1::unique_ptr<viz::CopyOutputRequest, std::__1::default_delete<viz::CopyOutputRequest> >' [ 0 5 10]
'aura::WindowObserver::OnWindowVisibilityChanged' [ 0 6 22]
'base::internal::IsNull<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const SkBitmap &)>' [ 0 6 16]
'std::__1::allocator<aura::Window *>::construct<aura::Window *, aura::Window *const &>' [ 0 5 10 37]
'std::__1::tuple<base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >::tuple<base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char> &, bool &, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > , false, false>' [ 0 5 10 212]
'base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> >::PassedWrapper' [ 0 6 16 120]
'std::__1::forward<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const gfx::Size &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>' [ 0 5 10]
'std::__1::__wrap_iter<aura::Window **>::operator++' [ 0 5 10 40]
'base::BindUnwrapTraits<bool>::Unwrap<const bool &>' [ 0 6 30]
'std::__1::__compressed_pair_elem<std::__1::allocator<aura::Window *> &, 1, false>' [ 0 5 10]
'viz::CopyOutputRequest' [ 0 5]
'std::__1::forward<void (*)(base::OnceCallback<void (const SkBitmap &)>, SkBitmap *)>' [ 0 5 10]
'std::__1::__pointer_type_imp::__pointer_type<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> >, false>' [ 0 5 10 30]
'base::RepeatingCallback<void (gfx::Image)>' [ 0 6]
'std::__1::forward<viz::CopyOutputRequest *>' [ 0 5 10]
'std::__1::__compressed_pair_elem<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> *, 0, false>::__compressed_pair_elem<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> *, void>' [ 0 5 10 109]
'base::internal::Invoker<base::internal::BindState<void (*)(scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, gfx::Image), scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> >, void (gfx::Image)>' [ 0 6 16]
'base' [ 0]
'base::BindUnwrapTraits<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > > >::Unwrap<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > > >' [ 0 6 201]
'scoped_refptr<base::RefCountedBytes>' [ 0]
'std::__1::remove_reference<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> *&>' [ 0 5 10]
'std::__1::__compressed_pair_elem<std::__1::default_delete<viz::CopyOutputResult>, 1, true>' [ 0 5 10]
'std::__1::get<0, scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> >' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (*)(base::OnceCallback<void (const SkBitmap &)>, SkBitmap *), base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> >, void ()>' [ 0 6 16]
'base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> >::~OwnedWrapper' [ 0 6 16 70]
'__uint8_t' [ 0]
'std::__1::operator!=<aura::Window **>' [ 0 5 10]
'__pthread_list_t' [ 0]
'std::__1::forward<ui::ScreenshotResult>' [ 0 5 10]
'base::internal::WeakReferenceOwner' [ 0 6 16]
'base::internal::BindState<void (*)(base::OnceCallback<SkBitmap ()>, SkBitmap *), base::OnceCallback<SkBitmap ()>, SkBitmap *>::BindState<void (*)(base::OnceCallback<SkBitmap ()>, SkBitmap *), base::OnceCallback<SkBitmap ()>, SkBitmap *&>' [ 0 6 16 127]
'ui::(anonymous namespace)' [ 0 4]
'std::__1::remove_reference<base::OnceCallback<SkBitmap ()> >' [ 0 5 10]
'std::__1::forward<SkBitmap *>' [ 0 5 10]
'fpos_t' [ 0]
'std::__1::get<2, std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>' [ 0 5 10]
'std::__1::memory_order' [ 0 5 10]
'std::__1::remove_reference<std::__1::tuple<base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > > >' [ 0 5 10]
'base::PostTaskWithTraitsAndReplyWithResult<SkBitmap, const SkBitmap &>' [ 0 6]
'std::__1::forward<std::__1::tuple<base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *> >' [ 0 5 10]
'std::__1::__tuple_leaf<2, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, false>::~__tuple_leaf' [ 0 5 10 156]
'std::__1::addressof<const char>' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (*)(base::OnceCallback<SkBitmap ()>, SkBitmap *), base::OnceCallback<SkBitmap ()>, SkBitmap *>, void ()>' [ 0 6 16]
'std::__1::__vector_base<unsigned char, std::__1::allocator<unsigned char> >::__alloc' [ 0 5 10 77]
'std::__1::remove_reference<std::__1::tuple<base::RepeatingCallback<void (gfx::Image)>, gfx::Size> &>' [ 0 5 10]
'base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const gfx::Size &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), base::RepeatingCallback<void (gfx::Image)>, gfx::Size>::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const gfx::Size &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), const base::RepeatingCallback<void (gfx::Image)> &, const gfx::Size &>' [ 0 6 16 258]
'std::__1::integer_sequence<unsigned long, 0, 1, 2, 3>' [ 0 5 10]
'base::time_internal::TimeBase<base::TimeTicks>::operator-' [ 0 6 21 48]
'base::OnceCallback<void (const SkBitmap &)>::Run' [ 0 6 45]
'base::internal::Unwrap<const base::WeakPtr<ui::ScreenshotGrabber> &>' [ 0 6 16]
'std::__1::tuple_element<0, std::__1::__tuple_types<SkBitmap, gfx::Size> >' [ 0 5 10]
'std::__1::tuple<base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> >::tuple<base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> , false, false>' [ 0 5 10 103]
'std::__1::__size_type<std::__1::allocator<char>, long, true>' [ 0 5 10]
'std::__1::__tuple_leaf<3, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> >, false>::~__tuple_leaf' [ 0 5 10 154]
'std::__1::forward<const std::__1::tuple<base::RepeatingCallback<void (gfx::Image)> > &>' [ 0 5 10]
'base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> >::Take' [ 0 6 16 120]
'std::__1::tuple_element<2, std::__1::tuple<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int> >' [ 0 5 10]
'uint_least32_t' [ 0]
'std::__1::__vector_base<unsigned char, std::__1::allocator<unsigned char> >::capacity' [ 0 5 10 77]
'base::BindUnwrapTraits<base::RepeatingCallback<void (gfx::Image)> >' [ 0 6]
'SkRect' [ 0]
'base::internal::OwnedWrapper<SkBitmap>' [ 0 6 16]
'std::__1::remove_reference<scoped_refptr<base::RefCountedMemory> (*&)(const gfx::Image &)>' [ 0 5 10]
'std::__1::__tuple_types<>' [ 0 5 10]
'time_t' [ 0]
'std::__1::enable_if_t<FunctorTraits<void (*)(OnceCallback<void (scoped_refptr<RefCountedMemory>)>, scoped_refptr<RefCountedMemory> *)>::is_nullable, bool>' [ 0 5 10]
'std::__1::__compressed_pair<unsigned char *, std::__1::allocator<unsigned char> >' [ 0 5 10]
'base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>::~OnceCallback' [ 0 6 88]
'std::__1::remove_reference<base::RepeatingCallback<void (const SkBitmap &)> &>' [ 0 5 10]
'base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>::~OnceCallback' [ 0 6 122]
'base::internal::OwnedWrapper<SkBitmap>::OwnedWrapper' [ 0 6 16 40]
'std::__1::max<unsigned long>' [ 0 5 10]
'base::BindUnwrapTraits<base::OnceCallback<SkBitmap ()> >::Unwrap<base::OnceCallback<SkBitmap ()> >' [ 0 6 58]
'std::__1::__compressed_pair<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> *, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >' [ 0 5 10]
'std::__1::__unwrap_iter<aura::Window **>' [ 0 5 10]
'std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >::~unique_ptr' [ 0 5 10 95]
'aura::Window::bounds' [ 0 6 14]
'base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)>::~RepeatingCallback' [ 0 6 71]
'std::__1::__tuple_leaf<1, base::internal::OwnedWrapper<SkBitmap>, false>' [ 0 5 10]
'std::__1::forward<const bool &>' [ 0 5 10]
'std::__1::vector<aura::Window *, std::__1::allocator<aura::Window *> >::size' [ 0 5 10 72]
'std::__1::remove_reference<base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &>' [ 0 5 10]
'std::__1::forward<base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >' [ 0 5 10]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1, 2, 3>, base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >::~__tuple_impl' [ 0 5 10 258]
'base::BindUnwrapTraits<gfx::Size>' [ 0 6]
'base::TimeDelta::FromMicroseconds' [ 0 6 17]
'base::internal::Invoker<base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const SkBitmap &), base::RepeatingCallback<void (gfx::Image)> >, void (const SkBitmap &)>::RunImpl<void (*const &)(const base::RepeatingCallback<void (gfx::Image)> &, const SkBitmap &), const std::__1::tuple<base::RepeatingCallback<void (gfx::Image)> > &, 0>' [ 0 6 16 202]
'std::__1::remove_reference<gfx::Image>' [ 0 5 10]
'base::internal::Unwrap<base::OnceCallback<void (const SkBitmap &)> >' [ 0 6 16]
'gfx::operator!=' [ 0 5]
'base::internal::OptionalStorage<gfx::Rect, true, true>' [ 0 6 16]
'std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >' [ 0 5 10]
'std::__1::float_round_style' [ 0 5 10]
'std::__1::__tuple_leaf<0, base::RepeatingCallback<void (gfx::Image)>, false>' [ 0 5 10]
'base::internal::ReturnAsParamAdapter<SkBitmap>' [ 0 6 16]
'logging::LOG_DCHECK' [ 0 9]
'gfx::ImageSkia' [ 0 5]
'ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>::windows' [ 0 4 63]
'std::__1::__pointer_type_imp::__pointer_type<unsigned char, std::__1::allocator<unsigned char>, true>' [ 0 5 10 30]
'base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>::OnceCallback' [ 0 6 66]
'std::__1::__pointer_type_imp::__pointer_type<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult>, false>' [ 0 5 10 30]
'size_type' [ 0]
'base::internal::IsNull<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>' [ 0 6 16]
'base::internal::Invoker<base::internal::BindState<SkBitmap (*)(const SkBitmap &, const gfx::Size &), SkBitmap, gfx::Size>, SkBitmap ()>::RunImpl<SkBitmap (*const &)(const SkBitmap &, const gfx::Size &), const std::__1::tuple<SkBitmap, gfx::Size> &, 0, 1>::is_method' [ 0 6 16 137 256]
'base::internal::Unwrap<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > > >' [ 0 6 16]
'std::__1::remove_reference<const std::__1::tuple<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> > &>' [ 0 5 10]
'gfx::PointF' [ 0 5]
'std::__1::__tuple_types<SkBitmap, gfx::Size>' [ 0 5 10]
'SkBitmap::isNull' [ 0 10]
'std::__1::move<std::__1::tuple<base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> > &>' [ 0 5 10]
'std::__1::make_unique<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>>' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), base::RepeatingCallback<void (gfx::Image)> >, void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>::RunImpl<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), std::__1::tuple<base::RepeatingCallback<void (gfx::Image)> >, 0>' [ 0 6 16 356]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::size' [ 0 5 10 87]
'base::time_internal::TimeBase<base::TimeTicks>' [ 0 6 21]
'std::__1::__wrap_iter<aura::Window *const *>::__wrap_iter' [ 0 5 10 46]
'base::WeakPtr<ui::ScreenshotGrabber>::get' [ 0 6 38]
'std::__1::remove_reference<base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()> >' [ 0 5 10]
'gfx::RectF' [ 0 5]
'base::subtle::StartRefCountFromZeroTag' [ 0 6 14]
'base::internal::Invoker<base::internal::BindState<void (*)(std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, const gfx::Rect &, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>, void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>' [ 0 6 16]
'base::RefCountedThreadSafe<base::internal::BindStateBase, base::internal::BindStateBaseRefCountTraits>::~RefCountedThreadSafe' [ 0 6 104]
'SkImageInfo' [ 0]
'std::__1::conditional<false, std::__1::tuple<base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >, std::__1::__nat>' [ 0 5 10]
'std::__1::tuple<base::RepeatingCallback<void (gfx::Image)> >::~tuple' [ 0 5 10 62]
'std::__1::swap<aura::Window **>' [ 0 5 10]
'base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), base::RepeatingCallback<void (gfx::Image)> >::Destroy' [ 0 6 16 229]
'std::__1::__tuple_leaf<0, base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, false>' [ 0 5 10]
'std::__1::forward<gfx::Image>' [ 0 5 10]
'std::__1::forward<scoped_refptr<base::RefCountedMemory> >' [ 0 5 10]
'base::CallbackCancellationTraits<void (ui::ScreenshotGrabber::*)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>), std::__1::tuple<base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >, void>::IsCancelled<base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >' [ 0 6 456]
'base::internal::IsNull<void (*)(scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, gfx::Image)>' [ 0 6 16]
'base::internal::FunctorTraits<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), void>' [ 0 6 16]
'std::__1::__tuple_types<base::OnceCallback<SkBitmap ()>, SkBitmap *>' [ 0 5 10]
'std::__1::enable_if<true, aura::Window **>' [ 0 5 10]
'SkPixmap' [ 0]
'std::__1::basic_ios<char, std::__1::char_traits<char> >::rdbuf' [ 0 5 10 57]
'base::OnceCallback<SkBitmap ()>::Run' [ 0 6 33]
'logging::LogMessageVoidify' [ 0 9]
'base::BindUnwrapTraits<bool>' [ 0 6]
'std::__1::forward<const gfx::Image &>' [ 0 5 10]
'std::__1::tuple<base::OnceCallback<SkBitmap ()>, SkBitmap *>::~tuple' [ 0 5 10 62]
'uint_least16_t' [ 0]
'std::__1::streamsize' [ 0 5 10]
'base::internal::FunctorTraits<void (*)(base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *), void>' [ 0 6 16]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0>, gfx::Image>::__tuple_impl<0, gfx::Image, gfx::Image>' [ 0 5 10 66]
'base::internal::BindState<void (*)(scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, gfx::Image), scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> >::~BindState' [ 0 6 16 326]
'std::__1::remove_reference<base::RefCountedMemory *&>' [ 0 5 10]
'std::__1::__tuple_leaf<0, SkBitmap, false>::~__tuple_leaf' [ 0 5 10 44]
'base::internal::BindState<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), gfx::Image>::~BindState' [ 0 6 16 102]
'std::__1::tuple_element<0, std::__1::__tuple_types<base::RepeatingCallback<void (gfx::Image)> > >' [ 0 5 10]
'base::internal::Unwrap<base::RepeatingCallback<void (gfx::Image)> >' [ 0 6 16]
'std::__1::enable_if_t<FunctorTraits<void (*)(scoped_refptr<RefCountedMemory> (*)(const Image &), const RepeatingCallback<void (scoped_refptr<RefCountedMemory>)> &, Image)>::is_nullable, bool>' [ 0 5 10]
'std::__1::__pad_and_output<char, std::__1::char_traits<char> >' [ 0 5 10]
'base::WeakPtr<ui::ScreenshotGrabber>::~WeakPtr' [ 0 6 38]
'base::subtle::RefCountedThreadSafeBase::AddRef' [ 0 6 14 40]
'long double' [ 0]
'long long int' [ 0]
'base::Optional<gfx::Rect>' [ 0 6]
'std::__1::tuple<base::RepeatingCallback<void (gfx::Image)> >' [ 0 5 10]
'std::__1::remove_reference<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &)>' [ 0 5 10]
'std::__1::vector<aura::Window *, std::__1::allocator<aura::Window *> >::data' [ 0 5 10 72]
'base::BindUnwrapTraits<base::WeakPtr<ui::ScreenshotGrabber> >' [ 0 6]
'std::__1::remove_reference<aura::Window *const &>' [ 0 5 10]
'base::internal::FunctorTraits<void (ui::ScreenshotGrabber::*)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>), void>::Invoke<void (ui::ScreenshotGrabber::*)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>), const base::WeakPtr<ui::ScreenshotGrabber> &, const std::__1::basic_string<char> &, const bool &, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory> >' [ 0 6 16 241]
'base::internal::IsNull<void (*)(base::OnceCallback<void (const SkBitmap &)>, SkBitmap *)>' [ 0 6 16]
'std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >::reset' [ 0 5 10 176]
'scoped_refptr<base::internal::WeakReference::Flag>' [ 0]
'sk_sp<SkPixelRef>' [ 0]
'base::Bind<void (&)(scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, gfx::Image), scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &>' [ 0 6]
'base::BindUnwrapTraits<gfx::Size>::Unwrap<gfx::Size>' [ 0 6 35]
'std::__1::__vector_base<aura::Window *, std::__1::allocator<aura::Window *> >::__end_cap' [ 0 5 10 79]
'std::__1::remove_reference<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>' [ 0 5 10]
'base::internal::OptionalBase<base::UnguessableToken>' [ 0 6 16]
'std::__1::tuple<gfx::Image>' [ 0 5 10]
'std::__1::move<SkBitmap &>' [ 0 5 10]
'std::__1::tuple_element<1, std::__1::__tuple_types<base::OnceCallback<SkBitmap ()>, SkBitmap *> >' [ 0 5 10]
'base::BindUnwrapTraits<base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)> >::Unwrap<base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)> >' [ 0 6 147]
'std::__1::__tuple_leaf<2, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, false>' [ 0 5 10]
'logging::LogMessage' [ 0 9]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1>, base::RepeatingCallback<void (gfx::Image)>, gfx::Size>::__tuple_impl<0, 1, base::RepeatingCallback<void (gfx::Image)>, gfx::Size, const base::RepeatingCallback<void (gfx::Image)> &, const gfx::Size &>' [ 0 5 10 112]
'base::BindUnwrapTraits<base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >::Unwrap' [ 0 6 145]
'base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>::~OnceCallback' [ 0 6 66]
'std::__1::move<std::__1::tuple<base::RepeatingCallback<void (gfx::Image)>, gfx::Size> &>' [ 0 5 10]
'ui::(anonymous namespace)::EncodeImageAndScheduleCallback' [ 0 4 27]
'base::RepeatingCallback<void (gfx::Image)>::~RepeatingCallback' [ 0 6 44]
'int_least8_t' [ 0]
'std::__1::allocator<unsigned char>' [ 0 5 10]
'ui::GrabViewSnapshot' [ 0 4]
'base::WeakPtrFactory<ui::ScreenshotGrabber>::GetWeakPtr' [ 0 6 45]
'WTF' [ 0]
'base::BindRepeating<void (&)(scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, gfx::Image), scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &>' [ 0 6]
'std::__1::move<base::RepeatingCallback<void (const SkBitmap &)> &>' [ 0 5 10]
'base::time_internal::TimeBase<base::Time>' [ 0 6 21]
'std::__1::__tuple_leaf<1, base::internal::OwnedWrapper<SkBitmap>, false>::~__tuple_leaf' [ 0 5 10 74]
'base::subtle::StartRefCountFromOneTag' [ 0 6 14]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__get_short_size' [ 0 5 10 87]
'std::__1::tuple<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>' [ 0 5 10]
'std::__1::move<aura::Window **&>' [ 0 5 10]
'base::internal::OptionalStorageBase<base::UnguessableToken, true>' [ 0 6 16]
'float' [ 0]
'std::__1::remove_reference<const std::__1::tuple<gfx::Image> &>' [ 0 5 10]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1>, base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >::~__tuple_impl' [ 0 5 10 194]
'std::__1::move<std::__1::unique_ptr<viz::CopyOutputRequest, std::__1::default_delete<viz::CopyOutputRequest> > &>' [ 0 5 10]
'base::RefCountedThreadSafe<base::RefCountedMemory, base::DefaultRefCountedThreadSafeTraits<base::RefCountedMemory> >::DeleteInternal<base::RefCountedMemory>' [ 0 6 118]
'gfx::internal' [ 0 5]
'ldiv_t' [ 0]
'base::internal::OptionalStorageBase<gfx::Rect, true>::Init<const gfx::Rect &>' [ 0 6 16 54]
'std::__1::integer_sequence<unsigned long, 0>' [ 0 5 10]
'base::internal::ReplyAdapter<scoped_refptr<base::RefCountedMemory>, scoped_refptr<base::RefCountedMemory> >' [ 0 6 16]
'wctype_t' [ 0]
'std::__1::remove_reference<viz::CopyOutputRequest *>' [ 0 5 10]
'std::__1::remove_reference<base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)> >' [ 0 5 10]
'std::__1::__tuple_leaf<0, SkBitmap, false>' [ 0 5 10]
'std::__1::__tuple_leaf<1, base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)>, false>' [ 0 5 10]
'std::__1::move<base::RepeatingCallback<SkBitmap ()> &>' [ 0 5 10]
'base::internal::InvokeHelper<false, void>::MakeItSo<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), base::RepeatingCallback<void (gfx::Image)>, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> > >' [ 0 6 16 43]
'std::__1::forward<const base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > &>' [ 0 5 10]
'operator==<SkPixelRef>' [ 0]
'base::internal::IsNull<void (*)(base::OnceCallback<SkBitmap ()>, SkBitmap *)>' [ 0 6 16]
'std::__1::remove_reference<std::__1::tuple<base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *> >' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (*)(scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, gfx::Image), scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> >, void (gfx::Image)>::Run' [ 0 6 16 370]
'ui::GrabWindowSnapshotAura' [ 0 4]
'base::TimeDelta::FromMilliseconds' [ 0 6 17]
'std::__1::conditional<true, std::__1::tuple<gfx::Image>, std::__1::__nat>' [ 0 5 10]
'base::RefCountedThreadSafe<base::RefCountedMemory, base::DefaultRefCountedThreadSafeTraits<base::RefCountedMemory> >' [ 0 6]
'std::__1::__tuple_indices<0, 1, 2, 3>' [ 0 5 10]
'std::__1::remove_reference<SkBitmap *&>' [ 0 5 10]
'std::__1::conditional<false, std::__1::tuple<base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> >, std::__1::__nat>' [ 0 5 10]
'std::__1::remove_reference<std::__1::tuple<base::RepeatingCallback<void (gfx::Image)>, gfx::Size> >' [ 0 5 10]
'std::__1::tuple_element<3, std::__1::tuple<base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > > >' [ 0 5 10]
'ui::(anonymous namespace)::kScreenshotMinimumIntervalInMS' [ 0 4 27]
'scoped_refptr<base::RefCountedMemory>::~scoped_refptr' [ 0 39]
'std::__1::__wrap_iter<aura::Window **>::__wrap_iter' [ 0 5 10 40]
'std::__1::__tuple_types<base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >' [ 0 5 10]
'std::__1::__add_lvalue_reference_impl<base::SequenceCheckerImpl::Core, true>' [ 0 5 10]
'base::internal::Unwrap<const gfx::Size &>' [ 0 6 16]
'base::BindUnwrapTraits<gfx::Size>::Unwrap<const gfx::Size &>' [ 0 6 35]
'std::__1::forward<std::__1::tuple<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int> >' [ 0 5 10]
'std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >::release' [ 0 5 10 176]
'std::__1::tuple<base::RepeatingCallback<void (gfx::Image)> >::tuple<true, false>' [ 0 5 10 62]
'uint8_t' [ 0]
'std::__1::remove_reference<void (*)(base::OnceCallback<SkBitmap ()>, SkBitmap *)>' [ 0 5 10]
'base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>::OnceCallback' [ 0 6 122]
'std::__1::remove_reference<base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)> &>' [ 0 5 10]
'base::internal::BindStateBase' [ 0 6 16]
'__gnuc_va_list' [ 0]
'std::__1::__compressed_pair_elem<std::__1::allocator<aura::Window *> &, 1, false>::__get' [ 0 5 10 83]
'ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>::Contains' [ 0 4 63]
'base::internal::BindState<void (*)(base::OnceCallback<SkBitmap ()>, SkBitmap *), base::OnceCallback<SkBitmap ()>, SkBitmap *>::Destroy' [ 0 6 16 127]
'std::__1::enable_if_t<FunctorTraits<SkBitmap (*)(const SkBitmap &, const Size &)>::is_nullable, bool>' [ 0 5 10]
'base::Bind<void (ui::ScreenshotGrabber::*)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>), base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char> &, bool &, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >' [ 0 6]
'std::__1::remove_reference<void (*const &)(const base::RepeatingCallback<void (gfx::Image)> &, const SkBitmap &)>' [ 0 5 10]
'std::__1::add_lvalue_reference<ui::ScreenshotGrabber::ScopedCursorHider>' [ 0 5 10]
'base::internal::Unwrap<const gfx::Image &>' [ 0 6 16]
'uint_fast64_t' [ 0]
'std::__1::__pointer_type<ui::ScreenshotGrabber::ScopedCursorHider, std::__1::default_delete<ui::ScreenshotGrabber::ScopedCursorHider> >' [ 0 5 10]
'ui' [ 0]
'base::Callback<void (scoped_refptr<base::RefCountedMemory>)>' [ 0 6]
'std::__1::__compressed_pair_elem<std::__1::default_delete<viz::CopyOutputResult>, 1, true>::__compressed_pair_elem<std::__1::default_delete<viz::CopyOutputResult>, void>' [ 0 5 10 92]
'base::internal::FunctorTraits<void (*)(base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory> *), void>' [ 0 6 16]
'base::internal::Unwrap<gfx::Size>' [ 0 6 16]
'std::__1::tuple_element<1, std::__1::__tuple_types<base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > > >' [ 0 5 10]
'std::__1::remove_reference<void (*const &)(scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, gfx::Image)>' [ 0 5 10]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1>, base::RepeatingCallback<void (gfx::Image)>, gfx::Size>' [ 0 5 10]
'std::__1::enable_if_t<FunctorTraits<void (*)(OnceCallback<void (const SkBitmap &)>, SkBitmap *)>::is_nullable, bool>' [ 0 5 10]
'std::__1::find<std::__1::__wrap_iter<aura::Window **>, aura::Window *>' [ 0 5 10]
'skia' [ 0]
'div_t' [ 0]
'base::internal::MoveConstructible<true>' [ 0 6 16]
'logging::LogMessage::stream' [ 0 9 21]
'std::__1::remove_reference<scoped_refptr<base::RefCountedMemory> *&>' [ 0 5 10]
'std::__1::remove_reference<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const SkBitmap &)>' [ 0 5 10]
'std::__1::forward<const std::__1::tuple<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> > &>' [ 0 5 10]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1>, SkBitmap, gfx::Size>::__tuple_impl<0, 1, SkBitmap, gfx::Size, const SkBitmap &, const gfx::Size &>' [ 0 5 10 78]
'base::internal::Invoker<base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const gfx::Size &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), base::RepeatingCallback<void (gfx::Image)>, gfx::Size>, void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>::RunImpl<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const gfx::Size &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), std::__1::tuple<base::RepeatingCallback<void (gfx::Image)>, gfx::Size>, 0, 1>::is_weak_call' [ 0 6 16 385 648]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__is_long' [ 0 5 10 87]
'std::__1::enable_if_t<FunctorTraits<void (*)(OnceCallback<scoped_refptr<RefCountedMemory> ()>, scoped_refptr<RefCountedMemory> *)>::is_nullable, bool>' [ 0 5 10]
'base::RepeatingCallback<void (const SkBitmap &)>' [ 0 6]
'std::__1::forward<std::__1::tuple<base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> > >' [ 0 5 10]
'std::__1::remove_reference<base::OnceCallback<void (const SkBitmap &)> &>' [ 0 5 10]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1>, base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >' [ 0 5 10]
'base::WeakPtr<ui::ScreenshotGrabber>' [ 0 6]
'base::Callback<MakeUnboundRunType<void (&)(scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, gfx::Image), scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &> >' [ 0 6]
'base::subtle::RefCountedThreadSafeBase::AddRefImpl' [ 0 6 14 40]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1>, base::RepeatingCallback<void (gfx::Image)>, gfx::Size>::~__tuple_impl' [ 0 5 10 112]
'scoped_refptr<gfx::internal::ImageStorage>' [ 0]
'std::__1::tuple_element<0, std::__1::tuple<base::RepeatingCallback<void (gfx::Image)>, gfx::Size> >' [ 0 5 10]
'ui::ScreenshotGrabber::ScopedCursorHider::~ScopedCursorHider' [ 0 4 23 42]
'base::internal::BindState<void (*)(base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory> *), base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >::BindState<void (*)(base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory> *), base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >' [ 0 6 16 281]
'std::__1::move<std::__1::tuple<base::RepeatingCallback<void (gfx::Image)> > &>' [ 0 5 10]
'std::__1::enable_if<true, bool>' [ 0 5 10]
'__pthread_mutex_s' [ 0]
'std::__1::__add_lvalue_reference_impl<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, true>' [ 0 5 10]
'std::__1::get<1, base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >' [ 0 5 10]
'std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >::~vector' [ 0 5 10 70]
'std::__1::operator==<aura::Window *const *, aura::Window *const *>' [ 0 5 10]
'ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>::Add' [ 0 4 63]
'std::__1::forward<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > > >' [ 0 5 10]
'aura::WindowObserver::OnWindowRemovingFromRootWindow' [ 0 6 22]
'std::__1::unique_ptr<base::SequenceCheckerImpl::Core, std::__1::default_delete<base::SequenceCheckerImpl::Core> >' [ 0 5 10]
'base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const gfx::Size &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), base::RepeatingCallback<void (gfx::Image)>, gfx::Size>' [ 0 6 16]
'std::__1::tuple_element<1, std::__1::__tuple_types<base::RepeatingCallback<void (gfx::Image)>, gfx::Size> >' [ 0 5 10]
'std::__1::forward<viz::CopyOutputRequest *&>' [ 0 5 10]
'std::__1::tuple_element<2, std::__1::tuple<base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > > >' [ 0 5 10]
'std::__1::remove_reference<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > > &>' [ 0 5 10]
'base::WeakPtrFactory<ui::ScreenshotGrabber>::WeakPtrFactory' [ 0 6 45]
'std::__1::remove_reference<const SkBitmap &>' [ 0 5 10]
'std::__1::allocator_traits<std::__1::allocator<unsigned char> >::__destroy<unsigned char>' [ 0 5 10 65]
'std::__1::allocator_traits<std::__1::allocator<unsigned char> >' [ 0 5 10]
'std::__1::remove_reference<const std::__1::basic_string<char> &>' [ 0 5 10]
'base::SequenceChecker' [ 0 6]
'base::internal::BindState<void (*)(base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *), base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *>::~BindState' [ 0 6 16 243]
'base::subtle::AdoptRefTag' [ 0 6 14]
'std::__1::__tuple_leaf<0, base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, false>::__tuple_leaf<base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, void>' [ 0 5 10 100]
'std::__1::__vector_base<aura::Window *, std::__1::allocator<aura::Window *> >::__vector_base' [ 0 5 10 79]
'base::Bind<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const SkBitmap &), const base::RepeatingCallback<void (gfx::Image)> &>' [ 0 6]
'base::BindUnwrapTraits<base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >' [ 0 6]
'std::__1::__compressed_pair_elem<std::__1::default_delete<ui::ScreenshotGrabber::ScopedCursorHider>, 1, true>' [ 0 5 10]
'uint_fast32_t' [ 0]
'std::__1::tuple_element<1, std::__1::tuple<SkBitmap, gfx::Size> >' [ 0 5 10]
'std::__1::__tuple_leaf<1, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> >, false>::__tuple_leaf<base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> >, void>' [ 0 5 10 104]
'wctrans_t' [ 0]
'std::__1::remove_reference<viz::CopyOutputRequest *&>' [ 0 5 10]
'base::BindUnwrapTraits<scoped_refptr<base::RefCountedMemory> *>' [ 0 6]
'std::__1::__tuple_leaf<0, std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, false>::~__tuple_leaf' [ 0 5 10 210]
'base::internal::FunctorTraits<void (*)(base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory> *), void>::Invoke<void (*)(base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory> *), base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory> *>' [ 0 6 16 154]
'SkMatrix' [ 0]
'base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const SkBitmap &), base::RepeatingCallback<void (gfx::Image)> >::Destroy' [ 0 6 16 152]
'base::internal::Unwrap<base::internal::OwnedWrapper<SkBitmap> >' [ 0 6 16]
'base::internal::OwnedWrapper<SkBitmap>::~OwnedWrapper' [ 0 6 16 40]
'signed char' [ 0]
'base::Callback<scoped_refptr<base::RefCountedMemory> ()>' [ 0 6]
'base::internal::ApplyCancellationTraits<base::internal::BindState<void (ui::ScreenshotGrabber::*)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>), base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > > >::num_bound_args' [ 0 6 16 468]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__zero' [ 0 5 10 87]
'scoped_refptr<base::internal::BindStateBase>' [ 0]
'std::__1::tuple<SkBitmap, gfx::Size>::tuple<true, false>' [ 0 5 10 38]
'ui::GrabWindowSnapshotAsyncPNGCallback' [ 0 4]
'std::__1::ios_base::flags' [ 0 5 10 20]
'std::__1::get<1, scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> >' [ 0 5 10]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0>, base::RepeatingCallback<void (gfx::Image)> >::~__tuple_impl' [ 0 5 10 99]
'base::internal::Invoker<base::internal::BindState<SkBitmap (*)(const SkBitmap &, const gfx::Size &), SkBitmap, gfx::Size>, SkBitmap ()>' [ 0 6 16]
'std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> >::operator()' [ 0 5 10 90]
'std::__1::remove_reference<gfx::Rect>' [ 0 5 10]
'base::BindUnwrapTraits<base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()> >::Unwrap<base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()> >' [ 0 6 87]
'mbstate_t' [ 0]
'std::__1::remove_reference<const std::__1::tuple<base::RepeatingCallback<void (gfx::Image)> > &>' [ 0 5 10]
'std::__1::tuple<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>::tuple<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, const gfx::Rect &, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int, false, false>' [ 0 5 10 331]
'std::__1::get<0, base::RepeatingCallback<void (gfx::Image)>, gfx::Size>' [ 0 5 10]
'std::__1::vector<aura::Window *, std::__1::allocator<aura::Window *> >::begin' [ 0 5 10 72]
'std::__1::tuple_element<1, std::__1::__tuple_types<base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *> >' [ 0 5 10]
'std::__1::get<3, base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >' [ 0 5 10]
'std::__1::forward<base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)> >' [ 0 5 10]
'std::__1::__atomic_base<int, false>::load' [ 0 5 10 37]
'std::__1::remove_reference<std::__1::tuple<base::RepeatingCallback<void (gfx::Image)> > &>' [ 0 5 10]
'__compar_fn_t' [ 0]
'base::internal::InvokeHelper<true, void>' [ 0 6 16]
'base::internal::PassingTraitsType<const SkBitmap &>' [ 0 6 16]
'base::internal::Unwrap<const bool &>' [ 0 6 16]
'base::BindUnwrapTraits<int>::Unwrap<int>' [ 0 6 29]
'base::Callback<void (const SkBitmap &)>' [ 0 6]
'std::__1::tuple<base::OnceCallback<SkBitmap ()>, SkBitmap *>' [ 0 5 10]
'std::__1::remove_reference<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> &>' [ 0 5 10]
'std::__1::move<base::RefCountedMemory *&>' [ 0 5 10]
'std::__1::remove_reference<base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >' [ 0 5 10]
'base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const gfx::Size &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), base::RepeatingCallback<void (gfx::Image)>, gfx::Size>::~BindState' [ 0 6 16 258]
'InvokeFuncStorage' [ 0]
'base::time_internal::TimeBase<base::TimeTicks>::TimeBase' [ 0 6 21 48]
'base::internal::BindState<void (*)(base::OnceCallback<void (const SkBitmap &)>, SkBitmap *), base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> >' [ 0 6 16]
'std::__1::tuple<base::OnceCallback<SkBitmap ()>, SkBitmap *>::tuple<base::OnceCallback<SkBitmap ()>, SkBitmap *&, false, false>' [ 0 5 10 62]
'base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>::~OnceCallback' [ 0 6 62]
'base::BindUnwrapTraits<base::OnceCallback<void (const SkBitmap &)> >' [ 0 6]
'std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >::ostreambuf_iterator' [ 0 5 10 67]
'aura::WindowObserver::OnWillRemoveWindow' [ 0 6 22]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1>, SkBitmap, gfx::Size>' [ 0 5 10]
'base::OnceCallback<void (const SkBitmap &)>::~OnceCallback' [ 0 6 45]
'scoped_refptr<base::RefCountedMemory>::swap' [ 0 39]
'base::RepeatingCallback<void (const SkBitmap &)>::~RepeatingCallback' [ 0 6 50]
'ui::(anonymous namespace)::OnFrameScalingFinished' [ 0 4 27]
'base::internal::Invoker<base::internal::BindState<void (*)(base::OnceCallback<void (const SkBitmap &)>, SkBitmap *), base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> >, void ()>::RunOnce::num_bound_args' [ 0 6 16 214 223]
'std::__1::conditional<false, std::__1::pointer_traits<char *>::__nat, char>' [ 0 5 10]
'int' [ 0]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1, 2, 3>, base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >::__tuple_impl<0, 1, 2, 3, base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > , base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char> &, bool &, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >' [ 0 5 10 258]
'std::__1::tuple_element<1, std::__1::tuple<base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > > >' [ 0 5 10]
'std::__1::forward<scoped_refptr<base::RefCountedMemory> (*&)(const gfx::Image &)>' [ 0 5 10]
'base::BindUnwrapTraits<gfx::Rect>' [ 0 6]
'std::__1::move<base::OnceCallback<void (const SkBitmap &)> &>' [ 0 5 10]
'std::__1::remove_reference<void (*)(base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory> *)>' [ 0 5 10]
'std::__1::__tuple_leaf<0, std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, false>' [ 0 5 10]
'__builtin_va_list' [ 0]
'std::__1::__tuple_leaf<0, base::RepeatingCallback<void (gfx::Image)>, false>::__tuple_leaf<const base::RepeatingCallback<void (gfx::Image)> &, void>' [ 0 5 10 78]
'std::__1::__pointer_type_imp::__pointer_type<viz::CopyOutputRequest, std::__1::default_delete<viz::CopyOutputRequest>, false>' [ 0 5 10 30]
'std::__1::integer_sequence<unsigned long, 0, 1>' [ 0 5 10]
'base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), base::RepeatingCallback<void (gfx::Image)> >::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), const base::RepeatingCallback<void (gfx::Image)> &>' [ 0 6 16 229]
'ui::ScreenshotGrabber::~ScreenshotGrabber' [ 0 4 23]
'std::__1::__size_type<std::__1::allocator<unsigned char>, long, true>' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (*)(base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory> *), base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >, void ()>::RunImpl<void (*)(base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory> *), std::__1::tuple<base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >, 0, 1>' [ 0 6 16 315]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__get_long_pointer' [ 0 5 10 87]
'std::__1::tuple_element<0, std::__1::__tuple_types<base::OnceCallback<SkBitmap ()>, SkBitmap *> >' [ 0 5 10]
'base::internal::IsNull<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const gfx::Size &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>' [ 0 6 16]
'ui::GrabWindowSnapshotAsyncAura' [ 0 4]
'base::BindOnce<void (*)(base::OnceCallback<SkBitmap ()>, SkBitmap *), base::OnceCallback<SkBitmap ()>, SkBitmap *&>' [ 0 6]
'std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >::operator->' [ 0 5 10 95]
'std::__1::__tuple_types<base::RepeatingCallback<void (gfx::Image)> >' [ 0 5 10]
'gfx::Size::height' [ 0 5 11]
'std::__1::forward<const std::__1::basic_string<char> &>' [ 0 5 10]
'uint_fast16_t' [ 0]
'std::__1::forward<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> *&>' [ 0 5 10]
'std::__1::tuple_element<3, std::__1::__tuple_types<base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > > >' [ 0 5 10]
'base::internal::FunctorTraits<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const SkBitmap &), void>::Invoke<void (*const &)(const base::RepeatingCallback<void (gfx::Image)> &, const SkBitmap &), const base::RepeatingCallback<void (gfx::Image)> &, const SkBitmap &>' [ 0 6 16 117]
'std::__1::__libcpp_allocate' [ 0 5 10]
'std::__1::move<gfx::Image &>' [ 0 5 10]
'base::RepeatingCallback<scoped_refptr<base::RefCountedMemory> ()>' [ 0 6]
'gfx::Vector2dF' [ 0 5]
'std::__1::remove_reference<viz::CopyOutputResult *>' [ 0 5 10]
'std::__1::move<void (*&)(base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory> *)>' [ 0 5 10]
'viz::CopyOutputRequest::set_area' [ 0 5 24]
'std::__1::__compressed_pair<viz::CopyOutputRequest *, std::__1::default_delete<viz::CopyOutputRequest> >::__compressed_pair<viz::CopyOutputRequest *, std::__1::default_delete<viz::CopyOutputRequest> >' [ 0 5 10 106]
'base::internal::Invoker<base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const SkBitmap &), base::RepeatingCallback<void (gfx::Image)> >, void (const SkBitmap &)>::RunImpl<void (*const &)(const base::RepeatingCallback<void (gfx::Image)> &, const SkBitmap &), const std::__1::tuple<base::RepeatingCallback<void (gfx::Image)> > &, 0>::is_method' [ 0 6 16 202 371]
'ui::(anonymous namespace)::EncodeImageAsPNG' [ 0 4 27]
'std::__1::__tuple_types<base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> >' [ 0 5 10]
'base::internal::ApplyCancellationTraitsImpl<void (ui::ScreenshotGrabber::*)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>), std::__1::tuple<base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >, 0, 1, 2, 3>' [ 0 6 16]
'std::__1::allocator_traits<std::__1::allocator<char> >' [ 0 5 10]
'std::__1::swap<base::RefCountedMemory *>' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (*)(base::OnceCallback<SkBitmap ()>, SkBitmap *), base::OnceCallback<SkBitmap ()>, SkBitmap *>, void ()>::RunImpl<void (*)(base::OnceCallback<SkBitmap ()>, SkBitmap *), std::__1::tuple<base::OnceCallback<SkBitmap ()>, SkBitmap *>, 0, 1>' [ 0 6 16 161]
'pthread_t' [ 0]
'std::__1::remove_reference<base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)> &>' [ 0 5 10]
'base::TimeDelta::operator>' [ 0 6 17]
'base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)>' [ 0 6]
'base::internal::BindState<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), gfx::Image>::BindState<scoped_refptr<base::RefCountedMemory> (*&)(const gfx::Image &), gfx::Image>' [ 0 6 16 102]
'__int8_t' [ 0]
'std::__1::remove_reference<std::__1::tuple<base::RepeatingCallback<void (gfx::Image)> > >' [ 0 5 10]
'std::__1::allocator<aura::Window *>::deallocate' [ 0 5 10 37]
'base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>' [ 0 6]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__set_short_size' [ 0 5 10 87]
'std::__1::forward<const std::__1::tuple<base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > > &>' [ 0 5 10]
'std::__1::__split_buffer<aura::Window *, std::__1::allocator<aura::Window *> &>::capacity' [ 0 5 10 81]
'std::__1::conditional<false, std::__1::pointer_traits<const char *>::__nat, const char>' [ 0 5 10]
'std::__1::__vector_base<unsigned char, std::__1::allocator<unsigned char> >' [ 0 5 10]
'std::__1::tuple<base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> >' [ 0 5 10]
'std::__1::pointer_traits<const char *>::pointer_to' [ 0 5 10 40]
'std::__1::ios_base::setstate' [ 0 5 10 20]
'std::__1::__atomic_base<int, true>' [ 0 5 10]
'std::__1::__tuple_leaf<0, base::OnceCallback<SkBitmap ()>, false>::__tuple_leaf<base::OnceCallback<SkBitmap ()>, void>' [ 0 5 10 67]
'std::__1::remove_reference<scoped_refptr<base::RefCountedMemory> >' [ 0 5 10]
'std::__1::__vector_base<aura::Window *, std::__1::allocator<aura::Window *> >::~__vector_base' [ 0 5 10 79]
'std::__1::allocator<char>::deallocate' [ 0 5 10 27]
'base::BindUnwrapTraits<base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> >' [ 0 6]
'base::internal::Invoker<base::internal::BindState<void (*)(base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory> *), base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >, void ()>' [ 0 6 16]
'sk_sp<SkPixelRef>::get' [ 0 19]
'base::internal::FunctorTraits<void (*)(base::OnceCallback<SkBitmap ()>, SkBitmap *), void>::Invoke<void (*)(base::OnceCallback<SkBitmap ()>, SkBitmap *), base::OnceCallback<SkBitmap ()>, SkBitmap *>' [ 0 6 16 92]
'decltype(nullptr)' [ 0]
'std::__1::move<void (*&)(base::OnceCallback<void (const SkBitmap &)>, SkBitmap *)>' [ 0 5 10]
'gfx::Size::width' [ 0 5 11]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1, 2, 3>, std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>::__tuple_impl<0, 1, 2, 3, std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int, std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, const gfx::Rect &, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>' [ 0 5 10 377]
'base::internal::Invoker<base::internal::BindState<SkBitmap (*)(const SkBitmap &, const gfx::Size &), SkBitmap, gfx::Size>, SkBitmap ()>::RunImpl<SkBitmap (*const &)(const SkBitmap &, const gfx::Size &), const std::__1::tuple<SkBitmap, gfx::Size> &, 0, 1>' [ 0 6 16 137]
'std::__1::move<void (*&)(base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *)>' [ 0 5 10]
'std::__1::__const_void_pointer<unsigned char *, std::__1::allocator<unsigned char>, false>' [ 0 5 10]
'std::__1::forward<SkBitmap (&)(const SkBitmap &, const gfx::Size &)>' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), gfx::Image>, scoped_refptr<base::RefCountedMemory> ()>::RunImpl<scoped_refptr<base::RefCountedMemory> (*const &)(const gfx::Image &), const std::__1::tuple<gfx::Image> &, 0>::is_weak_call' [ 0 6 16 169 288]
'std::__1::tuple_element<0, std::__1::tuple<base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > > >' [ 0 5 10]
'std::__1::remove_reference<int>' [ 0 5 10]
'std::__1::__tuple_leaf<0, base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, false>::__tuple_leaf<base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, void>' [ 0 5 10 96]
'scoped_refptr<const base::internal::WeakReference::Flag>' [ 0]
'std::__1::atomic_int' [ 0 5 10]
'std::__1::__split_buffer<aura::Window *, std::__1::allocator<aura::Window *> &>::__end_cap' [ 0 5 10 81]
'base::internal::BindState<void (*)(base::OnceCallback<SkBitmap ()>, SkBitmap *), base::OnceCallback<SkBitmap ()>, SkBitmap *>::~BindState' [ 0 6 16 127]
'base::internal::CallbackBaseCopyable::CallbackBaseCopyable' [ 0 6 16 38]
'std::__1::vector<aura::Window *, std::__1::allocator<aura::Window *> >::~vector' [ 0 5 10 72]
'aura::WindowObserver::OnWindowBoundsChanged' [ 0 6 22]
'SkPoint' [ 0]
'__mbstate_t' [ 0]
'base::time_internal::TimeBase<base::TimeTicks>::is_null' [ 0 6 21 48]
'base::internal::Invoker<base::internal::BindState<void (*)(base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *), base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *>, void ()>::RunImpl<void (*)(base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *), std::__1::tuple<base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *>, 0, 1>::is_method' [ 0 6 16 277 525]
'base::RefCountedThreadSafe<base::internal::WeakReference::Flag, base::DefaultRefCountedThreadSafeTraits<base::internal::WeakReference::Flag> >' [ 0 6]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1>, base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> >::~__tuple_impl' [ 0 5 10 143]
'std::__1::tuple_element<1, std::__1::tuple<base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > > >' [ 0 5 10]
'std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >::reset' [ 0 5 10 95]
'std::__1::move<base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()> &>' [ 0 5 10]
'std::__1::forward<std::__1::tuple<base::RepeatingCallback<void (gfx::Image)> > >' [ 0 5 10]
'base::internal::BindState<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), gfx::Image>' [ 0 6 16]
'unsigned int' [ 0]
'base::internal::Invoker<base::internal::BindState<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), gfx::Image>, scoped_refptr<base::RefCountedMemory> ()>::RunImpl<scoped_refptr<base::RefCountedMemory> (*const &)(const gfx::Image &), const std::__1::tuple<gfx::Image> &, 0>' [ 0 6 16 169]
'std::__1::__compressed_pair_elem<aura::Window **, 0, false>' [ 0 5 10]
'aura::WindowObserver::OnWindowDestroyed' [ 0 6 22]
'int_fast16_t' [ 0]
'base::ContainsValue<std::__1::vector<aura::Window *, std::__1::allocator<aura::Window *> >, aura::Window *, 0>' [ 0 6]
'std::__1::remove_reference<std::__1::allocator<aura::Window *> &>' [ 0 5 10]
'SkIRect' [ 0]
'SkColor' [ 0]
'base::internal::Invoker<base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), base::RepeatingCallback<void (gfx::Image)> >, void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>' [ 0 6 16]
'__intmax_t' [ 0]
'base::BindUnwrapTraits<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &)>::Unwrap<scoped_refptr<base::RefCountedMemory> (*const &)(const gfx::Image &)>' [ 0 6 87]
'SkPixmap::writable_addr' [ 0 10]
'ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>::OnWindowDestroying' [ 0 4 63]
'aura::WindowObserver::OnWindowLayerRecreated' [ 0 6 22]
'base::Bind<SkBitmap (&)(const SkBitmap &, const gfx::Size &), const SkBitmap &, const gfx::Size &>' [ 0 6]
'base::BindUnwrapTraits<SkBitmap *>::Unwrap<SkBitmap *>' [ 0 6 36]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__move_assign' [ 0 5 10 87]
'base::TimeDelta::TimeDelta' [ 0 6 17]
'gfx::Point' [ 0 5]
'base::internal::Invoker<base::internal::BindState<void (*)(base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *), base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *>, void ()>::RunOnce' [ 0 6 16 277]
'std::__1::__pointer_type_imp' [ 0 5 10]
'base::internal::Unwrap<const std::__1::basic_string<char> &>' [ 0 6 16]
'std::__1::remove_reference<SkBitmap (*const &)(const SkBitmap &, const gfx::Size &)>' [ 0 5 10]
'std::__1::tuple<base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >::tuple<base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > , false, false>' [ 0 5 10 154]
'std::__1::operator!=<aura::Window *const *>' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), base::RepeatingCallback<void (gfx::Image)> >, void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>::RunOnce' [ 0 6 16 356]
'std::__1::remove_reference<ui::ScreenshotResult>' [ 0 5 10]
'std::__1::enable_if_t<FunctorTraits<void (*)(const RepeatingCallback<void (Image)> &, const Size &, unique_ptr<CopyOutputResult, default_delete<CopyOutputResult> >)>::is_nullable, bool>' [ 0 5 10]
'base::WeakPtrFactory<ui::ScreenshotGrabber>' [ 0 6]
'base::internal::FunctorTraits<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), void>::Invoke<scoped_refptr<base::RefCountedMemory> (*const &)(const gfx::Image &), const gfx::Image &>' [ 0 6 16 100]
'std::__1::iterator<std::__1::output_iterator_tag, void, void, void, void>' [ 0 5 10]
'std::__1::move<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > > &>' [ 0 5 10]
'std::__1::forward<void (*)(base::OnceCallback<SkBitmap ()>, SkBitmap *)>' [ 0 5 10]
'__FILE' [ 0]
'ui::GrabWindowSnapshotAsyncPNG' [ 0 4]
'std::__1::__vector_base<unsigned char, std::__1::allocator<unsigned char> >::__vector_base' [ 0 5 10 77]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1, 2, 3>, base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >' [ 0 5 10]
'std::__1::conditional<true, std::__1::tuple<base::RepeatingCallback<void (gfx::Image)> >, std::__1::__nat>' [ 0 5 10]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::capacity' [ 0 5 10 87]
'std::__1::__compressed_pair_elem<base::SequenceCheckerImpl::Core *, 0, false>' [ 0 5 10]
'std::__1::float_denorm_style' [ 0 5 10]
'std::__1::allocator_traits<std::__1::allocator<aura::Window *> >::deallocate' [ 0 5 10 66]
'std::__1::__to_raw_pointer<unsigned char>' [ 0 5 10]
'std::__1::get<0, SkBitmap, gfx::Size>' [ 0 5 10]
'base::internal::FunctorTraits<void (ui::ScreenshotGrabber::*)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>), void>' [ 0 6 16]
'std::__1::get<0, base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >' [ 0 5 10]
'base::internal::InvokeHelper<false, void>::MakeItSo<void (*)(std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, const gfx::Rect &, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> > >' [ 0 6 16 43]
'std::__1::addressof<char>' [ 0 5 10]
'std::__1::move<base::RepeatingCallback<scoped_refptr<base::RefCountedMemory> ()> &>' [ 0 5 10]
'base::TimeDelta::Max' [ 0 6 17]
'base::internal::BindState<void (*)(base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *), base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *>::Destroy' [ 0 6 16 243]
'float_t' [ 0]
'SkBitmap::readyToDraw' [ 0 10]
'std::__1::remove_reference<base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()> &>' [ 0 5 10]
'base::internal::PassingTraits<ui::ScreenshotResult, true>' [ 0 6 16]
'std::__1::conditional<true, std::__1::tuple<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> >, std::__1::__nat>' [ 0 5 10]
'std::__1::tuple_element<1, std::__1::tuple<base::OnceCallback<SkBitmap ()>, SkBitmap *> >' [ 0 5 10]
'scoped_refptr<base::RefCountedBytes>::~scoped_refptr' [ 0 38]
'base::OnceCallback<void (const SkBitmap &)>' [ 0 6]
'ui::ScreenshotResult' [ 0 4]
'std::__1::get<1, base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> >' [ 0 5 10]
'base::WeakPtr<ui::ScreenshotGrabber>::WeakPtr' [ 0 6 38]
'std::__1::forward<base::OnceCallback<SkBitmap ()> >' [ 0 5 10]
'base::TimeTicks' [ 0 6]
'std::__1::remove_reference<gfx::Image &>' [ 0 5 10]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0>, gfx::Image>' [ 0 5 10]
'std::__1::forward<const SkBitmap &>' [ 0 5 10]
'std::__1::forward<base::RepeatingCallback<void (gfx::Image)> >' [ 0 5 10]
'std::__1::get<0, base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >' [ 0 5 10]
'std::__1::forward<std::__1::tuple<base::OnceCallback<SkBitmap ()>, SkBitmap *> >' [ 0 5 10]
'std::__1::tuple_element<0, std::__1::tuple<base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> > >' [ 0 5 10]
'aura::WindowObserver::OnWindowStackingChanged' [ 0 6 22]
'std::__1::char_traits<char>::assign' [ 0 5 10 29]
'std::__1::remove_reference<const gfx::Size &>' [ 0 5 10]
'std::__1::__tuple_leaf<1, scoped_refptr<base::RefCountedMemory> *, false>::__tuple_leaf<scoped_refptr<base::RefCountedMemory> *&, void>' [ 0 5 10 75]
'std::__1::__split_buffer_common<true>' [ 0 5 10]
'std::__1::__tuple_indices<>' [ 0 5 10]
'std::__1::default_delete<base::SequenceCheckerImpl::Core>' [ 0 5 10]
'std::__1::ostreambuf_iterator<char, std::__1::char_traits<char> >' [ 0 5 10]
'ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>::Remove' [ 0 4 63]
'base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), base::RepeatingCallback<void (gfx::Image)> >::~BindState' [ 0 6 16 229]
'std::__1::ostream' [ 0 5 10]
'std::__1::tuple_element<0, std::__1::__tuple_types<base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> > >' [ 0 5 10]
'std::__1::remove_reference<const base::RepeatingCallback<void (gfx::Image)> &>' [ 0 5 10]
'std::__1::forward<viz::CopyOutputResult *>' [ 0 5 10]
'base::Callback<MakeUnboundRunType<void (ui::ScreenshotGrabber::*)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>), base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char> &, bool &, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > > >' [ 0 6]
'base::internal::BindState<void (*)(std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, const gfx::Rect &, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>::Destroy' [ 0 6 16 768]
'std::__1::remove_reference<void (*&)(base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory> *)>' [ 0 5 10]
'std::__1::forward<const base::RepeatingCallback<void (gfx::Image)> &>' [ 0 5 10]
'base::AtomicRefCount::Decrement' [ 0 6 22]
'base::DefaultRefCountedThreadSafeTraits<base::RefCountedMemory>' [ 0 6]
'std::__1::tuple_element<1, std::__1::__tuple_types<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> > >' [ 0 5 10]
'base::internal::BindState<void (*)(base::OnceCallback<SkBitmap ()>, SkBitmap *), base::OnceCallback<SkBitmap ()>, SkBitmap *>' [ 0 6 16]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__get_pointer' [ 0 5 10 87]
'std::__1::__compressed_pair<aura::Window **, std::__1::allocator<aura::Window *> &>' [ 0 5 10]
'gfx::Rect::size' [ 0 5 11]
'base::OnceCallback<SkBitmap ()>::OnceCallback' [ 0 6 33]
'aura::WindowObserver::OnWindowVisibilityChanging' [ 0 6 22]
'std::__1::unique_ptr<ui::ScreenshotGrabber::ScopedCursorHider, std::__1::default_delete<ui::ScreenshotGrabber::ScopedCursorHider> >::reset' [ 0 5 10 133]
'ui::ScreenshotGrabber::ScopedCursorHider::Create' [ 0 4 23 42]
'__time_t' [ 0]
'base::internal::Unwrap<int>' [ 0 6 16]
'std::__1::tuple_element<0, std::__1::tuple<base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > > >' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (ui::ScreenshotGrabber::*)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>), base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >, void (scoped_refptr<base::RefCountedMemory>)>::RunImpl<void (ui::ScreenshotGrabber::*const &)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>), const std::__1::tuple<base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > > &, 0, 1, 2, 3>' [ 0 6 16 497]
'std::__1::allocator_traits<std::__1::allocator<aura::Window *> >::__construct<aura::Window *, aura::Window *const &>' [ 0 5 10 66]
'base::subtle::RefCountedThreadSafeBase::Release' [ 0 6 14 40]
'std::__1::__tuple_types<gfx::Image>' [ 0 5 10]
'std::__1::basic_ios<char, std::__1::char_traits<char> >::setstate' [ 0 5 10 57]
'std::__1::tuple<base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >::~tuple' [ 0 5 10 212]
'logging' [ 0]
'scoped_refptr<base::RefCountedMemory>::scoped_refptr<base::RefCountedBytes, void>' [ 0 39]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__set_long_size' [ 0 5 10 87]
'std::__1::tuple<base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >::~tuple' [ 0 5 10 154]
'std::__1::add_lvalue_reference<base::SequenceCheckerImpl::Core>' [ 0 5 10]
'std::__1::vector<aura::Window *, std::__1::allocator<aura::Window *> >::vector' [ 0 5 10 72]
'base::internal::BindState<void (*)(scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, gfx::Image), scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> >::Destroy' [ 0 6 16 326]
'std::__1::__tuple_leaf<0, base::WeakPtr<ui::ScreenshotGrabber>, false>::~__tuple_leaf' [ 0 5 10 72]
'std::__1::allocator_traits<std::__1::allocator<aura::Window *> >' [ 0 5 10]
'base::internal::PassingTraitsType<gfx::Image>' [ 0 6 16]
'std::__1::__const_void_pointer<char *, std::__1::allocator<char>, false>' [ 0 5 10]
'std::__1::forward<const gfx::Rect &>' [ 0 5 10]
'std::__1::remove_reference<void (&)(scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, gfx::Image)>' [ 0 5 10]
'std::__1::__unique_if<viz::CopyOutputRequest>' [ 0 5 10]
'std::__1::__tuple_leaf<1, base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)>, false>::__tuple_leaf<const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, void>' [ 0 5 10 105]
'gfx::SizeF' [ 0 5]
'base::internal::FunctorTraits<void (*)(std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, const gfx::Rect &, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), void>' [ 0 6 16]
'base::internal::InvokeHelper<false, SkBitmap>' [ 0 6 16]
'base::internal::BindState<void (*)(std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, const gfx::Rect &, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>::BindState<void (*)(std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, const gfx::Rect &, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, const gfx::Rect &, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>' [ 0 6 16 768]
'std::__1::remove_reference<base::RepeatingCallback<scoped_refptr<base::RefCountedMemory> ()> &>' [ 0 5 10]
'std::__1::move<std::__1::tuple<base::OnceCallback<SkBitmap ()>, SkBitmap *> &>' [ 0 5 10]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__get_long_size' [ 0 5 10 87]
'std::__1::forward<SkBitmap *&>' [ 0 5 10]
'base::OnceCallback<void ()>::~OnceCallback' [ 0 6 29]
'base::internal::Invoker<base::internal::BindState<void (*)(base::OnceCallback<void (const SkBitmap &)>, SkBitmap *), base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> >, void ()>::RunOnce' [ 0 6 16 214]
'aura::WindowObserver::OnWindowHierarchyChanging' [ 0 6 22]
'std::__1::__compressed_pair_elem<std::__1::allocator<aura::Window *>, 1, true>' [ 0 5 10]
'std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >::~unique_ptr' [ 0 5 10 176]
'base::time_internal' [ 0 6]
'std::__1::remove_reference<base::RepeatingCallback<SkBitmap ()> &>' [ 0 5 10]
'std::__1::__tuple_types<base::RepeatingCallback<void (gfx::Image)>, gfx::Size>' [ 0 5 10]
'base::BindUnwrapTraits<base::OnceCallback<SkBitmap ()> >' [ 0 6]
'base::internal::OptionalBase<gfx::Rect>' [ 0 6 16]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1>, base::OnceCallback<SkBitmap ()>, SkBitmap *>' [ 0 5 10]
'std::__1::conditional<false, std::__1::tuple<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>, std::__1::__nat>' [ 0 5 10]
'base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>::Run' [ 0 6 62]
'std::__1::get<1, base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *>' [ 0 5 10]
'base::BindOnce<void (*)(base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *), base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *&>' [ 0 6]
'aura::WindowObserver::OnWindowHierarchyChanged' [ 0 6 22]
'std::__1::__compressed_pair<viz::CopyOutputResult *, std::__1::default_delete<viz::CopyOutputResult> >::__compressed_pair<viz::CopyOutputResult *, std::__1::default_delete<viz::CopyOutputResult> >' [ 0 5 10 104]
'gfx::Point3F' [ 0 5]
'base::internal::Unwrap<const base::RepeatingCallback<void (gfx::Image)> &>' [ 0 6 16]
'std::__1::vector<unsigned char, std::__1::allocator<unsigned char> >' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (*)(std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, const gfx::Rect &, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>, void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>::RunImpl<void (*)(std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, const gfx::Rect &, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), std::__1::tuple<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>, 0, 1, 2, 3>::is_method' [ 0 6 16 895 1674]
'std::__1::ctype<char>::widen' [ 0 5 10 23]
'std::__1::__tuple_leaf<0, SkBitmap, false>::__tuple_leaf<const SkBitmap &, void>' [ 0 5 10 44]
'std::__1::remove_reference<base::internal::OwnedWrapper<SkBitmap> >' [ 0 5 10]
'std::__1::move<void (*&)(std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, const gfx::Rect &, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>' [ 0 5 10]
'SkSize' [ 0]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1>, scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> >::__tuple_impl<0, 1, scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> , scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &>' [ 0 5 10 192]
'std::__1::remove_reference<SkBitmap *>' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<SkBitmap (*)(const SkBitmap &, const gfx::Size &), SkBitmap, gfx::Size>, SkBitmap ()>::Run::num_bound_args' [ 0 6 16 137 142]
'std::__1::forward<std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >' [ 0 5 10]
'std::__1::remove_reference<const base::WeakPtr<ui::ScreenshotGrabber> &>' [ 0 5 10]
'base::internal::BindState<SkBitmap (*)(const SkBitmap &, const gfx::Size &), SkBitmap, gfx::Size>::~BindState' [ 0 6 16 99]
'base::internal::IsNull<void (*)(base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory> *)>' [ 0 6 16]
'aura::WindowObserver::OnWindowParentChanged' [ 0 6 22]
'base::RefCountedThreadSafe<base::RefCountedMemory, base::DefaultRefCountedThreadSafeTraits<base::RefCountedMemory> >::Release' [ 0 6 118]
'std::__1::__add_lvalue_reference_impl<ui::ScreenshotGrabber::ScopedCursorHider, true>' [ 0 5 10]
'std::__1::forward<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> *>' [ 0 5 10]
'base::OnceCallback<void ()>::OnceCallback' [ 0 6 29]
'base::internal::IsNull<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &)>' [ 0 6 16]
'unsigned short' [ 0]
'base::internal::BindState<void (ui::ScreenshotGrabber::*)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>), base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >::Destroy' [ 0 6 16 426]
'std::__1::forward<base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (*)(std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, const gfx::Rect &, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>, void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>::RunOnce::num_bound_args' [ 0 6 16 895 904]
'base::internal::Invoker<base::internal::BindState<void (*)(base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory> *), base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >, void ()>::RunOnce::num_bound_args' [ 0 6 16 315 324]
'base::AtomicRefCount' [ 0 6]
'std::__1::remove_reference<std::__1::tuple<base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> > &>' [ 0 5 10]
'std::__1::allocator_traits<std::__1::allocator<unsigned char> >::destroy<unsigned char>' [ 0 5 10 65]
'std::__1::enable_if_t<FunctorTraits<void (*)(OnceCallback<SkBitmap ()>, SkBitmap *)>::is_nullable, bool>' [ 0 5 10]
'std::__1::tuple<gfx::Image>::tuple<gfx::Image, false, false>' [ 0 5 10 29]
'base::DefaultRefCountedThreadSafeTraits<base::internal::WeakReference::Flag>' [ 0 6]
'base::internal::BindState<void (*)(base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory> *), base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >::~BindState' [ 0 6 16 281]
'std::__1::__pointer_type<base::SequenceCheckerImpl::Core, std::__1::default_delete<base::SequenceCheckerImpl::Core> >' [ 0 5 10]
'gfx::BoxF' [ 0 5]
'std::__1::remove_reference<std::__1::tuple<base::OnceCallback<SkBitmap ()>, SkBitmap *> &>' [ 0 5 10]
'std::__1::unique_ptr<viz::CopyOutputRequest, std::__1::default_delete<viz::CopyOutputRequest> >::reset' [ 0 5 10 97]
'ui::MakeInitialAsyncCopyRequest' [ 0 4]
'std::__1::move<void (*&)(const base::RepeatingCallback<void (gfx::Image)> &, const gfx::Size &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>' [ 0 5 10]
'base::Callback<MakeUnboundRunType<SkBitmap (&)(const SkBitmap &, const gfx::Size &), const SkBitmap &, const gfx::Size &> >' [ 0 6]
'std::__1::__put_character_sequence<char, std::__1::char_traits<char> >' [ 0 5 10]
'base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> >' [ 0 6 16]
'std' [ 0]
'std::__1::vector<aura::Window *, std::__1::allocator<aura::Window *> >::cbegin' [ 0 5 10 72]
'base::internal::OptionalStorage<base::UnguessableToken, true, true>' [ 0 6 16]
'base::BindUnwrapTraits<base::RepeatingCallback<void (gfx::Image)> >::Unwrap<const base::RepeatingCallback<void (gfx::Image)> &>' [ 0 6 69]
'ui::SnapshotAsync::RunCallbackWithCopyOutputResult' [ 0 4 19]
'base::internal::InvokeHelper<false, scoped_refptr<base::RefCountedMemory> >::MakeItSo<scoped_refptr<base::RefCountedMemory> (*const &)(const gfx::Image &), const gfx::Image &>' [ 0 6 16 77]
'base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const SkBitmap &), base::RepeatingCallback<void (gfx::Image)> >::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const SkBitmap &), const base::RepeatingCallback<void (gfx::Image)> &>' [ 0 6 16 152]
'std::__1::tuple_element<1, std::__1::tuple<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int> >' [ 0 5 10]
'std::__1::forward<ui::ScreenshotGrabber::ScopedCursorHider *&>' [ 0 5 10]
'ui::(anonymous namespace)::ScaleBitmap' [ 0 4 27]
'std::__1::__less<unsigned long, unsigned long>' [ 0 5 10]
'std::__1::ostringstream' [ 0 5 10]
'std::__1::__size_type<std::__1::allocator<aura::Window *>, long, true>' [ 0 5 10]
'std::__1::__tuple_leaf<0, base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, false>::~__tuple_leaf' [ 0 5 10 96]
'std::__1::forward<void (*)(base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory> *)>' [ 0 5 10]
'base::internal::Unwrap<scoped_refptr<base::RefCountedMemory> *>' [ 0 6 16]
'std::__1::move<base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)> &>' [ 0 5 10]
'std::__1::unique_ptr<viz::CopyOutputRequest, std::__1::default_delete<viz::CopyOutputRequest> >::unique_ptr' [ 0 5 10 97]
'std::__1::remove_reference<SkBitmap &>' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (ui::ScreenshotGrabber::*)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>), base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >, void (scoped_refptr<base::RefCountedMemory>)>::Run::num_bound_args' [ 0 6 16 497 502]
'base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> >' [ 0 6 16]
'std::__1::__compressed_pair<ui::ScreenshotGrabber::ScopedCursorHider *, std::__1::default_delete<ui::ScreenshotGrabber::ScopedCursorHider> >::__compressed_pair<ui::ScreenshotGrabber::ScopedCursorHider *&, true>' [ 0 5 10 142]
'std::__1::forward<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const SkBitmap &)>' [ 0 5 10]
'int_least64_t' [ 0]
'viz' [ 0]
'base::TimeTicks::TimeTicks' [ 0 6 17]
'int8_t' [ 0]
'base::BindUnwrapTraits<int>' [ 0 6]
'std::__1::vector<aura::Window *, std::__1::allocator<aura::Window *> >::__annotate_new' [ 0 5 10 72]
'std::__1::find<std::__1::__wrap_iter<aura::Window *const *>, aura::Window *>' [ 0 5 10]
'std::__1::__add_lvalue_reference_impl<viz::CopyOutputResult, true>' [ 0 5 10]
'std::__1::forward<base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)> >' [ 0 5 10]
'std::__1::__compressed_pair_elem<unsigned char *, 0, false>' [ 0 5 10]
'std::__1::allocator_traits<std::__1::allocator<aura::Window *> >::destroy<aura::Window *>' [ 0 5 10 66]
'std::__1::allocator<char>' [ 0 5 10]
'uint64_t' [ 0]
'std::__1::__vector_base<unsigned char, std::__1::allocator<unsigned char> >::__end_cap' [ 0 5 10 77]
'base::BindUnwrapTraits<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &)>' [ 0 6]
'std::__1::__tuple_leaf<0, base::OnceCallback<void (const SkBitmap &)>, false>::__tuple_leaf<base::OnceCallback<void (const SkBitmap &)>, void>' [ 0 5 10 79]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1>, base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >::__tuple_impl<0, 1, base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > , base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >' [ 0 5 10 194]
'std::__1::__compressed_pair_elem<ui::ScreenshotGrabber::ScopedCursorHider *, 0, false>' [ 0 5 10]
'double' [ 0]
'ui::SnapshotAsync' [ 0 4]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1>, base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> >::__tuple_impl<0, 1, base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> , base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> >' [ 0 5 10 143]
'std::__1::forward<void (ui::ScreenshotGrabber::*const &)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>)>' [ 0 5 10]
'std::__1::pointer_traits<char *>' [ 0 5 10]
'timespec' [ 0]
'std::__1::__tuple_leaf<1, gfx::Size, false>::__tuple_leaf<const gfx::Size &, void>' [ 0 5 10 45]
'base::internal::Unwrap<const base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > &>' [ 0 6 16]
'std::__1::__compressed_pair<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> *, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >::__compressed_pair<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> *, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >' [ 0 5 10 185]
'base::RepeatingCallback<SkBitmap ()>' [ 0 6]
'std::__1::operator<<<std::__1::char_traits<char> >' [ 0 5 10]
'base::internal::FunctorTraits<void (*)(base::OnceCallback<void (const SkBitmap &)>, SkBitmap *), void>::Invoke<void (*)(base::OnceCallback<void (const SkBitmap &)>, SkBitmap *), base::OnceCallback<void (const SkBitmap &)>, SkBitmap *>' [ 0 6 16 104]
'std::__1::__tuple_types<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> >' [ 0 5 10]
'std::__1::__libcpp_numeric_limits<long, true>' [ 0 5 10]
'uintmax_t' [ 0]
'base::BindOnce<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const gfx::Size &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), const base::RepeatingCallback<void (gfx::Image)> &, const gfx::Size &>' [ 0 6]
'std::__1::enable_if<true, void>' [ 0 5 10]
'base::internal::FunctorTraits<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const SkBitmap &), void>' [ 0 6 16]
'std::__1::remove_reference<std::__1::default_delete<viz::CopyOutputResult> >' [ 0 5 10]
'std::__1::forward<std::__1::default_delete<viz::CopyOutputResult> >' [ 0 5 10]
'std::__1::__tuple_leaf<1, gfx::Size, false>' [ 0 5 10]
'std::__1::pointer_traits<aura::Window **>' [ 0 5 10]
'std::__1::once_flag' [ 0 5 10]
'std::__1::__compressed_pair_elem<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> *, 0, false>::__compressed_pair_elem<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> *&, void>' [ 0 5 10 109]
'base::BindOnce<void (*)(base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory> *), base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >' [ 0 6]
'base::internal::Invoker<base::internal::BindState<void (*)(scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, gfx::Image), scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> >, void (gfx::Image)>::Run::num_bound_args' [ 0 6 16 370 375]
'SkIPoint' [ 0]
'base::internal::Invoker<base::internal::BindState<SkBitmap (*)(const SkBitmap &, const gfx::Size &), SkBitmap, gfx::Size>, SkBitmap ()>::RunImpl<SkBitmap (*const &)(const SkBitmap &, const gfx::Size &), const std::__1::tuple<SkBitmap, gfx::Size> &, 0, 1>::is_weak_call' [ 0 6 16 137 256]
'base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>::OnceCallback' [ 0 6 62]
'base::internal::ReturnAsParamAdapter<scoped_refptr<base::RefCountedMemory> >' [ 0 6 16]
'std::__1::tuple_element<3, std::__1::tuple<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int> >' [ 0 5 10]
'std::__1::enable_if_t<FunctorTraits<scoped_refptr<RefCountedMemory> (*)(const Image &)>::is_nullable, bool>' [ 0 5 10]
'std::__1::operator-<aura::Window *const *, aura::Window *const *>' [ 0 5 10]
'std::__1::tuple_element<2, std::__1::__tuple_types<base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > > >' [ 0 5 10]
'std::__1::chrono' [ 0 5 10]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::data' [ 0 5 10 87]
'std::__1::forward<std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> > >' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const gfx::Size &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), base::RepeatingCallback<void (gfx::Image)>, gfx::Size>, void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>::RunImpl<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const gfx::Size &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), std::__1::tuple<base::RepeatingCallback<void (gfx::Image)>, gfx::Size>, 0, 1>' [ 0 6 16 385]
'std::__1::__compressed_pair_elem<std::__1::default_delete<base::SequenceCheckerImpl::Core>, 1, true>' [ 0 5 10]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1>, scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> >::~__tuple_impl' [ 0 5 10 192]
'std::__1::move<std::__1::tuple<base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > > &>' [ 0 5 10]
'aura::WindowObserver::OnWindowTitleChanged' [ 0 6 22]
'base::BindUnwrapTraits<base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()> >' [ 0 6]
'std::__1::__atomic_base<int, false>' [ 0 5 10]
'base::internal::ReplyAdapter<SkBitmap, const SkBitmap &>' [ 0 6 16]
'std::__1::remove_reference<void (*&)(std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, const gfx::Rect &, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>' [ 0 5 10]
'base::internal::InvokeHelper<false, void>::MakeItSo<void (*)(base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *), base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *>' [ 0 6 16 43]
'std::__1::tuple<base::RepeatingCallback<void (gfx::Image)>, gfx::Size>' [ 0 5 10]
'base::BindUnwrapTraits<gfx::Rect>::Unwrap<gfx::Rect>' [ 0 6 35]
'base::internal::Unwrap<const SkBitmap &>' [ 0 6 16]
'base::TimeDelta::FromProduct' [ 0 6 17]
'int_least32_t' [ 0]
'va_list' [ 0]
'SkColorType' [ 0]
'std::__1::integral_constant<bool, false>' [ 0 5 10]
'std::__1::tuple<SkBitmap, gfx::Size>' [ 0 5 10]
'std::__1::forward<void (*)(base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *)>' [ 0 5 10]
'std::__1::tuple<base::RepeatingCallback<void (gfx::Image)>, gfx::Size>::~tuple' [ 0 5 10 72]
'std::__1::forward<void (*const &)(const base::RepeatingCallback<void (gfx::Image)> &, const SkBitmap &)>' [ 0 5 10]
'std::__1::__compressed_pair_elem<std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> >, 1, true>::__compressed_pair_elem<std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> >, void>' [ 0 5 10 133]
'std::__1::__wrap_iter<aura::Window *const *>::__wrap_iter<aura::Window **>' [ 0 5 10 46]
'std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >::unique_ptr' [ 0 5 10 176]
'std::__1::remove_reference<std::__1::unique_ptr<viz::CopyOutputRequest, std::__1::default_delete<viz::CopyOutputRequest> > &>' [ 0 5 10]
'std::__1::__wrap_iter<aura::Window **>::operator*' [ 0 5 10 40]
'std::__1::remove_reference<bool &>' [ 0 5 10]
'base::internal::Unwrap<scoped_refptr<base::RefCountedMemory> (*const &)(const gfx::Image &)>' [ 0 6 16]
'std::__1::__compressed_pair_elem<std::__1::default_delete<viz::CopyOutputRequest>, 1, true>::__compressed_pair_elem<std::__1::default_delete<viz::CopyOutputRequest>, void>' [ 0 5 10 93]
'base::internal::IsNull<SkBitmap (*)(const SkBitmap &, const gfx::Size &)>' [ 0 6 16]
'std::__1::__tuple_leaf<0, gfx::Image, false>::~__tuple_leaf' [ 0 5 10 46]
'base::internal::CallbackBaseCopyable' [ 0 6 16]
'base::internal::Invoker<base::internal::BindState<void (*)(scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, gfx::Image), scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> >, void (gfx::Image)>::RunImpl<void (*const &)(scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, gfx::Image), const std::__1::tuple<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> > &, 0, 1>::is_weak_call' [ 0 6 16 370 716]
'ui::FinishedAsyncCopyRequest' [ 0 4]
'std::__1::remove_reference<scoped_refptr<base::RefCountedMemory> &>' [ 0 5 10]
'std::__1::get<0, base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *>' [ 0 5 10]
'base::internal::FunctorTraits<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), void>::Invoke<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), base::RepeatingCallback<void (gfx::Image)>, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> > >' [ 0 6 16 194]
'base::WrapUnique<ui::ScreenshotGrabber::ScopedCursorHider>' [ 0 6]
'std::__1::literals' [ 0 5 10]
'gfx::NativeWindow' [ 0 5]
'std::__1::tuple_element<0, std::__1::tuple<SkBitmap, gfx::Size> >' [ 0 5 10]
'std::__1::__compressed_pair<unsigned char *, std::__1::allocator<unsigned char> >::__compressed_pair<nullptr_t, true>' [ 0 5 10 83]
'base::internal::Invoker<base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const gfx::Size &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), base::RepeatingCallback<void (gfx::Image)>, gfx::Size>, void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>::RunImpl<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const gfx::Size &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), std::__1::tuple<base::RepeatingCallback<void (gfx::Image)>, gfx::Size>, 0, 1>::is_method' [ 0 6 16 385 648]
'__uint64_t' [ 0]
'std::__1::__compressed_pair_elem<std::__1::allocator<unsigned char>, 1, true>' [ 0 5 10]
'std::__1::__const_pointer<aura::Window *, aura::Window **, std::__1::allocator<aura::Window *>, true>' [ 0 5 10]
'std::__1::unique_ptr<viz::CopyOutputRequest, std::__1::default_delete<viz::CopyOutputRequest> >::unique_ptr<true, void>' [ 0 5 10 97]
'std::__1::get<1, std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>' [ 0 5 10]
'std::__1::remove_reference<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const gfx::Size &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>' [ 0 5 10]
'std::__1::iterator_traits<aura::Window *const *>' [ 0 5 10]
'std::__1::forward<int>' [ 0 5 10]
'std::__1::__compressed_pair<aura::Window **, std::__1::allocator<aura::Window *> >' [ 0 5 10]
'base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>::Run' [ 0 6 122]
'ui::GrabWindowSnapshot' [ 0 4]
'base::WeakPtrFactory<ui::ScreenshotGrabber>::~WeakPtrFactory' [ 0 6 45]
'std::__1::tuple_element<0, std::__1::__tuple_types<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int> >' [ 0 5 10]
'std::__1::__unique_if<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> >' [ 0 5 10]
'base::internal::BindState<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), gfx::Image>::Destroy' [ 0 6 16 102]
'std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>' [ 0 5 10]
'std::__1::tuple_element<2, std::__1::__tuple_types<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int> >' [ 0 5 10]
'std::__1::conditional<false, std::__1::tuple<base::OnceCallback<SkBitmap ()>, SkBitmap *>, std::__1::__nat>' [ 0 5 10]
'std::__1::__wrap_iter<aura::Window **>::base' [ 0 5 10 40]
'std::__1::__vector_base<unsigned char, std::__1::allocator<unsigned char> >::~__vector_base' [ 0 5 10 77]
'ui::GrabWindowSnapshotAndScaleAsync' [ 0 4]
'std::__1::tuple_element<3, std::__1::__tuple_types<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int> >' [ 0 5 10]
'ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>' [ 0 4]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__clear_and_shrink' [ 0 5 10 87]
'std::__1::allocator_traits<std::__1::allocator<unsigned char> >::deallocate' [ 0 5 10 65]
'base::BindUnwrapTraits<base::WeakPtr<ui::ScreenshotGrabber> >::Unwrap<const base::WeakPtr<ui::ScreenshotGrabber> &>' [ 0 6 63]
'std::__1::integral_constant<bool, true>' [ 0 5 10]
'base::OnceCallback<void ()>' [ 0 6]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__set_long_cap' [ 0 5 10 87]
'std::__1::vector<aura::Window *, std::__1::allocator<aura::Window *> >::__recommend' [ 0 5 10 72]
'intmax_t' [ 0]
'std::__1::vector<aura::Window *, std::__1::allocator<aura::Window *> >::__annotate_shrink' [ 0 5 10 72]
'std::__1::pointer_traits<char *>::pointer_to' [ 0 5 10 34]
'base::internal::Unwrap<const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &>' [ 0 6 16]
'std::__1::tuple_element<0, std::__1::tuple<gfx::Image> >' [ 0 5 10]
'std::__1::__libcpp_deallocate' [ 0 5 10]
'std::__1::__throw_length_error' [ 0 5 10]
'std::__1::remove_reference<std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> > >' [ 0 5 10]
'std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >::unique_ptr' [ 0 5 10 95]
'gfx::Rect' [ 0 5]
'std::__1::__pointer_type_imp::__pointer_type<ui::ScreenshotGrabber::ScopedCursorHider, std::__1::default_delete<ui::ScreenshotGrabber::ScopedCursorHider>, false>' [ 0 5 10 30]
'std::__1::forward<gfx::Rect>' [ 0 5 10]
'base::internal::IsNull<void (*)(base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *)>' [ 0 6 16]
'base::internal::BindState<void (*)(std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, const gfx::Rect &, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>' [ 0 6 16]
'std::__1::__compressed_pair<viz::CopyOutputResult *, std::__1::default_delete<viz::CopyOutputResult> >' [ 0 5 10]
'__syscall_slong_t' [ 0]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1>, base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> >' [ 0 5 10]
'std::__1::remove_reference<std::__1::tuple<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int> &>' [ 0 5 10]
'int_least16_t' [ 0]
'std::__1::remove_reference<const bool &>' [ 0 5 10]
'std::__1::remove_reference<base::RepeatingCallback<void (gfx::Image)> >' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (*)(base::OnceCallback<SkBitmap ()>, SkBitmap *), base::OnceCallback<SkBitmap ()>, SkBitmap *>, void ()>::RunOnce' [ 0 6 16 161]
'base::BindUnwrapTraits<gfx::Image>::Unwrap<const gfx::Image &>' [ 0 6 36]
'std::__1::forward<bool &>' [ 0 5 10]
'sk_sp<SkColorSpace>' [ 0]
'std::__1::move<std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> > &>' [ 0 5 10]
'base::subtle::RefCountedThreadSafeBase' [ 0 6 14]
'ui::GrabWindowSnapshotAsync' [ 0 4]
'std::__1::allocator<aura::Window *>' [ 0 5 10]
'std::__1::allocator_traits<std::__1::allocator<aura::Window *> >::max_size' [ 0 5 10 66]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1>, scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> >' [ 0 5 10]
'SkColor4f' [ 0]
'std::__1::forward<void (*)(std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, const gfx::Rect &, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const gfx::Size &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), base::RepeatingCallback<void (gfx::Image)>, gfx::Size>, void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>::RunOnce::num_bound_args' [ 0 6 16 385 394]
'std::__1::move<void (*&)(base::OnceCallback<SkBitmap ()>, SkBitmap *)>' [ 0 5 10]
'std::__1::__compressed_pair_elem<viz::CopyOutputRequest *, 0, false>::__compressed_pair_elem<viz::CopyOutputRequest *&, void>' [ 0 5 10 70]
'std::__1::__compressed_pair<viz::CopyOutputRequest *, std::__1::default_delete<viz::CopyOutputRequest> >::__compressed_pair<viz::CopyOutputRequest *&, true>' [ 0 5 10 106]
'base::internal::BindState<void (*)(base::OnceCallback<void (const SkBitmap &)>, SkBitmap *), base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> >::~BindState' [ 0 6 16 180]
'__uint32_t' [ 0]
'base::internal::Invoker<base::internal::BindState<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), gfx::Image>, scoped_refptr<base::RefCountedMemory> ()>::Run' [ 0 6 16 169]
'std::__1::get<0, std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>' [ 0 5 10]
'base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>' [ 0 6]
'base::internal::Invoker<base::internal::BindState<SkBitmap (*)(const SkBitmap &, const gfx::Size &), SkBitmap, gfx::Size>, SkBitmap ()>::Run' [ 0 6 16 137]
'base::RepeatingCallback<void (const SkBitmap &)>::RepeatingCallback' [ 0 6 50]
'std::__1::__tuple_leaf<0, base::WeakPtr<ui::ScreenshotGrabber>, false>' [ 0 5 10]
'scoped_refptr<base::RefCountedMemory>::AddRef' [ 0 39]
'base::internal::Invoker<base::internal::BindState<void (ui::ScreenshotGrabber::*)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>), base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >, void (scoped_refptr<base::RefCountedMemory>)>::Run' [ 0 6 16 497]
'bool' [ 0]
'std::__1::__tuple_leaf<1, gfx::Rect, false>::__tuple_leaf<const gfx::Rect &, void>' [ 0 5 10 45]
'std::__1::__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >' [ 0 5 10]
'base::internal::PassingTraits<const SkBitmap &, false>' [ 0 6 16]
'base::internal::InvokeHelper<false, void>' [ 0 6 16]
'base::internal::InvokeHelper<false, void>::MakeItSo<void (*)(base::OnceCallback<SkBitmap ()>, SkBitmap *), base::OnceCallback<SkBitmap ()>, SkBitmap *>' [ 0 6 16 43]
'std::__1::index_sequence<0UL, 1UL>' [ 0 5 10]
'std::__1::pointer_traits<const char *>' [ 0 5 10]
'std::__1::__split_buffer<aura::Window *, std::__1::allocator<aura::Window *> &>::~__split_buffer' [ 0 5 10 81]
'base::RepeatingCallback<scoped_refptr<base::RefCountedMemory> ()>::~RepeatingCallback' [ 0 6 67]
'base::internal::BindState<void (*)(scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, gfx::Image), scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> >' [ 0 6 16]
'std::__1::remove_reference<std::__1::default_delete<viz::CopyOutputRequest> >' [ 0 5 10]
'std::__1::__split_buffer<aura::Window *, std::__1::allocator<aura::Window *> &>::__alloc' [ 0 5 10 81]
'clock_t' [ 0]
'base::internal::BindState<void (*)(base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory> *), base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >' [ 0 6 16]
'std::__1::vector<aura::Window *, std::__1::allocator<aura::Window *> >::empty' [ 0 5 10 72]
'base::internal::Invoker<base::internal::BindState<void (*)(base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *), base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *>, void ()>' [ 0 6 16]
'std::__1::enable_if_t<FunctorTraits<void (*)(const RepeatingCallback<void (Image)> &, const SkBitmap &)>::is_nullable, bool>' [ 0 5 10]
'std::__1::end<std::__1::vector<aura::Window *, std::__1::allocator<aura::Window *> > >' [ 0 5 10]
'base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)>::RepeatingCallback' [ 0 6 71]
'std::__1::begin<std::__1::vector<aura::Window *, std::__1::allocator<aura::Window *> > >' [ 0 5 10]
'std::__1::forward<SkBitmap (*const &)(const SkBitmap &, const gfx::Size &)>' [ 0 5 10]
'ui::FinishedAsyncCopyRequest::kMaxRetries' [ 0 4 30]
'base::internal::PassingTraitsType<scoped_refptr<base::RefCountedMemory> >' [ 0 6 16]
'base::internal::FunctorTraits<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const gfx::Size &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), void>::Invoke<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const gfx::Size &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), base::RepeatingCallback<void (gfx::Image)>, gfx::Size, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> > >' [ 0 6 16 213]
'ui::GrabWindowSnapshotAsyncJPEG' [ 0 4]
'base::internal::Invoker<base::internal::BindState<void (*)(base::OnceCallback<void (const SkBitmap &)>, SkBitmap *), base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> >, void ()>::RunImpl<void (*)(base::OnceCallback<void (const SkBitmap &)>, SkBitmap *), std::__1::tuple<base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> >, 0, 1>' [ 0 6 16 214]
'std::__1::__tuple_types<base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >' [ 0 5 10]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1, 2, 3>, std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>' [ 0 5 10]
'SkMScalar' [ 0]
'SkPoint3' [ 0]
'std::__1::__tuple_leaf<1, gfx::Rect, false>' [ 0 5 10]
'ui::ScreenshotGrabber' [ 0 4]
'std::__1::allocator<unsigned char>::deallocate' [ 0 5 10 36]
'std::__1::__wrap_iter<aura::Window *const *>' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), base::RepeatingCallback<void (gfx::Image)> >, void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>::RunImpl<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), std::__1::tuple<base::RepeatingCallback<void (gfx::Image)> >, 0>::is_method' [ 0 6 16 356 587]
'std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >::operator->' [ 0 5 10 176]
'std::__1::__tuple_leaf<1, std::__1::basic_string<char>, false>::__tuple_leaf<std::__1::basic_string<char> &, void>' [ 0 5 10 64]
'int64_t' [ 0]
'gfx::ImageSkiaRep' [ 0 5]
'base::internal::Invoker<base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const SkBitmap &), base::RepeatingCallback<void (gfx::Image)> >, void (const SkBitmap &)>::Run::num_bound_args' [ 0 6 16 202 207]
'std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >::release' [ 0 5 10 95]
'std::__1::unique_ptr<ui::ScreenshotGrabber::ScopedCursorHider, std::__1::default_delete<ui::ScreenshotGrabber::ScopedCursorHider> >::release' [ 0 5 10 133]
'U8CPU' [ 0]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::basic_string' [ 0 5 10 87]
'gfx' [ 0]
'std::__1::output_iterator_tag' [ 0 5 10]
'std::__1::__tuple_leaf<1, std::__1::basic_string<char>, false>' [ 0 5 10]
'base::TimeDelta::Min' [ 0 6 17]
'std::__1::__split_buffer<aura::Window *, std::__1::allocator<aura::Window *> &>::__destruct_at_end' [ 0 5 10 81]
'std::__1::allocator_traits<std::__1::allocator<aura::Window *> >::__max_size' [ 0 5 10 66]
'std::__1::__pointer_type<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >' [ 0 5 10]
'base::DefaultRefCountedThreadSafeTraits<base::RefCountedMemory>::Destruct' [ 0 6 65]
'long long unsigned int' [ 0]
'std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >::unique_ptr<true, void>' [ 0 5 10 176]
'std::__1::get<0, base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> >' [ 0 5 10]
'aura::WindowObserver::OnWindowAdded' [ 0 6 22]
'base::internal::BindState<SkBitmap (*)(const SkBitmap &, const gfx::Size &), SkBitmap, gfx::Size>::BindState<SkBitmap (&)(const SkBitmap &, const gfx::Size &), const SkBitmap &, const gfx::Size &>' [ 0 6 16 99]
'std::__1::vector<aura::Window *, std::__1::allocator<aura::Window *> >::end' [ 0 5 10 72]
'std::__1::__pointer_type_imp::__pointer_type<aura::Window *, std::__1::allocator<aura::Window *>, true>' [ 0 5 10 30]
'std::__1::move<scoped_refptr<base::RefCountedMemory> &>' [ 0 5 10]
'std::__1::remove_reference<void (*&)(const base::RepeatingCallback<void (gfx::Image)> &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>' [ 0 5 10]
'std::__1::remove_reference<std::__1::tuple<base::OnceCallback<SkBitmap ()>, SkBitmap *> >' [ 0 5 10]
'std::__1::tuple_element<1, std::__1::tuple<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> > >' [ 0 5 10]
'std::__1::__compressed_pair_elem<ui::ScreenshotGrabber::ScopedCursorHider *, 0, false>::__compressed_pair_elem<ui::ScreenshotGrabber::ScopedCursorHider *, void>' [ 0 5 10 88]
'int_fast8_t' [ 0]
'base::internal::Invoker<base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), base::RepeatingCallback<void (gfx::Image)> >, void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>::RunOnce::num_bound_args' [ 0 6 16 356 365]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1>, base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *>' [ 0 5 10]
'std::__1::tuple_element<0, std::__1::__tuple_types<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> > >' [ 0 5 10]
'std::__1::pointer_traits<unsigned char *>' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (*)(base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory> *), base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >, void ()>::RunImpl<void (*)(base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory> *), std::__1::tuple<base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >, 0, 1>::is_weak_call' [ 0 6 16 315 601]
'std::__1::forward<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> >' [ 0 5 10]
'__uint16_t' [ 0]
'std::__1::remove_reference<scoped_refptr<base::RefCountedMemory> (*const &)(const gfx::Image &)>' [ 0 5 10]
'std::__1::basic_ios<char, std::__1::char_traits<char> >::widen' [ 0 5 10 57]
'std::__1::tuple_element<0, std::__1::__tuple_types<base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *> >' [ 0 5 10]
'std::__1::__pointer_type<aura::Window *, std::__1::allocator<aura::Window *> >' [ 0 5 10]
'base::internal::BindState<SkBitmap (*)(const SkBitmap &, const gfx::Size &), SkBitmap, gfx::Size>::Destroy' [ 0 6 16 99]
'std::__1::forward<nullptr_t>' [ 0 5 10]
'base::internal::CallbackBase' [ 0 6 16]
'gfx::ImageSkiaRep::is_null' [ 0 5 19]
'std::__1' [ 0 5]
'std::__1::__vector_base<aura::Window *, std::__1::allocator<aura::Window *> >::__alloc' [ 0 5 10 79]
'ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>::WindowTrackerTemplate' [ 0 4 63]
'wint_t' [ 0]
'base::internal::Invoker<base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const gfx::Size &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), base::RepeatingCallback<void (gfx::Image)>, gfx::Size>, void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>' [ 0 6 16]
'std::__1::tuple<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> >' [ 0 5 10]
'char' [ 0]
'SkIVector' [ 0]
'base::BindOnce<void (*)(base::OnceCallback<void (const SkBitmap &)>, SkBitmap *), base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> >' [ 0 6]
'base::internal::FunctorTraits<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const gfx::Size &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), void>' [ 0 6 16]
'std::__1::remove_reference<void (*&)(base::OnceCallback<void (const SkBitmap &)>, SkBitmap *)>' [ 0 5 10]
'base::internal::CopyConstructible<true>' [ 0 6 16]
'std::__1::remove_reference<std::__1::tuple<base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *> &>' [ 0 5 10]
'base::internal::OptionalStorageBase<gfx::Rect, true>' [ 0 6 16]
'std::__1::__to_raw_pointer<const char>' [ 0 5 10]
'std::__1::allocator_traits<std::__1::allocator<aura::Window *> >::allocate' [ 0 5 10 66]
'__pthread_internal_list' [ 0]
'std::__1::move<aura::Window **, aura::Window **>' [ 0 5 10]
'scoped_refptr<gfx::internal::ImageSkiaStorage>' [ 0]
'std::__1::forward<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>' [ 0 5 10]
'std::__1::atomic<int>' [ 0 5 10]
'int32_t' [ 0]
'base::internal::Unwrap<base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)> >' [ 0 6 16]
'scoped_refptr<base::internal::BindStateBase>::get' [ 0 46]
'base::BindUnwrapTraits<SkBitmap>::Unwrap<const SkBitmap &>' [ 0 6 34]
'std::nullptr_t' [ 0 5]
'short' [ 0]
'base::internal::BindState<void (*)(base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *), base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *>' [ 0 6 16]
'std::__1::__compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, std::__1::allocator<char> >::__compressed_pair<true, void>' [ 0 5 10 151]
'std::__1::tuple<base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *>::tuple<base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *&, false, false>' [ 0 5 10 120]
'base::RefCountedThreadSafe<base::internal::BindStateBase, base::internal::BindStateBaseRefCountTraits>' [ 0 6]
'std::__1::vector<aura::Window *, std::__1::allocator<aura::Window *> >::max_size' [ 0 5 10 72]
'std::__1::forward<viz::CopyOutputResult::Format>' [ 0 5 10]
'std::__1::__compressed_pair_elem<viz::CopyOutputRequest *, 0, false>::__compressed_pair_elem<viz::CopyOutputRequest *, void>' [ 0 5 10 70]
'std::__1::get<1, base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >' [ 0 5 10]
'ui::GrabLayerSnapshotAsync' [ 0 4]
'std::__1::tuple<SkBitmap, gfx::Size>::~tuple' [ 0 5 10 38]
'std::__1::remove_reference<const std::__1::tuple<SkBitmap, gfx::Size> &>' [ 0 5 10]
'std::__1::__pointer_type<unsigned char, std::__1::allocator<unsigned char> >' [ 0 5 10]
'std::__1::remove_reference<base::OnceCallback<SkBitmap ()> &>' [ 0 5 10]
'base::BindUnwrapTraits<base::internal::OwnedWrapper<SkBitmap> >' [ 0 6]
'base::internal::Invoker<base::internal::BindState<void (ui::ScreenshotGrabber::*)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>), base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >, void (scoped_refptr<base::RefCountedMemory>)>::RunImpl<void (ui::ScreenshotGrabber::*const &)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>), const std::__1::tuple<base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > > &, 0, 1, 2, 3>::is_method' [ 0 6 16 497 949]
'std::__1::__atomic_base<unsigned int, false>' [ 0 5 10]
'std::__1::forward<scoped_refptr<base::RefCountedMemory> (*const &)(const gfx::Image &)>' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (*)(scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, gfx::Image), scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> >, void (gfx::Image)>::RunImpl<void (*const &)(scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, gfx::Image), const std::__1::tuple<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> > &, 0, 1>::is_method' [ 0 6 16 370 716]
'std::__1::__add_lvalue_reference_impl<viz::CopyOutputRequest, true>' [ 0 5 10]
'std::__1::__compressed_pair_elem<aura::Window **, 0, false>::__compressed_pair_elem<nullptr_t, void>' [ 0 5 10 61]
'std::__1::__split_buffer<aura::Window *, std::__1::allocator<aura::Window *> &>::__split_buffer' [ 0 5 10 81]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1>, base::OnceCallback<SkBitmap ()>, SkBitmap *>::~__tuple_impl' [ 0 5 10 102]
'std::__1::forward<ui::ScreenshotGrabber::ScopedCursorHider *>' [ 0 5 10]
'base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> >::get' [ 0 6 16 70]
'base::internal::PassingTraits<std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >, false>' [ 0 6 16]
'std::__1::__tuple_types<base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *>' [ 0 5 10]
'base::internal::InvokeHelper<false, SkBitmap>::MakeItSo<SkBitmap (*const &)(const SkBitmap &, const gfx::Size &), const SkBitmap &, const gfx::Size &>' [ 0 6 16 47]
'base::internal::OwnedWrapper<SkBitmap>::get' [ 0 6 16 40]
'base::BindUnwrapTraits<base::OnceCallback<void (const SkBitmap &)> >::Unwrap<base::OnceCallback<void (const SkBitmap &)> >' [ 0 6 70]
'base::internal::Invoker<base::internal::BindState<void (*)(std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, const gfx::Rect &, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>, void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>::RunImpl<void (*)(std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, const gfx::Rect &, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), std::__1::tuple<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>, 0, 1, 2, 3>::is_weak_call' [ 0 6 16 895 1674]
'std::__1::__vector_base<aura::Window *, std::__1::allocator<aura::Window *> >::__destruct_at_end' [ 0 5 10 79]
'std::__1::forward<const base::WeakPtr<ui::ScreenshotGrabber> &>' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (*)(base::OnceCallback<SkBitmap ()>, SkBitmap *), base::OnceCallback<SkBitmap ()>, SkBitmap *>, void ()>::RunImpl<void (*)(base::OnceCallback<SkBitmap ()>, SkBitmap *), std::__1::tuple<base::OnceCallback<SkBitmap ()>, SkBitmap *>, 0, 1>::is_weak_call' [ 0 6 16 161 293]
'SkAlphaType' [ 0]
'base::internal::MoveAssignable<true>' [ 0 6 16]
'std::__1::default_delete<viz::CopyOutputResult>' [ 0 5 10]
'base::BindUnwrapTraits<base::internal::OwnedWrapper<SkBitmap> >::Unwrap' [ 0 6 65]
'std::__1::__move<aura::Window *, aura::Window *>' [ 0 5 10]
'base::internal::IsNull<void (ui::ScreenshotGrabber::*)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>)>' [ 0 6 16]
'std::__1::__compressed_pair_elem<viz::CopyOutputResult *, 0, false>' [ 0 5 10]
'base::internal::Unwrap<base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()> >' [ 0 6 16]
'std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >' [ 0 5 10]
'std::__1::forward<base::internal::OwnedWrapper<SkBitmap> >' [ 0 5 10]
'std::__1::forward<const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &>' [ 0 5 10]
'base::internal::FunctorTraits<void (*)(scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, gfx::Image), void>::Invoke<void (*const &)(scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, gfx::Image), scoped_refptr<base::RefCountedMemory> (*const &)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, gfx::Image>' [ 0 6 16 201]
'base::TaskTraits' [ 0 6]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0>, base::RepeatingCallback<void (gfx::Image)> >' [ 0 5 10]
'std::__1::__tuple_leaf<1, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> >, false>::~__tuple_leaf' [ 0 5 10 104]
'gfx::Vector3dF' [ 0 5]
'std::__1::vector<aura::Window *, std::__1::allocator<aura::Window *> >::__push_back_slow_path<aura::Window *const &>' [ 0 5 10 72]
'ui::(anonymous namespace)::EncodeImageAsJPEG' [ 0 4 27]
'std::__1::remove_reference<base::WeakPtr<ui::ScreenshotGrabber> >' [ 0 5 10]
'std::__1::tuple_element<0, std::__1::tuple<base::RepeatingCallback<void (gfx::Image)> > >' [ 0 5 10]
'scoped_refptr<base::RefCountedBytes>::Release' [ 0 38]
'std::__1::__compressed_pair<aura::Window **, std::__1::allocator<aura::Window *> >::__compressed_pair<nullptr_t, true>' [ 0 5 10 84]
'base::BindUnwrapTraits<scoped_refptr<base::RefCountedMemory> *>::Unwrap<scoped_refptr<base::RefCountedMemory> *>' [ 0 6 65]
'__clock_t' [ 0]
'std::__1::tuple_element<1, std::__1::tuple<base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *> >' [ 0 5 10]
'std::__1::unique_ptr<ui::ScreenshotGrabber::ScopedCursorHider, std::__1::default_delete<ui::ScreenshotGrabber::ScopedCursorHider> >::unique_ptr<true, void>' [ 0 5 10 133]
'std::__1::remove_reference<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> *>' [ 0 5 10]
'base::BindOnce<void (*)(std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, const gfx::Rect &, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, const gfx::Rect &, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>' [ 0 6]
'std::__1::remove_reference<void (*)(base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *)>' [ 0 5 10]
'base::internal::InvokeHelper<false, void>::MakeItSo<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const gfx::Size &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), base::RepeatingCallback<void (gfx::Image)>, gfx::Size, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> > >' [ 0 6 16 43]
'base::TaskPriority' [ 0 6]
'base::internal::Invoker<base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const gfx::Size &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), base::RepeatingCallback<void (gfx::Image)>, gfx::Size>, void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>::RunOnce' [ 0 6 16 385]
'std::__1::__compressed_pair_elem<unsigned char *, 0, false>::__compressed_pair_elem<nullptr_t, void>' [ 0 5 10 61]
'base::internal::PassingTraits<scoped_refptr<base::RefCountedMemory>, false>' [ 0 6 16]
'std::__1::__vector_base<unsigned char, std::__1::allocator<unsigned char> >::clear' [ 0 5 10 77]
'base::internal::CallbackBase::polymorphic_invoke' [ 0 6 16 30]
'std::__1::operator<<<char, std::__1::char_traits<char>, std::__1::allocator<char> >' [ 0 5 10]
'base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> >::OwnedWrapper' [ 0 6 16 70]
'std::__1::ios_base::width' [ 0 5 10 20]
'std::__1::__tuple_leaf<2, bool, false>::__tuple_leaf<bool &, void>' [ 0 5 10 40]
'std::__1::forward<gfx::Size>' [ 0 5 10]
'int_fast64_t' [ 0]
'base::internal::Invoker<base::internal::BindState<void (*)(base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *), base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *>, void ()>::RunImpl<void (*)(base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *), std::__1::tuple<base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *>, 0, 1>::is_weak_call' [ 0 6 16 277 525]
'std::__1::move<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> &>' [ 0 5 10]
'scoped_refptr<base::TaskRunner>' [ 0]
'std::__1::tuple_element<0, std::__1::__tuple_types<gfx::Image> >' [ 0 5 10]
'int16_t' [ 0]
'__suseconds_t' [ 0]
'base::BindUnwrapTraits<base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> >::Unwrap<const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &>' [ 0 6 96]
'aura::Window::IsRootWindow' [ 0 6 14]
'std::__1::char_traits<char>::eof' [ 0 5 10 29]
'std::__1::forward<std::__1::default_delete<viz::CopyOutputRequest> >' [ 0 5 10]
'std::__1::__compressed_pair_elem<ui::ScreenshotGrabber::ScopedCursorHider *, 0, false>::__compressed_pair_elem<ui::ScreenshotGrabber::ScopedCursorHider *&, void>' [ 0 5 10 88]
'std::__1::__vector_base<aura::Window *, std::__1::allocator<aura::Window *> >::clear' [ 0 5 10 79]
'std::__1::__tuple_leaf<3, int, false>' [ 0 5 10]
'std::__1::use_facet<std::__1::ctype<char> >' [ 0 5 10]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__get_long_cap' [ 0 5 10 87]
'base::Callback<MakeUnboundRunType<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const SkBitmap &), const base::RepeatingCallback<void (gfx::Image)> &> >' [ 0 6]
'base::BindUnwrapTraits<base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)> >' [ 0 6]
'base::internal::BindState<void (*)(base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory> *), base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >::Destroy' [ 0 6 16 281]
'std::__1::conditional<true, std::__1::tuple<base::OnceCallback<SkBitmap ()>, SkBitmap *>, std::__1::__nat>' [ 0 5 10]
'base::internal::FunctorTraits<void (*)(base::OnceCallback<void (const SkBitmap &)>, SkBitmap *), void>' [ 0 6 16]
'base::PlatformThreadRef' [ 0 6]
'std::__1::__tuple_leaf<0, gfx::Image, false>::__tuple_leaf<gfx::Image, void>' [ 0 5 10 46]
'std::__1::tuple_element<1, std::__1::__tuple_types<base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > > >' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (*)(base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *), base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *>, void ()>::RunOnce::num_bound_args' [ 0 6 16 277 286]
'base::internal::BindState<void (*)(scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, gfx::Image), scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> >::BindState<void (&)(scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, gfx::Image), scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &>' [ 0 6 16 326]
'base::BindRepeating<scoped_refptr<base::RefCountedMemory> (*&)(const gfx::Image &), gfx::Image>' [ 0 6]
'std::__1::__wrap_iter<aura::Window *const *>::operator++' [ 0 5 10 46]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__get_short_pointer' [ 0 5 10 87]
'std::__1::index_sequence<0UL, 1UL, 2UL, 3UL>' [ 0 5 10]
'base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>' [ 0 6]
'std::__1::remove_reference<scoped_refptr<base::RefCountedMemory> *>' [ 0 5 10]
'std::__1::conditional<true, std::__1::tuple<SkBitmap, gfx::Size>, std::__1::__nat>' [ 0 5 10]
'aura::WindowObserver::OnWindowTargetTransformChanging' [ 0 6 22]
'std::__1::tuple<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>::~tuple' [ 0 5 10 331]
'ui::ScreenshotGrabber::ScreenshotGrabber' [ 0 4 23]
'base::internal' [ 0 6]
'std::__1::add_lvalue_reference<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> >' [ 0 5 10]
'base::TaskShutdownBehavior' [ 0 6]
'std::__1::index_sequence<0UL>' [ 0 5 10]
'std::__1::add_lvalue_reference<viz::CopyOutputRequest>' [ 0 5 10]
'base::Optional<base::UnguessableToken>' [ 0 6]
'std::__1::remove_reference<aura::Window **&>' [ 0 5 10]
'SkISize' [ 0]
'std::__1::__pointer_type<viz::CopyOutputRequest, std::__1::default_delete<viz::CopyOutputRequest> >' [ 0 5 10]
'std::__1::get<1, base::RepeatingCallback<void (gfx::Image)>, gfx::Size>' [ 0 5 10]
'base::RefCountedThreadSafe<base::RefCountedMemory, base::DefaultRefCountedThreadSafeTraits<base::RefCountedMemory> >::AddRef' [ 0 6 118]
'base::Callback<MakeUnboundRunType<scoped_refptr<base::RefCountedMemory> (*&)(const gfx::Image &), gfx::Image> >' [ 0 6]
'base::internal::CopyAssignable<true>' [ 0 6 16]
'std::__1::tuple_element<0, std::__1::tuple<base::OnceCallback<SkBitmap ()>, SkBitmap *> >' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), base::RepeatingCallback<void (gfx::Image)> >, void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>::RunImpl<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), std::__1::tuple<base::RepeatingCallback<void (gfx::Image)> >, 0>::is_weak_call' [ 0 6 16 356 587]
'base::RepeatingCallback<SkBitmap ()>::RepeatingCallback' [ 0 6 38]
'uintptr_t' [ 0]
'std::__1::remove_reference<void (*&)(const base::RepeatingCallback<void (gfx::Image)> &, const gfx::Size &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>' [ 0 5 10]
'base::internal::WeakPtrFactoryBase' [ 0 6 16]
'std::__1::remove_reference<const gfx::Rect &>' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (ui::ScreenshotGrabber::*)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>), base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >, void (scoped_refptr<base::RefCountedMemory>)>' [ 0 6 16]
'std::__1::vector<aura::Window *, std::__1::allocator<aura::Window *> >::__destruct_at_end' [ 0 5 10 72]
'base::BindUnwrapTraits<std::__1::basic_string<char> >' [ 0 6]
'base::Callback<void (gfx::Image)>' [ 0 6]
'base::BindUnwrapTraits<base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >::Unwrap' [ 0 6 95]
'std::__1::enable_if<true, base::Optional<gfx::Rect> &>' [ 0 5 10]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1, 2, 3>, std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>::~__tuple_impl' [ 0 5 10 377]
'std::__1::allocator_traits<std::__1::allocator<aura::Window *> >::construct<aura::Window *, aura::Window *const &>' [ 0 5 10 66]
'std::__1::enable_if_t<FunctorTraits<void (*)(unique_ptr<WindowTrackerTemplate<Window, WindowObserver>, default_delete<WindowTrackerTemplate<Window, WindowObserver> > >, const Rect &, OnceCallback<void (unique_ptr<CopyOutputResult, default_delete<CopyOutputResult> >)>, int, unique_ptr<CopyOutputResult, default_delete<CopyOutputResult> >)>::is_nullable, bool>' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (*)(scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, gfx::Image), scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> >, void (gfx::Image)>::RunImpl<void (*const &)(scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, gfx::Image), const std::__1::tuple<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> > &, 0, 1>' [ 0 6 16 370]
'base::internal::BindState<void (*)(base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *), base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *>::BindState<void (*)(base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *), base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *&>' [ 0 6 16 243]
'int_fast32_t' [ 0]
'sk_sp<SkPixelRef>::operator bool' [ 0 19]
'std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> >' [ 0 5 10]
'base::internal::InvokeHelper<false, scoped_refptr<base::RefCountedMemory> >' [ 0 6 16]
'long unsigned int' [ 0]
'std::__1::string' [ 0 5 10]
'ui::ScreenshotGrabber::CanTakeScreenshot' [ 0 4 23]
'uint_fast8_t' [ 0]
'wchar_t' [ 0]
'base::internal::ApplyCancellationTraits<base::internal::BindState<void (ui::ScreenshotGrabber::*)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>), base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > > >' [ 0 6 16]
'base::internal::LockImpl' [ 0 6 16]
'std::__1::basic_streambuf<char, std::__1::char_traits<char> >::sputn' [ 0 5 10 63]
'std::__1::remove_reference<void (*)(std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, const gfx::Rect &, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>' [ 0 5 10]
'base::internal::BindState<void (*)(base::OnceCallback<void (const SkBitmap &)>, SkBitmap *), base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> >::BindState<void (*)(base::OnceCallback<void (const SkBitmap &)>, SkBitmap *), base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> >' [ 0 6 16 180]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0>, gfx::Image>::~__tuple_impl' [ 0 5 10 66]
'FILE' [ 0]
'base::internal::BindState<void (ui::ScreenshotGrabber::*)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>), base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >' [ 0 6 16]
'base::internal::InvokeHelper<false, void>::MakeItSo<void (*)(base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory> *), base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory> *>' [ 0 6 16 43]
'std::__1::forward<void (*const &)(scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &, gfx::Image)>' [ 0 5 10]
'std::__1::__tuple_leaf<3, int, false>::__tuple_leaf<int, void>' [ 0 5 10 39]
'std::__1::tuple<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> >::~tuple' [ 0 5 10 152]
'std::__1::locale' [ 0 5 10]
'std::__1::conditional<true, std::__1::tuple<base::RepeatingCallback<void (gfx::Image)>, gfx::Size>, std::__1::__nat>' [ 0 5 10]
'_G_fpos64_t' [ 0]
'base::internal::Invoker<base::internal::BindState<void (*)(base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory> *), base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >, void ()>::RunImpl<void (*)(base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory> *), std::__1::tuple<base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >, 0, 1>::is_method' [ 0 6 16 315 601]
'base::BindUnwrapTraits<SkBitmap *>' [ 0 6]
'std::__1::default_delete<ui::ScreenshotGrabber::ScopedCursorHider>::operator()' [ 0 5 10 68]
'std::__1::tuple_element<0, std::__1::__tuple_types<base::RepeatingCallback<void (gfx::Image)>, gfx::Size> >' [ 0 5 10]
'base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const gfx::Size &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), base::RepeatingCallback<void (gfx::Image)>, gfx::Size>::Destroy' [ 0 6 16 258]
'base::internal::Unwrap<SkBitmap *>' [ 0 6 16]
'base::internal::BindState<void (*)(std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, const gfx::Rect &, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>::~BindState' [ 0 6 16 768]
'std::__1::__tuple_leaf<2, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, false>::__tuple_leaf<base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, void>' [ 0 5 10 156]
'std::__1::__compressed_pair<base::SequenceCheckerImpl::Core *, std::__1::default_delete<base::SequenceCheckerImpl::Core> >' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (ui::ScreenshotGrabber::*)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>), base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >, void (scoped_refptr<base::RefCountedMemory>)>::RunImpl<void (ui::ScreenshotGrabber::*const &)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>), const std::__1::tuple<base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > > &, 0, 1, 2, 3>::is_weak_call' [ 0 6 16 497 949]
'base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const SkBitmap &), base::RepeatingCallback<void (gfx::Image)> >' [ 0 6 16]
'std::__1::get<0, gfx::Image>' [ 0 5 10]
'base::RepeatingCallback<void (gfx::Image)>::RepeatingCallback' [ 0 6 44]
'base::subtle' [ 0 6]
'std::__1::remove_reference<SkBitmap (&)(const SkBitmap &, const gfx::Size &)>' [ 0 5 10]
'std::__1::basic_ios<char, std::__1::char_traits<char> >::fill' [ 0 5 10 57]
'std::__1::forward<base::OnceCallback<void (const SkBitmap &)> >' [ 0 5 10]
'std::__1::__tuple_indices<0, 1>' [ 0 5 10]
'std::__1::forward<const std::__1::tuple<gfx::Image> &>' [ 0 5 10]
'std::__1::__compressed_pair<aura::Window **, std::__1::allocator<aura::Window *> &>::__compressed_pair<nullptr_t, std::__1::allocator<aura::Window *> &>' [ 0 5 10 85]
'std::__1::__compressed_pair_elem<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::__rep, 0, false>::__compressed_pair_elem' [ 0 5 10 138]
'std::__1::forward<std::__1::allocator<aura::Window *> &>' [ 0 5 10]
'base::BindUnwrapTraits<SkBitmap>' [ 0 6]
'ui::LayerOwner::layer' [ 0 4 16]
'std::__1::__tuple_leaf<0, base::OnceCallback<void (const SkBitmap &)>, false>' [ 0 5 10]
'ui::ScreenshotGrabber::GrabWindowSnapshotAsyncCallback' [ 0 4 23]
'base::RepeatingCallback<scoped_refptr<base::RefCountedMemory> ()>::RepeatingCallback' [ 0 6 67]
'std::__1::remove_reference<ui::ScreenshotGrabber::ScopedCursorHider *&>' [ 0 5 10]
'scoped_refptr<base::RefCountedMemory>::scoped_refptr' [ 0 39]
'uint32_t' [ 0]
'std::__1::vector<aura::Window *, std::__1::allocator<aura::Window *> >::push_back' [ 0 5 10 72]
'lldiv_t' [ 0]
'base::Lock' [ 0 6]
'std::__1::remove_reference<ui::ScreenshotGrabber::ScopedCursorHider *>' [ 0 5 10]
'std::__1::default_delete<viz::CopyOutputRequest>' [ 0 5 10]
'std::__1::tuple<base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> >::~tuple' [ 0 5 10 103]
'__int64_t' [ 0]
'std::__1::__wrap_iter<aura::Window *const *>::operator*' [ 0 5 10 46]
'ui::GrabWindowSnapshotAndScaleAsyncAura' [ 0 4]
'std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >::clear' [ 0 5 10 87]
'std::__1::tuple_element<0, std::__1::tuple<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int> >' [ 0 5 10]
'std::__1::__tuple_leaf<1, SkBitmap *, false>::__tuple_leaf<SkBitmap *&, void>' [ 0 5 10 46]
'std::__1::default_delete<viz::CopyOutputRequest>::operator()' [ 0 5 10 50]
'std::__1::move<void (*&)(const base::RepeatingCallback<void (gfx::Image)> &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>' [ 0 5 10]
'base::subtle::RefCountedThreadSafeBase::ReleaseImpl' [ 0 6 14 40]
'base::internal::Invoker<base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const SkBitmap &), base::RepeatingCallback<void (gfx::Image)> >, void (const SkBitmap &)>::Run' [ 0 6 16 202]
'std::__1::__tuple_leaf<0, base::OnceCallback<SkBitmap ()>, false>::~__tuple_leaf' [ 0 5 10 67]
'base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>' [ 0 6]
'SkBitmap' [ 0]
'std::__1::remove_reference<const base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > &>' [ 0 5 10]
'base::internal::Unwrap<base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >' [ 0 6 16]
'base::AtomicRefCount::IsZero' [ 0 6 22]
'std::__1::allocator_traits<std::__1::allocator<aura::Window *> >::__construct_backward<aura::Window *>' [ 0 5 10 66]
'std::__1::move<base::OnceCallback<SkBitmap ()> &>' [ 0 5 10]
'std::__1::__compressed_pair_elem<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> *, 0, false>' [ 0 5 10]
'std::__1::remove_reference<std::__1::tuple<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int> >' [ 0 5 10]
'std::__1::conditional<false, std::__1::tuple<base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *>, std::__1::__nat>' [ 0 5 10]
'base::OnceCallback<SkBitmap ()>' [ 0 6]
'base::Optional<gfx::Rect>::operator=<const gfx::Rect &>' [ 0 6 27]
'std::__1::enable_if_t<FunctorTraits<void (*)(const RepeatingCallback<void (Image)> &, unique_ptr<CopyOutputResult, default_delete<CopyOutputResult> >)>::is_nullable, bool>' [ 0 5 10]
'base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>::Run' [ 0 6 88]
'std::__1::remove_reference<nullptr_t>' [ 0 5 10]
'base::internal::FunctorTraits<void (*)(std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, const gfx::Rect &, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), void>::Invoke<void (*)(std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, const gfx::Rect &, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> > >' [ 0 6 16 464]
'std::__1::move<base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &>' [ 0 5 10]
'std::__1::__pointer_type_imp::__pointer_type<base::SequenceCheckerImpl::Core, std::__1::default_delete<base::SequenceCheckerImpl::Core>, false>' [ 0 5 10 30]
'base::internal::BindState<void (ui::ScreenshotGrabber::*)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>), base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >::~BindState' [ 0 6 16 426]
'logging::LogMessageVoidify::operator&' [ 0 9 28]
'base::Passed<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> >' [ 0 6]
'base::internal::Invoker<base::internal::BindState<void (*)(std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, const gfx::Rect &, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>, void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>::RunImpl<void (*)(std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, const gfx::Rect &, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), std::__1::tuple<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>, 0, 1, 2, 3>' [ 0 6 16 895]
'std::__1::char_traits<char>' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (*)(base::OnceCallback<SkBitmap ()>, SkBitmap *), base::OnceCallback<SkBitmap ()>, SkBitmap *>, void ()>::RunOnce::num_bound_args' [ 0 6 16 161 170]
'std::__1::__compressed_pair_elem<viz::CopyOutputRequest *, 0, false>' [ 0 5 10]
'std::__1::remove_reference<const gfx::Image &>' [ 0 5 10]
'base::internal::Unwrap<gfx::Rect>' [ 0 6 16]
'base::internal::OptionalBase<gfx::Rect>::InitOrAssign<const gfx::Rect &>' [ 0 6 16 41]
'std::__1::remove_reference<base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > >' [ 0 5 10]
'std::__1::move<std::__1::tuple<base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *> &>' [ 0 5 10]
'std::__1::__tuple_leaf<1, base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)>, false>::~__tuple_leaf' [ 0 5 10 105]
'base::BindUnwrapTraits<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > > >' [ 0 6]
'std::__1::get<0, base::RepeatingCallback<void (gfx::Image)> >' [ 0 5 10]
'std::__1::enable_if_t<!std::is_same<internal::RemoveCvRefT<const Rect &>, Optional<Rect> >::value && std::is_constructible<Rect, const Rect &>::value && std::is_assignable<Rect &, const Rect &>::value && (!std::is_scalar<Rect>::value || !std::is_same<std::decay_t<const Rect &>, Rect>::value), base::Optional<gfx::Rect> &>' [ 0 5 10]
'base::internal::FunctorTraits<void (*)(base::OnceCallback<SkBitmap ()>, SkBitmap *), void>' [ 0 6 16]
'std::__1::tuple_element<0, std::__1::__tuple_types<base::WeakPtr<ui::ScreenshotGrabber>, std::__1::basic_string<char>, bool, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> > > >' [ 0 5 10]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0, 1>, base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *>::__tuple_impl<0, 1, base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *, base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *&>' [ 0 5 10 160]
'std::__1::remove_reference<base::OnceCallback<void (const SkBitmap &)> >' [ 0 5 10]
'std::__1::remove_reference<const base::RepeatingCallback<void (scoped_refptr<base::RefCountedMemory>)> &>' [ 0 5 10]
'std::__1::vector<aura::Window *, std::__1::allocator<aura::Window *> >::capacity' [ 0 5 10 72]
'std::__1::forward<const gfx::Size &>' [ 0 5 10]
'gfx::Vector2d' [ 0 5]
'base::internal::Invoker<base::internal::BindState<void (*)(base::OnceCallback<void (const SkBitmap &)>, SkBitmap *), base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> >, void ()>::RunImpl<void (*)(base::OnceCallback<void (const SkBitmap &)>, SkBitmap *), std::__1::tuple<base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> >, 0, 1>::is_weak_call' [ 0 6 16 214 399]
'std::__1::tuple_element<0, std::__1::tuple<base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *> >' [ 0 5 10]
'std::__1::__compressed_pair<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> *, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >::__compressed_pair<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> *&, true>' [ 0 5 10 185]
'base::BindUnwrapTraits<gfx::Image>' [ 0 6]
'std::__1::__compressed_pair<aura::Window **, std::__1::allocator<aura::Window *> &>::second' [ 0 5 10 85]
'base::internal::FunctorTraits<SkBitmap (*)(const SkBitmap &, const gfx::Size &), void>' [ 0 6 16]
'base::internal::PassingTraitsType<std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> > >' [ 0 6 16]
'SkTransferFunctionBehavior' [ 0]
'std::__1::__split_buffer<aura::Window *, std::__1::allocator<aura::Window *> &>::clear' [ 0 5 10 81]
'std::__1::vector<aura::Window *, std::__1::allocator<aura::Window *> >::__swap_out_circular_buffer' [ 0 5 10 72]
'std::__1::vector<aura::Window *, std::__1::allocator<aura::Window *> >' [ 0 5 10]
'base::RepeatingCallback<void (gfx::Image)>::Run' [ 0 6 44]
'std::__1::__compressed_pair_elem<std::__1::allocator<char>, 1, true>' [ 0 5 10]
'scoped_refptr<base::RefCountedMemory>::Release' [ 0 39]
'std::__1::__tuple_leaf<0, std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, false>::__tuple_leaf<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, void>' [ 0 5 10 210]
'base::SequenceCheckerImpl' [ 0 6]
'__int32_t' [ 0]
'std::__1::unique_ptr<viz::CopyOutputRequest, std::__1::default_delete<viz::CopyOutputRequest> >::~unique_ptr' [ 0 5 10 97]
'aura::WindowObserver::OnWindowTransformed' [ 0 6 22]
'std::__1::forward<base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()> >' [ 0 5 10]
'base::internal::PassingTraitsType<ui::ScreenshotResult>' [ 0 6 16]
'std::__1::__tuple_impl<std::__1::__tuple_indices<0>, base::RepeatingCallback<void (gfx::Image)> >::__tuple_impl<0, base::RepeatingCallback<void (gfx::Image)> , const base::RepeatingCallback<void (gfx::Image)> &>' [ 0 5 10 99]
'base::internal::Invoker<base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const SkBitmap &), base::RepeatingCallback<void (gfx::Image)> >, void (const SkBitmap &)>::RunImpl<void (*const &)(const base::RepeatingCallback<void (gfx::Image)> &, const SkBitmap &), const std::__1::tuple<base::RepeatingCallback<void (gfx::Image)> > &, 0>::is_weak_call' [ 0 6 16 202 371]
'base::BindUnwrapTraits<std::__1::basic_string<char> >::Unwrap<const std::__1::basic_string<char> &>' [ 0 6 55]
'std::__1::remove_reference<base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)> >' [ 0 5 10]
'std::__1::remove_reference<gfx::Size>' [ 0 5 10]
'std::__1::enable_if_t<FunctorTraits<void (ScreenshotGrabber::*)(const basic_string<char> &, bool, OnceCallback<void (ScreenshotResult, scoped_refptr<RefCountedMemory>)>, scoped_refptr<RefCountedMemory>)>::is_nullable, bool>' [ 0 5 10]
'ui::GrabViewSnapshotAsync' [ 0 4]
'base::Location' [ 0 6]
'uint_least8_t' [ 0]
'SkBitmap::getPixels' [ 0 10]
'aura::WindowObserver::OnWindowPropertyChanged' [ 0 6 22]
'base::internal::InvokeHelper<true, void>::MakeItSo<void (ui::ScreenshotGrabber::*const &)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>), const base::WeakPtr<ui::ScreenshotGrabber> &, const std::__1::basic_string<char> &, const bool &, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory> >' [ 0 6 16 42]
'base::Owned<scoped_refptr<base::RefCountedMemory> >' [ 0 6]
'base::nullopt_t' [ 0 6]
'base::internal::InvokeHelper<false, void>::MakeItSo<void (*const &)(const base::RepeatingCallback<void (gfx::Image)> &, const SkBitmap &), const base::RepeatingCallback<void (gfx::Image)> &, const SkBitmap &>' [ 0 6 16 43]
'std::__1::char_traits<char>::length' [ 0 5 10 29]
'base::internal::Invoker<base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const SkBitmap &), base::RepeatingCallback<void (gfx::Image)> >, void (const SkBitmap &)>' [ 0 6 16]
'base::internal::Invoker<base::internal::BindState<void (*)(base::OnceCallback<void (const SkBitmap &)>, SkBitmap *), base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> >, void ()>::RunImpl<void (*)(base::OnceCallback<void (const SkBitmap &)>, SkBitmap *), std::__1::tuple<base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> >, 0, 1>::is_method' [ 0 6 16 214 399]
'std::__1::tuple_element<1, std::__1::__tuple_types<base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> > >' [ 0 5 10]
'SkFilterQuality' [ 0]
'base::internal::FunctorTraits<SkBitmap (*)(const SkBitmap &, const gfx::Size &), void>::Invoke<SkBitmap (*const &)(const SkBitmap &, const gfx::Size &), const SkBitmap &, const gfx::Size &>' [ 0 6 16 88]
'std::__1::__vector_base<aura::Window *, std::__1::allocator<aura::Window *> >::capacity' [ 0 5 10 79]
'gfx::Transform' [ 0 5]
'base::internal::BindState<SkBitmap (*)(const SkBitmap &, const gfx::Size &), SkBitmap, gfx::Size>' [ 0 6 16]
'base::BindUnwrapTraits<base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)> >::Unwrap<base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)> >' [ 0 6 91]
'SkMatrix44' [ 0]
'std::__1::min<unsigned long>' [ 0 5 10]
'uint16_t' [ 0]
'ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>::RemoveAll' [ 0 4 63]
'long int' [ 0]
'ui::GrabWindowSnapshotAsyncJPEGCallback' [ 0 4]
'std::__1::forward<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &)>' [ 0 5 10]
'std::__1::get<1, SkBitmap, gfx::Size>' [ 0 5 10]
'std::__1::vector<aura::Window *, std::__1::allocator<aura::Window *> >::operator[]' [ 0 5 10 72]
'std::__1::tuple_element<1, std::__1::__tuple_types<SkBitmap, gfx::Size> >' [ 0 5 10]
'std::__1::__const_pointer<char, char *, std::__1::allocator<char>, true>' [ 0 5 10]
'base::internal::BindState<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), base::RepeatingCallback<void (gfx::Image)> >' [ 0 6 16]
'std::__1::unique_ptr<viz::CopyOutputRequest, std::__1::default_delete<viz::CopyOutputRequest> >::release' [ 0 5 10 97]
'std::__1::remove_reference<std::__1::tuple<base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > > &>' [ 0 5 10]
'std::__1::__compressed_pair<viz::CopyOutputRequest *, std::__1::default_delete<viz::CopyOutputRequest> >' [ 0 5 10]
'std::__1::get<3, std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>' [ 0 5 10]
'std::__1::__tuple_leaf<3, base::internal::PassedWrapper<base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)> >, false>' [ 0 5 10]
'std::__1::__const_void_pointer<aura::Window **, std::__1::allocator<aura::Window *>, false>' [ 0 5 10]
'std::__1::remove_reference<viz::CopyOutputResult::Format>' [ 0 5 10]
'SkVector' [ 0]
'std::__1::__tuple_leaf<0, gfx::Image, false>' [ 0 5 10]
'std::__1::min<unsigned long, std::__1::__less<unsigned long, unsigned long> >' [ 0 5 10]
'std::__1::__compressed_pair_elem<std::__1::default_delete<viz::CopyOutputRequest>, 1, true>' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<void (*)(std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, const gfx::Rect &, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >), std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int>, void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>::RunOnce' [ 0 6 16 895]
'base::internal::Unwrap<base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)> >' [ 0 6 16]
'base::BindRepeating<SkBitmap (&)(const SkBitmap &, const gfx::Size &), const SkBitmap &, const gfx::Size &>' [ 0 6]
'base::internal::Invoker<base::internal::BindState<void (*)(base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory> *), base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > >, void ()>::RunOnce' [ 0 6 16 315]
'std::__1::tuple_element<0, std::__1::__tuple_types<base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)>, base::internal::OwnedWrapper<scoped_refptr<base::RefCountedMemory> > > >' [ 0 5 10]
'base::BindUnwrapTraits<base::RepeatingCallback<void (gfx::Image)> >::Unwrap<base::RepeatingCallback<void (gfx::Image)> >' [ 0 6 69]
'std::__1::tuple_element<1, std::__1::__tuple_types<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, gfx::Rect, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int> >' [ 0 5 10]
'base::internal::Invoker<base::internal::BindState<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), gfx::Image>, scoped_refptr<base::RefCountedMemory> ()>::RunImpl<scoped_refptr<base::RefCountedMemory> (*const &)(const gfx::Image &), const std::__1::tuple<gfx::Image> &, 0>::is_method' [ 0 6 16 169 288]
'ui::SnapshotAsync::ScaleCopyOutputResult' [ 0 4 19]
'std::__1::__tuple_leaf<0, base::RepeatingCallback<void (gfx::Image)>, false>::~__tuple_leaf' [ 0 5 10 78]
'std::__1::default_delete<viz::CopyOutputResult>::operator()' [ 0 5 10 49]
'std::__1::move<base::OnceCallback<void (scoped_refptr<base::RefCountedMemory>)> &>' [ 0 5 10]
'base::UnguessableToken' [ 0 6]
'scoped_refptr<base::internal::BindStateBase>::operator->' [ 0 46]
'std::__1::vector<aura::Window *, std::__1::allocator<aura::Window *> >::erase' [ 0 5 10 72]
'std::__1::remove_reference<std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > > >' [ 0 5 10]
'std::__1::forward<base::WeakPtr<ui::ScreenshotGrabber> >' [ 0 5 10]
'std::__1::remove_reference<void (ui::ScreenshotGrabber::*)(const std::__1::basic_string<char> &, bool, base::OnceCallback<void (ui::ScreenshotResult, scoped_refptr<base::RefCountedMemory>)>, scoped_refptr<base::RefCountedMemory>)>' [ 0 5 10]
'base::BindRepeating<void (*)(const base::RepeatingCallback<void (gfx::Image)> &, const SkBitmap &), const base::RepeatingCallback<void (gfx::Image)> &>' [ 0 6]
'__int16_t' [ 0]
'base::internal::Invoker<base::internal::BindState<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), gfx::Image>, scoped_refptr<base::RefCountedMemory> ()>' [ 0 6 16]
'std::__1::forward<aura::Window *const &>' [ 0 5 10]
'base::internal::FunctorTraits<scoped_refptr<base::RefCountedMemory> (*)(const gfx::Image &), void>' [ 0 6 16]
'std::__1::tuple<base::OnceCallback<scoped_refptr<base::RefCountedMemory> ()>, scoped_refptr<base::RefCountedMemory> *>::~tuple' [ 0 5 10 120]
'base::internal::IsNull<void (*)(std::__1::unique_ptr<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver>, std::__1::default_delete<ui::WindowTrackerTemplate<aura::Window, aura::WindowObserver> > >, const gfx::Rect &, base::OnceCallback<void (std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>, int, std::__1::unique_ptr<viz::CopyOutputResult, std::__1::default_delete<viz::CopyOutputResult> >)>' [ 0 6 16]
'std::__1::tuple_element<1, std::__1::tuple<base::RepeatingCallback<void (gfx::Image)>, gfx::Size> >' [ 0 5 10]
'std::__1::unique_ptr<ui::ScreenshotGrabber::ScopedCursorHider, std::__1::default_delete<ui::ScreenshotGrabber::ScopedCursorHider> >' [ 0 5 10]
'std::__1::tuple_element<1, std::__1::tuple<base::OnceCallback<void (const SkBitmap &)>, base::internal::OwnedWrapper<SkBitmap> > >' [ 0 5 10]
